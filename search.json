[{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"variables-as-sticky-notes","dir":"","previous_headings":"","what":"Variables as Sticky Notes","title":"Python Fundamentals","text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"check-your-understanding","dir":"","previous_headings":"","what":"Check Your Understanding","title":"Python Fundamentals","text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"sorting-out-references","dir":"","previous_headings":"","what":"Sorting Out References","title":"Python Fundamentals","text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"seeing-data-types","dir":"","previous_headings":"","what":"Seeing Data Types","title":"Python Fundamentals","text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Python Fundamentals","text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"data-type","dir":"","previous_headings":"","what":"Data Type","title":"Analyzing Patient Data","text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"in-the-corner","dir":"","previous_headings":"","what":"In the Corner","title":"Analyzing Patient Data","text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"not-all-functions-have-input","dir":"","previous_headings":"","what":"Not All Functions Have Input","title":"Analyzing Patient Data","text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"mystery-functions-in-ipython","dir":"","previous_headings":"","what":"Mystery Functions in IPython","title":"Analyzing Patient Data","text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"confusing-function-names","dir":"","previous_headings":"","what":"Confusing Function Names","title":"Analyzing Patient Data","text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings","dir":"","previous_headings":"","what":"Slicing Strings","title":"Analyzing Patient Data","text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings-1","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":"Analyzing Patient Data","text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings-2","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":"Analyzing Patient Data","text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings-3","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":"Analyzing Patient Data","text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"thin-slices","dir":"","previous_headings":"","what":"Thin Slices","title":"Analyzing Patient Data","text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"stacking-arrays","dir":"","previous_headings":"","what":"Stacking Arrays","title":"Analyzing Patient Data","text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"change-in-inflammation","dir":"","previous_headings":"","what":"Change In Inflammation","title":"Analyzing Patient Data","text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"change-in-inflammation-1","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":"Analyzing Patient Data","text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"change-in-inflammation-2","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":"Analyzing Patient Data","text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Analyzing Patient Data","text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"episode-prerequisites","dir":"","previous_headings":"","what":"Episode Prerequisites","title":"Visualizing Tabular Data","text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"grouping-plots","dir":"","previous_headings":"","what":"Grouping plots","title":"Visualizing Tabular Data","text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"importing-libraries-with-shortcuts","dir":"","previous_headings":"","what":"Importing libraries with shortcuts","title":"Visualizing Tabular Data","text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"plot-scaling","dir":"","previous_headings":"","what":"Plot Scaling","title":"Visualizing Tabular Data","text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"plot-scaling-1","dir":"","previous_headings":"","what":"Plot Scaling (continued)","title":"Visualizing Tabular Data","text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"drawing-straight-lines","dir":"","previous_headings":"","what":"Drawing Straight Lines","title":"Visualizing Tabular Data","text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"make-your-own-plot","dir":"","previous_headings":"","what":"Make Your Own Plot","title":"Visualizing Tabular Data","text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"moving-plots-around","dir":"","previous_headings":"","what":"Moving Plots Around","title":"Visualizing Tabular Data","text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Visualizing Tabular Data","text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"ch-ch-ch-ch-changes","dir":"","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":"Storing Multiple Values in Lists","text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"nested-lists","dir":"","previous_headings":"","what":"Nested Lists","title":"Storing Multiple Values in Lists","text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"heterogeneous-lists","dir":"","previous_headings":"","what":"Heterogeneous Lists","title":"Storing Multiple Values in Lists","text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"slicing-from-the-end","dir":"","previous_headings":"","what":"Slicing From the End","title":"Storing Multiple Values in Lists","text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"non-continuous-slices","dir":"","previous_headings":"","what":"Non-Continuous Slices","title":"Storing Multiple Values in Lists","text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"overloading","dir":"","previous_headings":"","what":"Overloading","title":"Storing Multiple Values in Lists","text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Storing Multiple Values in Lists","text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s in a name?","title":"Repeating Actions with Loops","text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"from-1-to-n","dir":"","previous_headings":"","what":"From 1 to N","title":"Repeating Actions with Loops","text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"understanding-the-loops","dir":"","previous_headings":"","what":"Understanding the loops","title":"Repeating Actions with Loops","text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"computing-powers-with-loops","dir":"","previous_headings":"","what":"Computing Powers With Loops","title":"Repeating Actions with Loops","text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"summing-a-list","dir":"","previous_headings":"","what":"Summing a list","title":"Repeating Actions with Loops","text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"computing-the-value-of-a-polynomial","dir":"","previous_headings":"","what":"Computing the Value of a Polynomial","title":"Repeating Actions with Loops","text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Repeating Actions with Loops","text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/06-files.html","id":"plotting-differences","dir":"","previous_headings":"","what":"Plotting Differences","title":"Analyzing Data from Multiple Files","text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/06-files.html","id":"generate-composite-statistics","dir":"","previous_headings":"","what":"Generate Composite Statistics","title":"Analyzing Data from Multiple Files","text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/06-files.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Analyzing Data from Multiple Files","text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"comparing-in-python","dir":"","previous_headings":"","what":"Comparing in Python","title":"Making Choices","text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"true-and-false","dir":"","previous_headings":"","what":"True and False","title":"Making Choices","text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"how-many-paths","dir":"","previous_headings":"","what":"How Many Paths?","title":"Making Choices","text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"what-is-truth","dir":"","previous_headings":"","what":"What Is Truth?","title":"Making Choices","text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"thats-not-not-what-i-meant","dir":"","previous_headings":"","what":"That’s Not Not What I Meant","title":"Making Choices","text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"close-enough","dir":"","previous_headings":"","what":"Close Enough","title":"Making Choices","text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"in-place-operators","dir":"","previous_headings":"","what":"In-Place Operators","title":"Making Choices","text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"sorting-a-list-into-buckets","dir":"","previous_headings":"","what":"Sorting a List Into Buckets","title":"Making Choices","text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"counting-vowels","dir":"","previous_headings":"","what":"Counting Vowels","title":"Making Choices","text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Making Choices","text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"combining-strings","dir":"","previous_headings":"","what":"Combining Strings","title":"Creating Functions","text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"return-versus-print","dir":"","previous_headings":"","what":"Return versus print","title":"Creating Functions","text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"selecting-characters-from-strings","dir":"","previous_headings":"","what":"Selecting Characters From Strings","title":"Creating Functions","text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"rescaling-an-array","dir":"","previous_headings":"","what":"Rescaling an Array","title":"Creating Functions","text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"testing-and-documenting-your-function","dir":"","previous_headings":"","what":"Testing and Documenting Your Function","title":"Creating Functions","text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"defining-defaults-1","dir":"","previous_headings":"","what":"Defining Defaults","title":"Creating Functions","text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"variables-inside-and-outside-functions","dir":"","previous_headings":"","what":"Variables Inside and Outside Functions","title":"Creating Functions","text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"mixing-default-and-non-default-parameters","dir":"","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":"Creating Functions","text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"readable-code","dir":"","previous_headings":"","what":"Readable Code","title":"Creating Functions","text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Creating Functions","text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"long-tracebacks","dir":"","previous_headings":"","what":"Long Tracebacks","title":"Errors and Exceptions","text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"reading-error-messages","dir":"","previous_headings":"","what":"Reading Error Messages","title":"Errors and Exceptions","text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17  ---> 18 print_sunday_message()      19   <ipython-input-7-3ad455d81842> in print_sunday_message()      14       15 def print_sunday_message(): ---> 16     print_message(7)      17       18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14       15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"better-errors-on-newer-pythons","dir":"","previous_headings":"","what":"Better errors on newer Pythons","title":"Errors and Exceptions","text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"tabs-and-spaces","dir":"","previous_headings":"","what":"Tabs and Spaces","title":"Errors and Exceptions","text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"identifying-syntax-errors","dir":"","previous_headings":"","what":"Identifying Syntax Errors","title":"Errors and Exceptions","text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"identifying-variable-name-errors","dir":"","previous_headings":"","what":"Identifying Variable Name Errors","title":"Errors and Exceptions","text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"identifying-index-errors","dir":"","previous_headings":"","what":"Identifying Index Errors","title":"Errors and Exceptions","text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Errors and Exceptions","text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":"pre--and-post-conditions","dir":"","previous_headings":"","what":"Pre- and Post-Conditions","title":"Defensive Programming","text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":"testing-assertions","dir":"","previous_headings":"","what":"Testing Assertions","title":"Defensive Programming","text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Defensive Programming","text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"version-control-revisited","dir":"","previous_headings":"","what":"Version Control Revisited","title":"Debugging","text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"debug-with-a-neighbor","dir":"","previous_headings":"","what":"Debug With a Neighbor","title":"Debugging","text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"not-supposed-to-be-the-same","dir":"","previous_headings":"","what":"Not Supposed to be the Same","title":"Debugging","text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"suggestions-for-debugging","dir":"","previous_headings":"","what":"Suggestions for debugging","title":"Debugging","text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"bugs-found","dir":"","previous_headings":"","what":"Bugs found","title":"Debugging","text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Debugging","text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"switching-to-shell-commands","dir":"","previous_headings":"","what":"Switching to Shell Commands","title":"Command-Line Programs","text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"running-versus-importing","dir":"","previous_headings":"","what":"Running Versus Importing","title":"Command-Line Programs","text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"the-right-way-to-do-it","dir":"","previous_headings":"","what":"The Right Way to Do It","title":"Command-Line Programs","text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"the-right-way-to-do-it-1","dir":"","previous_headings":"","what":"The Right Way to Do It","title":"Command-Line Programs","text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"arithmetic-on-the-command-line","dir":"","previous_headings":"","what":"Arithmetic on the Command Line","title":"Command-Line Programs","text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"finding-particular-files","dir":"","previous_headings":"","what":"Finding Particular Files","title":"Command-Line Programs","text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"changing-flags","dir":"","previous_headings":"","what":"Changing Flags","title":"Command-Line Programs","text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"adding-a-help-message","dir":"","previous_headings":"","what":"Adding a Help Message","title":"Command-Line Programs","text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"adding-a-default-action","dir":"","previous_headings":"","what":"Adding a Default Action","title":"Command-Line Programs","text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"a-file-checker","dir":"","previous_headings":"","what":"A File-Checker","title":"Command-Line Programs","text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"counting-lines","dir":"","previous_headings":"","what":"Counting Lines","title":"Command-Line Programs","text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"generate-an-error-message","dir":"","previous_headings":"","what":"Generate an Error Message","title":"Command-Line Programs","text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"Command-Line Programs","text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"variables-as-sticky-notes","dir":"","previous_headings":"","what":"Variables as Sticky Notes","title":"All in One View","text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"check-your-understanding","dir":"","previous_headings":"","what":"Check Your Understanding","title":"All in One View","text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"sorting-out-references","dir":"","previous_headings":"","what":"Sorting Out References","title":"All in One View","text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"seeing-data-types","dir":"","previous_headings":"","what":"Seeing Data Types","title":"All in One View","text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"data-type","dir":"","previous_headings":"","what":"Data Type","title":"All in One View","text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"in-the-corner","dir":"","previous_headings":"","what":"In the Corner","title":"All in One View","text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"not-all-functions-have-input","dir":"","previous_headings":"","what":"Not All Functions Have Input","title":"All in One View","text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"mystery-functions-in-ipython","dir":"","previous_headings":"","what":"Mystery Functions in IPython","title":"All in One View","text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"confusing-function-names","dir":"","previous_headings":"","what":"Confusing Function Names","title":"All in One View","text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings","dir":"","previous_headings":"","what":"Slicing Strings","title":"All in One View","text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings-1","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":"All in One View","text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings-2","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":"All in One View","text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings-3","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":"All in One View","text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"thin-slices","dir":"","previous_headings":"","what":"Thin Slices","title":"All in One View","text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"stacking-arrays","dir":"","previous_headings":"","what":"Stacking Arrays","title":"All in One View","text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"change-in-inflammation","dir":"","previous_headings":"","what":"Change In Inflammation","title":"All in One View","text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"change-in-inflammation-1","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":"All in One View","text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"change-in-inflammation-2","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":"All in One View","text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"episode-prerequisites","dir":"","previous_headings":"","what":"Episode Prerequisites","title":"All in One View","text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"grouping-plots","dir":"","previous_headings":"","what":"Grouping plots","title":"All in One View","text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"importing-libraries-with-shortcuts","dir":"","previous_headings":"","what":"Importing libraries with shortcuts","title":"All in One View","text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"plot-scaling","dir":"","previous_headings":"","what":"Plot Scaling","title":"All in One View","text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"plot-scaling-1","dir":"","previous_headings":"","what":"Plot Scaling (continued)","title":"All in One View","text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"drawing-straight-lines","dir":"","previous_headings":"","what":"Drawing Straight Lines","title":"All in One View","text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"make-your-own-plot","dir":"","previous_headings":"","what":"Make Your Own Plot","title":"All in One View","text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"moving-plots-around","dir":"","previous_headings":"","what":"Moving Plots Around","title":"All in One View","text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"ch-ch-ch-ch-changes","dir":"","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":"All in One View","text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"nested-lists","dir":"","previous_headings":"","what":"Nested Lists","title":"All in One View","text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"heterogeneous-lists","dir":"","previous_headings":"","what":"Heterogeneous Lists","title":"All in One View","text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-from-the-end","dir":"","previous_headings":"","what":"Slicing From the End","title":"All in One View","text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"non-continuous-slices","dir":"","previous_headings":"","what":"Non-Continuous Slices","title":"All in One View","text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"overloading","dir":"","previous_headings":"","what":"Overloading","title":"All in One View","text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s in a name?","title":"All in One View","text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"from-1-to-n","dir":"","previous_headings":"","what":"From 1 to N","title":"All in One View","text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"understanding-the-loops","dir":"","previous_headings":"","what":"Understanding the loops","title":"All in One View","text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"computing-powers-with-loops","dir":"","previous_headings":"","what":"Computing Powers With Loops","title":"All in One View","text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"summing-a-list","dir":"","previous_headings":"","what":"Summing a list","title":"All in One View","text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"computing-the-value-of-a-polynomial","dir":"","previous_headings":"","what":"Computing the Value of a Polynomial","title":"All in One View","text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"plotting-differences","dir":"","previous_headings":"","what":"Plotting Differences","title":"All in One View","text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"generate-composite-statistics","dir":"","previous_headings":"","what":"Generate Composite Statistics","title":"All in One View","text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"comparing-in-python","dir":"","previous_headings":"","what":"Comparing in Python","title":"All in One View","text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"true-and-false","dir":"","previous_headings":"","what":"True and False","title":"All in One View","text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"how-many-paths","dir":"","previous_headings":"","what":"How Many Paths?","title":"All in One View","text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"what-is-truth","dir":"","previous_headings":"","what":"What Is Truth?","title":"All in One View","text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"thats-not-not-what-i-meant","dir":"","previous_headings":"","what":"That’s Not Not What I Meant","title":"All in One View","text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"close-enough","dir":"","previous_headings":"","what":"Close Enough","title":"All in One View","text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"in-place-operators","dir":"","previous_headings":"","what":"In-Place Operators","title":"All in One View","text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"sorting-a-list-into-buckets","dir":"","previous_headings":"","what":"Sorting a List Into Buckets","title":"All in One View","text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"counting-vowels","dir":"","previous_headings":"","what":"Counting Vowels","title":"All in One View","text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"combining-strings","dir":"","previous_headings":"","what":"Combining Strings","title":"All in One View","text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"return-versus-print","dir":"","previous_headings":"","what":"Return versus print","title":"All in One View","text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"selecting-characters-from-strings","dir":"","previous_headings":"","what":"Selecting Characters From Strings","title":"All in One View","text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"rescaling-an-array","dir":"","previous_headings":"","what":"Rescaling an Array","title":"All in One View","text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"testing-and-documenting-your-function","dir":"","previous_headings":"","what":"Testing and Documenting Your Function","title":"All in One View","text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"defining-defaults-1","dir":"","previous_headings":"","what":"Defining Defaults","title":"All in One View","text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"variables-inside-and-outside-functions","dir":"","previous_headings":"","what":"Variables Inside and Outside Functions","title":"All in One View","text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"mixing-default-and-non-default-parameters","dir":"","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":"All in One View","text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"readable-code","dir":"","previous_headings":"","what":"Readable Code","title":"All in One View","text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"long-tracebacks","dir":"","previous_headings":"","what":"Long Tracebacks","title":"All in One View","text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"reading-error-messages","dir":"","previous_headings":"","what":"Reading Error Messages","title":"All in One View","text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17  ---> 18 print_sunday_message()      19   <ipython-input-7-3ad455d81842> in print_sunday_message()      14       15 def print_sunday_message(): ---> 16     print_message(7)      17       18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14       15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"better-errors-on-newer-pythons","dir":"","previous_headings":"","what":"Better errors on newer Pythons","title":"All in One View","text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"tabs-and-spaces","dir":"","previous_headings":"","what":"Tabs and Spaces","title":"All in One View","text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"identifying-syntax-errors","dir":"","previous_headings":"","what":"Identifying Syntax Errors","title":"All in One View","text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"identifying-variable-name-errors","dir":"","previous_headings":"","what":"Identifying Variable Name Errors","title":"All in One View","text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"identifying-index-errors","dir":"","previous_headings":"","what":"Identifying Index Errors","title":"All in One View","text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"pre--and-post-conditions","dir":"","previous_headings":"","what":"Pre- and Post-Conditions","title":"All in One View","text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"testing-assertions","dir":"","previous_headings":"","what":"Testing Assertions","title":"All in One View","text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"version-control-revisited","dir":"","previous_headings":"","what":"Version Control Revisited","title":"All in One View","text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"debug-with-a-neighbor","dir":"","previous_headings":"","what":"Debug With a Neighbor","title":"All in One View","text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"not-supposed-to-be-the-same","dir":"","previous_headings":"","what":"Not Supposed to be the Same","title":"All in One View","text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"suggestions-for-debugging","dir":"","previous_headings":"","what":"Suggestions for debugging","title":"All in One View","text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"bugs-found","dir":"","previous_headings":"","what":"Bugs found","title":"All in One View","text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"switching-to-shell-commands","dir":"","previous_headings":"","what":"Switching to Shell Commands","title":"All in One View","text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"running-versus-importing","dir":"","previous_headings":"","what":"Running Versus Importing","title":"All in One View","text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"the-right-way-to-do-it","dir":"","previous_headings":"","what":"The Right Way to Do It","title":"All in One View","text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"the-right-way-to-do-it-1","dir":"","previous_headings":"","what":"The Right Way to Do It","title":"All in One View","text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"arithmetic-on-the-command-line","dir":"","previous_headings":"","what":"Arithmetic on the Command Line","title":"All in One View","text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"finding-particular-files","dir":"","previous_headings":"","what":"Finding Particular Files","title":"All in One View","text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"changing-flags","dir":"","previous_headings":"","what":"Changing Flags","title":"All in One View","text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"adding-a-help-message","dir":"","previous_headings":"","what":"Adding a Help Message","title":"All in One View","text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"adding-a-default-action","dir":"","previous_headings":"","what":"Adding a Default Action","title":"All in One View","text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"a-file-checker","dir":"","previous_headings":"","what":"A File-Checker","title":"All in One View","text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"counting-lines","dir":"","previous_headings":"","what":"Counting Lines","title":"All in One View","text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"generate-an-error-message","dir":"","previous_headings":"","what":"Generate an Error Message","title":"All in One View","text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":"All in One View","text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"following-the-call-stack","dir":"","previous_headings":"","what":"Following the Call Stack","title":"Discussion","text":"previously wrote functions called fence outer. Draw diagram showing call stack changes run following:","code":"print(outer(fence('carbon', '+')))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"making-a-colorbar","dir":"","previous_headings":"","what":"Making a Colorbar","title":"Discussion","text":"Fill ____ code create bar changes color dark blue black.","code":"bar = ImageGrid(10, 1) for x in range(10):     bar[x, 0] = (0, 0, ____) bar.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"why-rgb","dir":"","previous_headings":"","what":"Why RGB?","title":"Discussion","text":"computers use red, green, blue primary colors?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"nested-loops","dir":"","previous_headings":"","what":"Nested Loops","title":"Discussion","text":"changing nesting loops code — .e., wrapping Y-axis loop around X-axis loop — change final image? ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"where-to-change-data","dir":"","previous_headings":"","what":"Where to Change Data","title":"Discussion","text":"transpose data outside heat map function? function perform transpose?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"return-versus-display","dir":"","previous_headings":"","what":"Return Versus Display","title":"Discussion","text":"heat map function return grid rather displaying immediately? think good bad design choice?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"swapping-the-contents-of-variables-5-min","dir":"","previous_headings":"","what":"Swapping the contents of variables (5 min)","title":"Additional Exercises","text":"Explain overall effect code : Compare : always thing? find easier read?","code":"left = 'L' right = 'R'  temp = left left = right right = temp left, right = right, left"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"turn-a-string-into-a-list","dir":"","previous_headings":"","what":"Turn a String into a List","title":"Additional Exercises","text":"Use -loop convert string “hello” list letters: Hint: can create empty list like :","code":"[\"h\", \"e\", \"l\", \"l\", \"o\"] my_list = []"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"reverse-a-string","dir":"","previous_headings":"","what":"Reverse a String","title":"Additional Exercises","text":"Knowing two strings can concatenated using + operator, write loop takes string produces new string characters reverse order, 'Newton' becomes 'notweN'.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"fixing-and-testing","dir":"","previous_headings":"","what":"Fixing and Testing","title":"Additional Exercises","text":": “Defensive Programming” Fix range_overlap. Re-run test_range_overlap change make.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"scenario-a-miracle-arthritis-inflammation-cure","dir":"","previous_headings":"","what":"Scenario: A Miracle Arthritis Inflammation Cure","title":"Summary and Setup","text":"imaginary colleague “Dr. Maverick” invented new miracle drug promises cure arthritis inflammation flare-ups 3 weeks since initially taking medication! Naturally, wish see clinical trial data, months asking data finally provided us CSV spreadsheet containing clinical trial data. CSV file contains number inflammation flare-ups per day 60 patients initial clinical trial, trial lasting 40 days. row corresponds patient, column corresponds day trial. patient first inflammation flare-take medication wait weeks take effect reduce flare-ups. see effective treatment like : Calculate average inflammation per day across patients. Plot result discuss share colleagues.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"data-format","dir":"","previous_headings":"","what":"Data Format","title":"Summary and Setup","text":"data sets stored comma-separated values (CSV) format: row holds information single patient, columns represent successive days. first three rows first file look like : number represents number inflammation bouts particular patient experienced given day. example, value “6” row 3 column 7 data set means third patient experiencing inflammation six times seventh day clinical study. order analyze data report colleagues, ’ll learn little bit programming.","code":"0,0,1,3,1,2,4,7,8,3,3,3,10,5,7,4,7,7,12,18,6,13,11,11,7,7,4,6,8,8,4,4,5,7,3,4,2,3,0,0 0,1,2,1,2,1,3,2,2,6,10,11,5,9,4,4,7,16,8,6,18,4,12,5,12,7,11,5,11,3,3,5,4,4,5,5,1,1,0,1 0,1,1,3,3,2,6,2,5,9,5,7,4,5,4,15,5,11,9,10,19,14,12,17,7,12,11,7,4,2,10,5,4,2,2,3,2,2,1,1"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Summary and Setup","text":"need understand concepts files directories start Python interpreter tackling lesson. lesson sometimes references Jupyter Notebook although can use Python interpreter mentioned Setup. commands lesson pertain officially supported Python version, currently Python 3.8+. Newer versions usually better error printouts, using newer Python versions recommend possible.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Summary and Setup","text":"get started, follow directions Setup page download data install Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"variables-as-sticky-notes","dir":"Instructor","previous_headings":"","what":"Variables as Sticky Notes","title":"Python Fundamentals","text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"check-your-understanding","dir":"Instructor","previous_headings":"","what":"Check Your Understanding","title":"Python Fundamentals","text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"sorting-out-references","dir":"Instructor","previous_headings":"","what":"Sorting Out References","title":"Python Fundamentals","text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"seeing-data-types","dir":"Instructor","previous_headings":"","what":"Seeing Data Types","title":"Python Fundamentals","text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Python Fundamentals","text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"data-type","dir":"Instructor","previous_headings":"","what":"Data Type","title":"Analyzing Patient Data","text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"in-the-corner","dir":"Instructor","previous_headings":"","what":"In the Corner","title":"Analyzing Patient Data","text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"not-all-functions-have-input","dir":"Instructor","previous_headings":"","what":"Not All Functions Have Input","title":"Analyzing Patient Data","text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"mystery-functions-in-ipython","dir":"Instructor","previous_headings":"","what":"Mystery Functions in IPython","title":"Analyzing Patient Data","text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"confusing-function-names","dir":"Instructor","previous_headings":"","what":"Confusing Function Names","title":"Analyzing Patient Data","text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings","dir":"Instructor","previous_headings":"","what":"Slicing Strings","title":"Analyzing Patient Data","text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings-1","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":"Analyzing Patient Data","text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings-2","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":"Analyzing Patient Data","text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings-3","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":"Analyzing Patient Data","text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"thin-slices","dir":"Instructor","previous_headings":"","what":"Thin Slices","title":"Analyzing Patient Data","text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"stacking-arrays","dir":"Instructor","previous_headings":"","what":"Stacking Arrays","title":"Analyzing Patient Data","text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"change-in-inflammation","dir":"Instructor","previous_headings":"","what":"Change In Inflammation","title":"Analyzing Patient Data","text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"change-in-inflammation-1","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":"Analyzing Patient Data","text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"change-in-inflammation-2","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":"Analyzing Patient Data","text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Analyzing Patient Data","text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"episode-prerequisites","dir":"Instructor","previous_headings":"","what":"Episode Prerequisites","title":"Visualizing Tabular Data","text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"grouping-plots","dir":"Instructor","previous_headings":"","what":"Grouping plots","title":"Visualizing Tabular Data","text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"importing-libraries-with-shortcuts","dir":"Instructor","previous_headings":"","what":"Importing libraries with shortcuts","title":"Visualizing Tabular Data","text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"plot-scaling","dir":"Instructor","previous_headings":"","what":"Plot Scaling","title":"Visualizing Tabular Data","text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"plot-scaling-1","dir":"Instructor","previous_headings":"","what":"Plot Scaling (continued)","title":"Visualizing Tabular Data","text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"drawing-straight-lines","dir":"Instructor","previous_headings":"","what":"Drawing Straight Lines","title":"Visualizing Tabular Data","text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"make-your-own-plot","dir":"Instructor","previous_headings":"","what":"Make Your Own Plot","title":"Visualizing Tabular Data","text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"moving-plots-around","dir":"Instructor","previous_headings":"","what":"Moving Plots Around","title":"Visualizing Tabular Data","text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Visualizing Tabular Data","text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"ch-ch-ch-ch-changes","dir":"Instructor","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":"Storing Multiple Values in Lists","text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"nested-lists","dir":"Instructor","previous_headings":"","what":"Nested Lists","title":"Storing Multiple Values in Lists","text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"heterogeneous-lists","dir":"Instructor","previous_headings":"","what":"Heterogeneous Lists","title":"Storing Multiple Values in Lists","text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"slicing-from-the-end","dir":"Instructor","previous_headings":"","what":"Slicing From the End","title":"Storing Multiple Values in Lists","text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"non-continuous-slices","dir":"Instructor","previous_headings":"","what":"Non-Continuous Slices","title":"Storing Multiple Values in Lists","text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"overloading","dir":"Instructor","previous_headings":"","what":"Overloading","title":"Storing Multiple Values in Lists","text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Storing Multiple Values in Lists","text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s in a name?","title":"Repeating Actions with Loops","text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"from-1-to-n","dir":"Instructor","previous_headings":"","what":"From 1 to N","title":"Repeating Actions with Loops","text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"understanding-the-loops","dir":"Instructor","previous_headings":"","what":"Understanding the loops","title":"Repeating Actions with Loops","text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"computing-powers-with-loops","dir":"Instructor","previous_headings":"","what":"Computing Powers With Loops","title":"Repeating Actions with Loops","text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"summing-a-list","dir":"Instructor","previous_headings":"","what":"Summing a list","title":"Repeating Actions with Loops","text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"computing-the-value-of-a-polynomial","dir":"Instructor","previous_headings":"","what":"Computing the Value of a Polynomial","title":"Repeating Actions with Loops","text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Repeating Actions with Loops","text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/06-files.html","id":"plotting-differences","dir":"Instructor","previous_headings":"","what":"Plotting Differences","title":"Analyzing Data from Multiple Files","text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/06-files.html","id":"generate-composite-statistics","dir":"Instructor","previous_headings":"","what":"Generate Composite Statistics","title":"Analyzing Data from Multiple Files","text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/06-files.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Analyzing Data from Multiple Files","text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"comparing-in-python","dir":"Instructor","previous_headings":"","what":"Comparing in Python","title":"Making Choices","text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"true-and-false","dir":"Instructor","previous_headings":"","what":"True and False","title":"Making Choices","text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"how-many-paths","dir":"Instructor","previous_headings":"","what":"How Many Paths?","title":"Making Choices","text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"what-is-truth","dir":"Instructor","previous_headings":"","what":"What Is Truth?","title":"Making Choices","text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"thats-not-not-what-i-meant","dir":"Instructor","previous_headings":"","what":"That’s Not Not What I Meant","title":"Making Choices","text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"close-enough","dir":"Instructor","previous_headings":"","what":"Close Enough","title":"Making Choices","text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"in-place-operators","dir":"Instructor","previous_headings":"","what":"In-Place Operators","title":"Making Choices","text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"sorting-a-list-into-buckets","dir":"Instructor","previous_headings":"","what":"Sorting a List Into Buckets","title":"Making Choices","text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"counting-vowels","dir":"Instructor","previous_headings":"","what":"Counting Vowels","title":"Making Choices","text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Making Choices","text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"combining-strings","dir":"Instructor","previous_headings":"","what":"Combining Strings","title":"Creating Functions","text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"return-versus-print","dir":"Instructor","previous_headings":"","what":"Return versus print","title":"Creating Functions","text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"selecting-characters-from-strings","dir":"Instructor","previous_headings":"","what":"Selecting Characters From Strings","title":"Creating Functions","text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"rescaling-an-array","dir":"Instructor","previous_headings":"","what":"Rescaling an Array","title":"Creating Functions","text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"testing-and-documenting-your-function","dir":"Instructor","previous_headings":"","what":"Testing and Documenting Your Function","title":"Creating Functions","text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"defining-defaults-1","dir":"Instructor","previous_headings":"","what":"Defining Defaults","title":"Creating Functions","text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"variables-inside-and-outside-functions","dir":"Instructor","previous_headings":"","what":"Variables Inside and Outside Functions","title":"Creating Functions","text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"mixing-default-and-non-default-parameters","dir":"Instructor","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":"Creating Functions","text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"readable-code","dir":"Instructor","previous_headings":"","what":"Readable Code","title":"Creating Functions","text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Creating Functions","text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"long-tracebacks","dir":"Instructor","previous_headings":"","what":"Long Tracebacks","title":"Errors and Exceptions","text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"reading-error-messages","dir":"Instructor","previous_headings":"","what":"Reading Error Messages","title":"Errors and Exceptions","text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17  ---> 18 print_sunday_message()      19   <ipython-input-7-3ad455d81842> in print_sunday_message()      14       15 def print_sunday_message(): ---> 16     print_message(7)      17       18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14       15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"better-errors-on-newer-pythons","dir":"Instructor","previous_headings":"","what":"Better errors on newer Pythons","title":"Errors and Exceptions","text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"tabs-and-spaces","dir":"Instructor","previous_headings":"","what":"Tabs and Spaces","title":"Errors and Exceptions","text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"identifying-syntax-errors","dir":"Instructor","previous_headings":"","what":"Identifying Syntax Errors","title":"Errors and Exceptions","text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"identifying-variable-name-errors","dir":"Instructor","previous_headings":"","what":"Identifying Variable Name Errors","title":"Errors and Exceptions","text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"identifying-index-errors","dir":"Instructor","previous_headings":"","what":"Identifying Index Errors","title":"Errors and Exceptions","text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Errors and Exceptions","text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":"pre--and-post-conditions","dir":"Instructor","previous_headings":"","what":"Pre- and Post-Conditions","title":"Defensive Programming","text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":"testing-assertions","dir":"Instructor","previous_headings":"","what":"Testing Assertions","title":"Defensive Programming","text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Defensive Programming","text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"version-control-revisited","dir":"Instructor","previous_headings":"","what":"Version Control Revisited","title":"Debugging","text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"debug-with-a-neighbor","dir":"Instructor","previous_headings":"","what":"Debug With a Neighbor","title":"Debugging","text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"not-supposed-to-be-the-same","dir":"Instructor","previous_headings":"","what":"Not Supposed to be the Same","title":"Debugging","text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"suggestions-for-debugging","dir":"Instructor","previous_headings":"","what":"Suggestions for debugging","title":"Debugging","text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"bugs-found","dir":"Instructor","previous_headings":"","what":"Bugs found","title":"Debugging","text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Debugging","text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"switching-to-shell-commands","dir":"Instructor","previous_headings":"","what":"Switching to Shell Commands","title":"Command-Line Programs","text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"running-versus-importing","dir":"Instructor","previous_headings":"","what":"Running Versus Importing","title":"Command-Line Programs","text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"the-right-way-to-do-it","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":"Command-Line Programs","text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"the-right-way-to-do-it-1","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":"Command-Line Programs","text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"arithmetic-on-the-command-line","dir":"Instructor","previous_headings":"","what":"Arithmetic on the Command Line","title":"Command-Line Programs","text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"finding-particular-files","dir":"Instructor","previous_headings":"","what":"Finding Particular Files","title":"Command-Line Programs","text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"changing-flags","dir":"Instructor","previous_headings":"","what":"Changing Flags","title":"Command-Line Programs","text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"adding-a-help-message","dir":"Instructor","previous_headings":"","what":"Adding a Help Message","title":"Command-Line Programs","text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"adding-a-default-action","dir":"Instructor","previous_headings":"","what":"Adding a Default Action","title":"Command-Line Programs","text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"a-file-checker","dir":"Instructor","previous_headings":"","what":"A File-Checker","title":"Command-Line Programs","text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"counting-lines","dir":"Instructor","previous_headings":"","what":"Counting Lines","title":"Command-Line Programs","text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"generate-an-error-message","dir":"Instructor","previous_headings":"","what":"Generate an Error Message","title":"Command-Line Programs","text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"Command-Line Programs","text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"variables-as-sticky-notes","dir":"Instructor","previous_headings":"","what":"Variables as Sticky Notes","title":"All in One View","text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"check-your-understanding","dir":"Instructor","previous_headings":"","what":"Check Your Understanding","title":"All in One View","text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"sorting-out-references","dir":"Instructor","previous_headings":"","what":"Sorting Out References","title":"All in One View","text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"seeing-data-types","dir":"Instructor","previous_headings":"","what":"Seeing Data Types","title":"All in One View","text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"data-type","dir":"Instructor","previous_headings":"","what":"Data Type","title":"All in One View","text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"in-the-corner","dir":"Instructor","previous_headings":"","what":"In the Corner","title":"All in One View","text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"not-all-functions-have-input","dir":"Instructor","previous_headings":"","what":"Not All Functions Have Input","title":"All in One View","text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"mystery-functions-in-ipython","dir":"Instructor","previous_headings":"","what":"Mystery Functions in IPython","title":"All in One View","text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"confusing-function-names","dir":"Instructor","previous_headings":"","what":"Confusing Function Names","title":"All in One View","text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings","dir":"Instructor","previous_headings":"","what":"Slicing Strings","title":"All in One View","text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings-1","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":"All in One View","text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings-2","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":"All in One View","text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings-3","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":"All in One View","text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"thin-slices","dir":"Instructor","previous_headings":"","what":"Thin Slices","title":"All in One View","text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"stacking-arrays","dir":"Instructor","previous_headings":"","what":"Stacking Arrays","title":"All in One View","text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"change-in-inflammation","dir":"Instructor","previous_headings":"","what":"Change In Inflammation","title":"All in One View","text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"change-in-inflammation-1","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":"All in One View","text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"change-in-inflammation-2","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":"All in One View","text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"episode-prerequisites","dir":"Instructor","previous_headings":"","what":"Episode Prerequisites","title":"All in One View","text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"grouping-plots","dir":"Instructor","previous_headings":"","what":"Grouping plots","title":"All in One View","text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"importing-libraries-with-shortcuts","dir":"Instructor","previous_headings":"","what":"Importing libraries with shortcuts","title":"All in One View","text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"plot-scaling","dir":"Instructor","previous_headings":"","what":"Plot Scaling","title":"All in One View","text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"plot-scaling-1","dir":"Instructor","previous_headings":"","what":"Plot Scaling (continued)","title":"All in One View","text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"drawing-straight-lines","dir":"Instructor","previous_headings":"","what":"Drawing Straight Lines","title":"All in One View","text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"make-your-own-plot","dir":"Instructor","previous_headings":"","what":"Make Your Own Plot","title":"All in One View","text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"moving-plots-around","dir":"Instructor","previous_headings":"","what":"Moving Plots Around","title":"All in One View","text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"ch-ch-ch-ch-changes","dir":"Instructor","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":"All in One View","text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"nested-lists","dir":"Instructor","previous_headings":"","what":"Nested Lists","title":"All in One View","text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"heterogeneous-lists","dir":"Instructor","previous_headings":"","what":"Heterogeneous Lists","title":"All in One View","text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-from-the-end","dir":"Instructor","previous_headings":"","what":"Slicing From the End","title":"All in One View","text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"non-continuous-slices","dir":"Instructor","previous_headings":"","what":"Non-Continuous Slices","title":"All in One View","text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"overloading","dir":"Instructor","previous_headings":"","what":"Overloading","title":"All in One View","text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s in a name?","title":"All in One View","text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"from-1-to-n","dir":"Instructor","previous_headings":"","what":"From 1 to N","title":"All in One View","text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"understanding-the-loops","dir":"Instructor","previous_headings":"","what":"Understanding the loops","title":"All in One View","text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"computing-powers-with-loops","dir":"Instructor","previous_headings":"","what":"Computing Powers With Loops","title":"All in One View","text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"summing-a-list","dir":"Instructor","previous_headings":"","what":"Summing a list","title":"All in One View","text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"computing-the-value-of-a-polynomial","dir":"Instructor","previous_headings":"","what":"Computing the Value of a Polynomial","title":"All in One View","text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"plotting-differences","dir":"Instructor","previous_headings":"","what":"Plotting Differences","title":"All in One View","text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"generate-composite-statistics","dir":"Instructor","previous_headings":"","what":"Generate Composite Statistics","title":"All in One View","text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"comparing-in-python","dir":"Instructor","previous_headings":"","what":"Comparing in Python","title":"All in One View","text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"true-and-false","dir":"Instructor","previous_headings":"","what":"True and False","title":"All in One View","text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"how-many-paths","dir":"Instructor","previous_headings":"","what":"How Many Paths?","title":"All in One View","text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"what-is-truth","dir":"Instructor","previous_headings":"","what":"What Is Truth?","title":"All in One View","text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"thats-not-not-what-i-meant","dir":"Instructor","previous_headings":"","what":"That’s Not Not What I Meant","title":"All in One View","text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"close-enough","dir":"Instructor","previous_headings":"","what":"Close Enough","title":"All in One View","text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"in-place-operators","dir":"Instructor","previous_headings":"","what":"In-Place Operators","title":"All in One View","text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"sorting-a-list-into-buckets","dir":"Instructor","previous_headings":"","what":"Sorting a List Into Buckets","title":"All in One View","text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"counting-vowels","dir":"Instructor","previous_headings":"","what":"Counting Vowels","title":"All in One View","text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"combining-strings","dir":"Instructor","previous_headings":"","what":"Combining Strings","title":"All in One View","text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"return-versus-print","dir":"Instructor","previous_headings":"","what":"Return versus print","title":"All in One View","text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"selecting-characters-from-strings","dir":"Instructor","previous_headings":"","what":"Selecting Characters From Strings","title":"All in One View","text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"rescaling-an-array","dir":"Instructor","previous_headings":"","what":"Rescaling an Array","title":"All in One View","text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"testing-and-documenting-your-function","dir":"Instructor","previous_headings":"","what":"Testing and Documenting Your Function","title":"All in One View","text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"defining-defaults-1","dir":"Instructor","previous_headings":"","what":"Defining Defaults","title":"All in One View","text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"variables-inside-and-outside-functions","dir":"Instructor","previous_headings":"","what":"Variables Inside and Outside Functions","title":"All in One View","text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"mixing-default-and-non-default-parameters","dir":"Instructor","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":"All in One View","text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"readable-code","dir":"Instructor","previous_headings":"","what":"Readable Code","title":"All in One View","text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"long-tracebacks","dir":"Instructor","previous_headings":"","what":"Long Tracebacks","title":"All in One View","text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"reading-error-messages","dir":"Instructor","previous_headings":"","what":"Reading Error Messages","title":"All in One View","text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17  ---> 18 print_sunday_message()      19   <ipython-input-7-3ad455d81842> in print_sunday_message()      14       15 def print_sunday_message(): ---> 16     print_message(7)      17       18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14       15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"better-errors-on-newer-pythons","dir":"Instructor","previous_headings":"","what":"Better errors on newer Pythons","title":"All in One View","text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"tabs-and-spaces","dir":"Instructor","previous_headings":"","what":"Tabs and Spaces","title":"All in One View","text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"identifying-syntax-errors","dir":"Instructor","previous_headings":"","what":"Identifying Syntax Errors","title":"All in One View","text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"identifying-variable-name-errors","dir":"Instructor","previous_headings":"","what":"Identifying Variable Name Errors","title":"All in One View","text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"identifying-index-errors","dir":"Instructor","previous_headings":"","what":"Identifying Index Errors","title":"All in One View","text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"pre--and-post-conditions","dir":"Instructor","previous_headings":"","what":"Pre- and Post-Conditions","title":"All in One View","text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"testing-assertions","dir":"Instructor","previous_headings":"","what":"Testing Assertions","title":"All in One View","text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"version-control-revisited","dir":"Instructor","previous_headings":"","what":"Version Control Revisited","title":"All in One View","text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"debug-with-a-neighbor","dir":"Instructor","previous_headings":"","what":"Debug With a Neighbor","title":"All in One View","text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"not-supposed-to-be-the-same","dir":"Instructor","previous_headings":"","what":"Not Supposed to be the Same","title":"All in One View","text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"suggestions-for-debugging","dir":"Instructor","previous_headings":"","what":"Suggestions for debugging","title":"All in One View","text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"bugs-found","dir":"Instructor","previous_headings":"","what":"Bugs found","title":"All in One View","text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"switching-to-shell-commands","dir":"Instructor","previous_headings":"","what":"Switching to Shell Commands","title":"All in One View","text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"running-versus-importing","dir":"Instructor","previous_headings":"","what":"Running Versus Importing","title":"All in One View","text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"the-right-way-to-do-it","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":"All in One View","text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"the-right-way-to-do-it-1","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":"All in One View","text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"arithmetic-on-the-command-line","dir":"Instructor","previous_headings":"","what":"Arithmetic on the Command Line","title":"All in One View","text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"finding-particular-files","dir":"Instructor","previous_headings":"","what":"Finding Particular Files","title":"All in One View","text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"changing-flags","dir":"Instructor","previous_headings":"","what":"Changing Flags","title":"All in One View","text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"adding-a-help-message","dir":"Instructor","previous_headings":"","what":"Adding a Help Message","title":"All in One View","text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"adding-a-default-action","dir":"Instructor","previous_headings":"","what":"Adding a Default Action","title":"All in One View","text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"a-file-checker","dir":"Instructor","previous_headings":"","what":"A File-Checker","title":"All in One View","text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"counting-lines","dir":"Instructor","previous_headings":"","what":"Counting Lines","title":"All in One View","text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"generate-an-error-message","dir":"Instructor","previous_headings":"","what":"Generate an Error Message","title":"All in One View","text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":"All in One View","text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"following-the-call-stack","dir":"Instructor","previous_headings":"","what":"Following the Call Stack","title":"Discussion","text":"previously wrote functions called fence outer. Draw diagram showing call stack changes run following:","code":"print(outer(fence('carbon', '+')))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"making-a-colorbar","dir":"Instructor","previous_headings":"","what":"Making a Colorbar","title":"Discussion","text":"Fill ____ code create bar changes color dark blue black.","code":"bar = ImageGrid(10, 1) for x in range(10):     bar[x, 0] = (0, 0, ____) bar.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"why-rgb","dir":"Instructor","previous_headings":"","what":"Why RGB?","title":"Discussion","text":"computers use red, green, blue primary colors?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"nested-loops","dir":"Instructor","previous_headings":"","what":"Nested Loops","title":"Discussion","text":"changing nesting loops code — .e., wrapping Y-axis loop around X-axis loop — change final image? ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"where-to-change-data","dir":"Instructor","previous_headings":"","what":"Where to Change Data","title":"Discussion","text":"transpose data outside heat map function? function perform transpose?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"return-versus-display","dir":"Instructor","previous_headings":"","what":"Return Versus Display","title":"Discussion","text":"heat map function return grid rather displaying immediately? think good bad design choice?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"swapping-the-contents-of-variables-5-min","dir":"Instructor","previous_headings":"","what":"Swapping the contents of variables (5 min)","title":"Additional Exercises","text":"Explain overall effect code : Compare : always thing? find easier read?","code":"left = 'L' right = 'R'  temp = left left = right right = temp left, right = right, left"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"turn-a-string-into-a-list","dir":"Instructor","previous_headings":"","what":"Turn a String into a List","title":"Additional Exercises","text":"Use -loop convert string “hello” list letters: Hint: can create empty list like :","code":"[\"h\", \"e\", \"l\", \"l\", \"o\"] my_list = []"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"reverse-a-string","dir":"Instructor","previous_headings":"","what":"Reverse a String","title":"Additional Exercises","text":"Knowing two strings can concatenated using + operator, write loop takes string produces new string characters reverse order, 'Newton' becomes 'notweN'.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"fixing-and-testing","dir":"Instructor","previous_headings":"","what":"Fixing and Testing","title":"Additional Exercises","text":": “Defensive Programming” Fix range_overlap. Re-run test_range_overlap change make.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"scenario-a-miracle-arthritis-inflammation-cure","dir":"Instructor","previous_headings":"","what":"Scenario: A Miracle Arthritis Inflammation Cure","title":"Summary and Schedule","text":"imaginary colleague “Dr. Maverick” invented new miracle drug promises cure arthritis inflammation flare-ups 3 weeks since initially taking medication! Naturally, wish see clinical trial data, months asking data finally provided us CSV spreadsheet containing clinical trial data. CSV file contains number inflammation flare-ups per day 60 patients initial clinical trial, trial lasting 40 days. row corresponds patient, column corresponds day trial. patient first inflammation flare-take medication wait weeks take effect reduce flare-ups. see effective treatment like : Calculate average inflammation per day across patients. Plot result discuss share colleagues.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"data-format","dir":"Instructor","previous_headings":"","what":"Data Format","title":"Summary and Schedule","text":"data sets stored comma-separated values (CSV) format: row holds information single patient, columns represent successive days. first three rows first file look like : number represents number inflammation bouts particular patient experienced given day. example, value “6” row 3 column 7 data set means third patient experiencing inflammation six times seventh day clinical study. order analyze data report colleagues, ’ll learn little bit programming.","code":"0,0,1,3,1,2,4,7,8,3,3,3,10,5,7,4,7,7,12,18,6,13,11,11,7,7,4,6,8,8,4,4,5,7,3,4,2,3,0,0 0,1,2,1,2,1,3,2,2,6,10,11,5,9,4,4,7,16,8,6,18,4,12,5,12,7,11,5,11,3,3,5,4,4,5,5,1,1,0,1 0,1,1,3,3,2,6,2,5,9,5,7,4,5,4,15,5,11,9,10,19,14,12,17,7,12,11,7,4,2,10,5,4,2,2,3,2,2,1,1"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"prerequisites","dir":"Instructor","previous_headings":"","what":"Prerequisites","title":"Summary and Schedule","text":"need understand concepts files directories start Python interpreter tackling lesson. lesson sometimes references Jupyter Notebook although can use Python interpreter mentioned Setup. commands lesson pertain officially supported Python version, currently Python 3.8+. Newer versions usually better error printouts, using newer Python versions recommend possible.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"getting-started","dir":"Instructor","previous_headings":"","what":"Getting Started","title":"Summary and Schedule","text":"get started, follow directions Setup page download data install Python interpreter.","code":""}]

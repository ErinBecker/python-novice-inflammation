[{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Python interpreter can used calculator: great interesting. anything useful data, need assign value variable. Python, can assign value variable, using equals sign =. example, can track weight patient weighs 60 kilograms assigning value 60 variable weight_kg: now , whenever use weight_kg, Python substitute value assigned . layperson’s terms, variable name value. Python, variable names: can include letters, digits, underscores start digit case sensitive. means , example: weight0 valid variable name, whereas 0weight weight Weight different variables","code":"3 + 5 * 4 23 weight_kg = 60"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Python knows various types data. Three common ones : integer numbers floating point numbers, strings. example , variable weight_kg integer value 60. want precisely track weight patient, can use floating point value executing: create string, add single double quotes around text. identify track patient throughout study, can assign person unique identifier storing string:","code":"weight_kg = 60.3 patient_id = '001'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"data stored variable names, can make use calculations. may want store patient’s weight pounds well kilograms: might decide add prefix patient identifier:","code":"weight_lb = 2.2 * weight_kg patient_id = 'inflam_' + patient_id"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"carry common tasks data variables Python, language provides us several built-functions. display information screen, use print function: want make use function, referred calling function, follow name parentheses. parentheses important: leave , function doesn’t actually run! Sometimes include values variables inside parentheses function use. case print, use parentheses tell function value want display. learn functions work create later episodes. can display multiple things using one print call: can also call function inside another function call. example, Python built-function called type tells value’s data type: Moreover, can arithmetic variables right inside print function: command, however, change value weight_kg: change value weight_kg variable, assign weight_kg new value using equals = sign:","code":"print(weight_lb) print(patient_id) 132.66 inflam_001 print(patient_id, 'weight in kilograms:', weight_kg) inflam_001 weight in kilograms: 60.3 print(type(60.3)) print(type(patient_id)) <class 'float'> <class 'str'> print('weight in pounds:', 2.2 * weight_kg) weight in pounds: 132.66 print(weight_kg) 60.3 weight_kg = 65.0 print('weight in kilograms is now:', weight_kg) weight in kilograms is now: 65.0 `mass` holds a value of 47.5, `age` does not exist `mass` still holds a value of 47.5, `age` holds a value of 122 `mass` now has a value of 95.0, `age`'s value is still 122 `mass` still has a value of 95.0, `age` now holds 102 Hopper Grace print(type(planet)) print(type(apples)) print(type(distance)) <class 'str'> <class 'int'> <class 'float'>"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"variables-as-sticky-notes","dir":"","previous_headings":"","what":"Variables as Sticky Notes","title":null,"text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"check-your-understanding","dir":"","previous_headings":"","what":"Check Your Understanding","title":null,"text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"sorting-out-references","dir":"","previous_headings":"","what":"Sorting Out References","title":null,"text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":"seeing-data-types","dir":"","previous_headings":"","what":"Seeing Data Types","title":null,"text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/01-intro.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"begin processing clinical trial inflammation data, need load Python. can using library called NumPy, stands Numerical Python. general, use library want fancy things lots numbers, especially matrices arrays. tell Python ’d like start using NumPy, need import : Importing library like getting piece lab equipment storage locker setting bench. Libraries provide additional functionality basic Python package, much like new piece equipment adds functionality lab space. Just like lab, importing many libraries can sometimes complicate slow programs - import need program. ’ve imported library, can ask library read data file us: expression numpy.loadtxt(...) function call asks Python run function loadtxt belongs numpy library. dot notation Python used object attribute/property specifier invoking method. object.property give object.property value, object_name.method() invoke object_name method. example, John Smith John belongs Smith family. use dot notation write name smith.john, just loadtxt function belongs numpy library. numpy.loadtxt two parameters: name file want read delimiter separates values line. need character strings (strings short), put quotes. Since haven’t told anything else function’s output, notebook displays . case, output data just loaded. default, rows columns shown (... omit elements displaying big arrays). Note , save space displaying NumPy arrays, Python show us trailing zeros, 1.0 becomes 1.. call numpy.loadtxt read file didn’t save data memory. , need assign array variable. similar manner assign single value variable, can also assign array values variable using syntax. Let’s re-run numpy.loadtxt save returned data: statement doesn’t produce output ’ve assigned output variable data. want check data loaded, can print variable’s value: Now data memory, can manipulate . First, let’s ask type thing data refers : output tells us data currently refers N-dimensional array, functionality provided NumPy library. data correspond arthritis patients’ inflammation. rows individual patients, columns daily inflammation measurements. following command, can see array’s shape: output tells us data array variable contains 60 rows 40 columns. created variable data store arthritis data, create array; also created information array, called members attributes. extra information describes data way adjective describes noun. data.shape attribute data describes dimensions data. use dotted notation attributes variables use functions libraries part--whole relationship. want get single number array, must provide index square brackets variable name, just math referring element matrix. inflammation data two dimensions, need use two indices refer one specific value: expression data[29, 19] accesses element row 30, column 20. expression may surprise , data[0, 0] might. Programming languages like Fortran, MATLAB R start counting 1 ’s human beings done thousands years. Languages C family (including C++, Java, Perl, Python) count 0 represents offset first value array (second value offset one index first value). closer way computers represent arrays (interested historical reasons behind counting indices zero, can read Mike Hoye’s blog post). result, M×N array Python, indices go 0 M-1 first axis 0 N-1 second. takes bit getting used , one way remember rule index many steps take start get item want.","code":"import numpy numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(data) [[ 0.  0.  1. ...,  3.  0.  0.]  [ 0.  1.  2. ...,  1.  0.  1.]  [ 0.  1.  1. ...,  2.  1.  1.]  ...,  [ 0.  1.  1. ...,  1.  1.  1.]  [ 0.  0.  0. ...,  0.  2.  0.]  [ 0.  0.  1. ...,  1.  1.  0.]] print(type(data)) <class 'numpy.ndarray'> print(data.shape) (60, 40) print('first value in data:', data[0, 0]) first value in data: 0.0 print('middle value in data:', data[29, 19]) middle value in data: 16.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"data-type","dir":"","previous_headings":"","what":"Data Type","title":null,"text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"in-the-corner","dir":"","previous_headings":"","what":"In the Corner","title":null,"text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"index like [30, 20] selects single element array, can select whole sections well. example, can select first ten days (columns) values first four patients (rows) like : slice 0:4 means, “Start index 0 go , including, index 4”. , ----including takes bit getting used , rule difference upper lower bounds number values slice. don’t start slices 0: also don’t include upper lower bound slice. don’t include lower bound, Python uses 0 default; don’t include upper, slice runs end axis, don’t include either (.e., use ‘:’ ), slice includes everything: example selects rows 0 2 columns 36 end array.","code":"print(data[0:4, 0:10]) [[ 0.  0.  1.  3.  1.  2.  4.  7.  8.  3.]  [ 0.  1.  2.  1.  2.  1.  3.  2.  2.  6.]  [ 0.  1.  1.  3.  3.  2.  6.  2.  5.  9.]  [ 0.  0.  2.  0.  4.  2.  2.  1.  6.  7.]] print(data[5:10, 0:10]) [[ 0.  0.  1.  2.  2.  4.  2.  1.  6.  4.]  [ 0.  0.  2.  2.  4.  2.  2.  5.  5.  8.]  [ 0.  0.  1.  2.  3.  1.  2.  3.  5.  3.]  [ 0.  0.  0.  3.  1.  5.  6.  5.  5.  8.]  [ 0.  1.  1.  2.  1.  3.  5.  3.  5.  8.]] small = data[:3, 36:] print('small is:') print(small) small is: [[ 2.  3.  0.  0.]  [ 1.  1.  0.  1.]  [ 2.  2.  1.  1.]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"NumPy several useful functions take array input perform operations values. want find average inflammation patients days, example, can ask NumPy compute data’s mean value: mean function takes array argument. Let’s use three NumPy functions get descriptive values dataset. ’ll also use multiple assignment, convenient Python feature enable us one line. ’ve assigned return value numpy.amax(data) variable maxval, value numpy.amin(data) minval, . analyzing data, though, often want look variations statistical values, maximum inflammation per patient average inflammation per day. One way create new temporary array data want, ask calculation: don’t actually need store row variable . Instead, can combine selection function call: need maximum inflammation patient days (next diagram left) average day (diagram right)? diagram shows, want perform operation across axis: support functionality, array functions allow us specify axis want work . ask average across axis 0 (rows 2D example), get: quick check, can ask array shape : expression (40,) tells us N×1 vector, average inflammation per day patients. average across axis 1 (columns 2D example), get: average inflammation per patient across days. Creates substring index 1 (including) final index, effectively removing first last letters ‘oxygen’ ‘gotcha’ array indexing singleton dimensions dropped default. means [:, 0] one dimensional array, won’t stack desired. preserve singleton dimensions, index can slice array. example, [:, :1] returns two dimensional array one singleton dimension (.e. column vector). alternative way achieve result use Numpy’s delete function remove second column . ’re sure parameters numpy.delete mean, use help files. Since row axis (0) patients, make sense get difference two arbitrary patients. column axis (1) days, difference change inflammation – meaningful concept. shape (60, 39) one fewer difference columns columns data. using numpy.amax() function apply numpy.diff() function, get largest difference days. inflammation values decrease along axis, difference one element next negative. interested magnitude change direction, numpy.absolute() function provide . Notice difference get largest absolute difference readings.","code":"print(numpy.mean(data)) 6.14875 maxval, minval, stdval = numpy.amax(data), numpy.amin(data), numpy.std(data)  print('maximum inflammation:', maxval) print('minimum inflammation:', minval) print('standard deviation:', stdval) maximum inflammation: 20.0 minimum inflammation: 0.0 standard deviation: 4.61383319712 patient_0 = data[0, :] # 0 on the first axis (rows), everything on the second (columns) print('maximum inflammation for patient 0:', numpy.amax(patient_0)) maximum inflammation for patient 0: 18.0 print('maximum inflammation for patient 2:', numpy.amax(data[2, :])) maximum inflammation for patient 2: 19.0 print(numpy.mean(data, axis=0)) [  0.           0.45         1.11666667   1.75         2.43333333   3.15    3.8          3.88333333   5.23333333   5.51666667   5.95         5.9    8.35         7.73333333   8.36666667   9.5          9.58333333   10.63333333  11.56666667  12.35        13.25        11.96666667   11.03333333  10.16666667  10.           8.66666667   9.15         7.25    7.33333333   6.58333333   6.06666667   5.95         5.11666667   3.6    3.3          3.56666667   2.48333333   1.5          1.13333333    0.56666667] print(numpy.mean(data, axis=0).shape) (40,) print(numpy.mean(data, axis=1)) [ 5.45   5.425  6.1    5.9    5.55   6.225  5.975  6.65   6.625  6.525   6.775  5.8    6.225  5.75   5.225  6.3    6.55   5.7    5.85   6.55   5.775  5.825  6.175  6.1    5.8    6.425  6.05   6.025  6.175  6.55   6.175  6.35   6.725  6.125  7.075  5.725  5.925  6.15   6.075  5.75   5.975  5.725  6.3    5.9    6.75   5.925  7.225  6.15   5.95   6.275  5.7   6.1    6.825  5.975  6.725  5.7    6.25   6.4    7.05   5.9  ] oxyg en oxygen n e element = 'oxygen' print('last three characters:', element[-3:]) element = 'carpentry' print('last three characters:', element[-3:]) element = 'clone' print('last three characters:', element[-3:]) element = 'hi' print('last three characters:', element[-3:]) last three characters: gen last three characters: try last three characters: one last three characters: hi array([], shape=(0, 0), dtype=float64) array([], shape=(0, 40), dtype=float64) D = numpy.hstack((A[:, :1], A[:, -1:])) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] D = numpy.delete(arr=A, obj=1, axis=1) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] numpy.diff(data, axis=1) numpy.amax(numpy.diff(data, axis=1), axis=1) array([  7.,  12.,  11.,  10.,  11.,  13.,  10.,   8.,  10.,  10.,   7.,          7.,  13.,   7.,  10.,  10.,   8.,  10.,   9.,  10.,  13.,   7.,         12.,   9.,  12.,  11.,  10.,  10.,   7.,  10.,  11.,  10.,   8.,         11.,  12.,  10.,   9.,  10.,  13.,  10.,   7.,   7.,  10.,  13.,         12.,   8.,   8.,  10.,  10.,   9.,   8.,  13.,  10.,   7.,  10.,          8.,  12.,  10.,   7.,  12.]) numpy.amax(numpy.absolute(numpy.diff(data, axis=1)), axis=1) array([ 12.,  14.,  11.,  13.,  11.,  13.,  10.,  12.,  10.,  10.,  10.,         12.,  13.,  10.,  11.,  10.,  12.,  13.,   9.,  10.,  13.,   9.,         12.,   9.,  12.,  11.,  10.,  13.,   9.,  13.,  11.,  11.,   8.,         11.,  12.,  13.,   9.,  10.,  13.,  11.,  11.,  13.,  11.,  13.,         13.,  10.,   9.,  10.,  10.,   9.,   9.,  13.,  10.,   9.,  10.,         11.,  13.,  10.,  10.,  12.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"not-all-functions-have-input","dir":"","previous_headings":"","what":"Not All Functions Have Input","title":null,"text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"mystery-functions-in-ipython","dir":"","previous_headings":"","what":"Mystery Functions in IPython","title":null,"text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"confusing-function-names","dir":"","previous_headings":"","what":"Confusing Function Names","title":null,"text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings","dir":"","previous_headings":"","what":"Slicing Strings","title":null,"text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings-1","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings-2","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"slicing-strings-3","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"thin-slices","dir":"","previous_headings":"","what":"Thin Slices","title":null,"text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"stacking-arrays","dir":"","previous_headings":"","what":"Stacking Arrays","title":null,"text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"change-in-inflammation","dir":"","previous_headings":"","what":"Change In Inflammation","title":null,"text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"change-in-inflammation-1","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":"change-in-inflammation-2","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/02-numpy.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"mathematician Richard Hamming said, “purpose computing insight, numbers,” best way develop insight often visualize data. Visualization deserves entire lecture , can explore features Python’s matplotlib library . official plotting library, matplotlib de facto standard. First, import pyplot module matplotlib use two functions create display heat map data: row heat map corresponds patient clinical trial dataset, column corresponds day dataset. Blue pixels heat map represent low values, yellow pixels represent high values. can see, general number inflammation flare-ups patients rises falls 40-day period. far good line knowledge clinical trial Dr. Maverick’s claims: patients take medication inflammation flare-ups begin takes around 3 weeks medication take effect begin reducing flare-ups flare-ups appear drop zero end clinical trial. Now let’s take look average inflammation time: , put average inflammation per day across patients variable ave_inflammation, asked matplotlib.pyplot create display line graph values. result reasonably linear rise fall, line Dr. Maverick’s claim medication takes 3 weeks take effect. good data scientist doesn’t just consider average dataset, let’s look two statistics: maximum value rises falls linearly, minimum seems step function. Neither trend seems particularly likely, either ’s mistake calculations something wrong data. insight difficult reach examining numbers without visualization tools.","code":"import matplotlib.pyplot image = matplotlib.pyplot.imshow(data) matplotlib.pyplot.show() ave_inflammation = numpy.mean(data, axis=0) ave_plot = matplotlib.pyplot.plot(ave_inflammation) matplotlib.pyplot.show() max_plot = matplotlib.pyplot.plot(numpy.amax(data, axis=0)) matplotlib.pyplot.show() min_plot = matplotlib.pyplot.plot(numpy.amin(data, axis=0)) matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"episode-prerequisites","dir":"","previous_headings":"","what":"Episode Prerequisites","title":null,"text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"grouping-plots","dir":"","previous_headings":"","what":"Grouping plots","title":null,"text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"importing-libraries-with-shortcuts","dir":"","previous_headings":"","what":"Importing libraries with shortcuts","title":null,"text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"plot-scaling","dir":"","previous_headings":"","what":"Plot Scaling","title":null,"text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"plot-scaling-1","dir":"","previous_headings":"","what":"Plot Scaling (continued)","title":null,"text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"drawing-straight-lines","dir":"","previous_headings":"","what":"Drawing Straight Lines","title":null,"text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"make-your-own-plot","dir":"","previous_headings":"","what":"Make Your Own Plot","title":null,"text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":"moving-plots-around","dir":"","previous_headings":"","what":"Moving Plots Around","title":null,"text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/03-matplotlib.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Unlike NumPy arrays, lists built language load library use . create list putting values inside square brackets separating values commas: can access elements list using indices – numbered positions elements list. positions numbered starting 0, first element index 0. Yes, can use negative numbers indices Python. , index -1 gives us last element list, -2 second last, . , odds[3] odds[-1] point element . one important difference lists strings: can change values list, change individual characters string. example: works, : . many ways change contents lists besides assigning new values individual elements: modifying place, useful remember Python treats lists slightly counter-intuitive way. saw earlier, modified mild_salsa list item -place, make list, (attempt ) copy modify list, can cause sorts trouble. also applies modifying list using functions: Python stores list memory, can use multiple names refer list. want copy (simple) list, can use list function, modify list mean : Subsets lists strings can accessed specifying ranges values brackets, similar accessed ranges positions NumPy array. commonly referred “slicing” list/string. Use negative indices count elements end container (list string): obtain every character need provide slice step size 2: can also leave beginning end slice take whole string provide step argument go every second element: want take slice beginning sequence, can omit first index range: similarly, can omit ending index range take slice end sequence: multiplication operator * used list replicates elements list concatenates together: ’s equivalent :","code":"odds = [1, 3, 5, 7] print('odds are:', odds) odds are: [1, 3, 5, 7] print('first element:', odds[0]) print('last element:', odds[3]) print('\"-1\" element:', odds[-1]) first element: 1 last element: 7 \"-1\" element: 7 names = ['Curie', 'Darwing', 'Turing']  # typo in Darwin's name print('names is originally:', names) names[1] = 'Darwin'  # correct the name print('final value of names:', names) names is originally: ['Curie', 'Darwing', 'Turing'] final value of names: ['Curie', 'Darwin', 'Turing'] name = 'Darwin' name[0] = 'd' --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-8-220df48aeb2e> in <module>()       1 name = 'Darwin' ----> 2 name[0] = 'd'  TypeError: 'str' object does not support item assignment odds.append(11) print('odds after adding a value:', odds) odds after adding a value: [1, 3, 5, 7, 11] removed_element = odds.pop(0) print('odds after removing the first element:', odds) print('removed_element:', removed_element) odds after removing the first element: [3, 5, 7, 11] removed_element: 1 odds.reverse() print('odds after reversing:', odds) odds after reversing: [11, 7, 5, 3] odds = [3, 5, 7] primes = odds primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7, 2] odds = [3, 5, 7] primes = list(odds) primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7] binomial_name = 'Drosophila melanogaster' group = binomial_name[0:10] print('group:', group)  species = binomial_name[11:23] print('species:', species)  chromosomes = ['X', 'Y', '2', '3', '4'] autosomes = chromosomes[2:5] print('autosomes:', autosomes)  last = chromosomes[-1] print('last:', last) group: Drosophila species: melanogaster autosomes: ['2', '3', '4'] last: 4 string_for_slicing[-4:] list_for_slicing[-4:] beatles[0:35:2] beatles[::2] date = 'Monday 4 January 2016' day = date[0:6] print('Using 0 to begin range:', day) day = date[:6] print('Omitting beginning index:', day) Using 0 to begin range: Monday Omitting beginning index: Monday months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] sond = months[8:12] print('With known last position:', sond) sond = months[8:len(months)] print('Using len() to get last entry:', sond) sond = months[8:] print('Omitting ending index:', sond) With known last position: ['sep', 'oct', 'nov', 'dec'] Using len() to get last entry: ['sep', 'oct', 'nov', 'dec'] Omitting ending index: ['sep', 'oct', 'nov', 'dec'] [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] counts + counts"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"ch-ch-ch-ch-changes","dir":"","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":null,"text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"nested-lists","dir":"","previous_headings":"","what":"Nested Lists","title":null,"text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"heterogeneous-lists","dir":"","previous_headings":"","what":"Heterogeneous Lists","title":null,"text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"slicing-from-the-end","dir":"","previous_headings":"","what":"Slicing From the End","title":null,"text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"non-continuous-slices","dir":"","previous_headings":"","what":"Non-Continuous Slices","title":null,"text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":"overloading","dir":"","previous_headings":"","what":"Overloading","title":null,"text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/04-lists.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s in a name?","title":null,"text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"from-1-to-n","dir":"","previous_headings":"","what":"From 1 to N","title":null,"text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"understanding-the-loops","dir":"","previous_headings":"","what":"Understanding the loops","title":null,"text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"computing-powers-with-loops","dir":"","previous_headings":"","what":"Computing Powers With Loops","title":null,"text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"summing-a-list","dir":"","previous_headings":"","what":"Summing a list","title":null,"text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":"computing-the-value-of-a-polynomial","dir":"","previous_headings":"","what":"Computing the Value of a Polynomial","title":null,"text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/05-loop.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/06-files.html","id":"plotting-differences","dir":"","previous_headings":"","what":"Plotting Differences","title":null,"text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/06-files.html","id":"generate-composite-statistics","dir":"","previous_headings":"","what":"Generate Composite Statistics","title":null,"text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/06-files.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"can ask Python take different actions, depending condition, statement: second line code uses keyword tell Python want make choice. test follows statement true, body (.e., set lines indented underneath ) executed, “greater” printed. test false, body else executed instead, “greater” printed. one ever executed continuing program execution print “done”: Conditional statements don’t include else. isn’t one, Python simply nothing test false: can also chain several tests together using elif, short “else ”. following Python code uses elif print sign number. Note test equality use double equals sign == rather single equals sign = used assign values. can also combine tests using . true parts true: true least one part true:","code":"num = 37 if num > 100:     print('greater') else:     print('not greater') print('done') not greater done num = 53 print('before conditional...') if num > 100:     print(num, 'is greater than 100') print('...after conditional') before conditional... ...after conditional num = -3  if num > 0:     print(num, 'is positive') elif num == 0:     print(num, 'is zero') else:     print(num, 'is negative') -3 is negative if (1 > 0) and (-1 >= 0):     print('both parts are true') else:     print('at least one part is false') at least one part is false if (1 < 0) or (1 >= 0):     print('at least one test is true') at least one test is true"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"comparing-in-python","dir":"","previous_headings":"","what":"Comparing in Python","title":null,"text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"true-and-false","dir":"","previous_headings":"","what":"True and False","title":null,"text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen conditionals work, can use check suspicious features saw inflammation data. use functions provided numpy module . Therefore, ’re working new Python session, make sure load module data : first couple plots, saw maximum daily inflammation exhibits strange behavior raises one unit day. Wouldn’t good idea detect behavior report suspicious? Let’s ! However, instead checking every single day study, let’s merely check maximum inflammation beginning (day 0) middle (day 20) study equal corresponding day numbers. also saw different problem third dataset; minima per day zero (looks like healthy person snuck study). can also check elif condition: neither conditions true, can use else give -clear: Let’s test : way, asked Python something different depending condition data. printed messages cases, also imagine using else catch-messages printed something wrong, freeing us manually examine every plot features ’ve seen . C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met. built-function abs returns absolute value number: works Booleans True False string representations can printed. pass means “don’t anything”. particular case, ’s actually needed, since num == 0 neither sum needs change, illustrates use elif pass.","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Suspicious looking maxima! data = numpy.loadtxt(fname='inflammation-03.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Minima add up to zero! print(abs(-12)) 12 a = 5 b = 5.1  if abs(a - b) <= 0.1 * abs(b):     print('True') else:     print('False') print(abs(a - b) <= 0.1 * abs(b)) positive_sum = 0 negative_sum = 0 test_list = [3, 4, 6, 1, -1, -5, 0, 7, -8] for num in test_list:     if num > 0:         positive_sum += num     elif num == 0:         pass     else:         negative_sum += num print(positive_sum, negative_sum) for filename in filenames:     if filename.startswith('inflammation-'):         large_files.append(filename)     elif filename.startswith('small-'):         small_files.append(filename)     else:         other_files.append(filename)  print('large_files:', large_files) print('small_files:', small_files) print('other_files:', other_files) vowels = 'aeiouAEIOU' sentence = 'Mary had a little lamb.' count = 0 for char in sentence:     if char in vowels:         count += 1  print('The number of vowels in this string is ' + str(count))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"how-many-paths","dir":"","previous_headings":"","what":"How Many Paths?","title":null,"text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"what-is-truth","dir":"","previous_headings":"","what":"What Is Truth?","title":null,"text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"thats-not-not-what-i-meant","dir":"","previous_headings":"","what":"That’s Not Not What I Meant","title":null,"text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"close-enough","dir":"","previous_headings":"","what":"Close Enough","title":null,"text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"in-place-operators","dir":"","previous_headings":"","what":"In-Place Operators","title":null,"text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"sorting-a-list-into-buckets","dir":"","previous_headings":"","what":"Sorting a List Into Buckets","title":null,"text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":"counting-vowels","dir":"","previous_headings":"","what":"Counting Vowels","title":null,"text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/07-cond.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen turn Fahrenheit Celsius, can also write function turn Celsius Kelvin: converting Fahrenheit Kelvin? write formula, don’t need . Instead, can compose two functions already created: first taste larger programs built: define basic operations, combine ever-larger chunks get effect want. Real-life functions usually larger ones shown — typically half dozen dozen lines — shouldn’t ever much longer , next person reads won’t able understand ’s going .","code":"def celsius_to_kelvin(temp_c):     return temp_c + 273.15  print('freezing point of water in Kelvin:', celsius_to_kelvin(0.)) freezing point of water in Kelvin: 273.15 def fahr_to_kelvin(temp_f):     temp_c = fahr_to_celsius(temp_f)     temp_k = celsius_to_kelvin(temp_c)     return temp_k  print('boiling point of water in Kelvin:', fahr_to_kelvin(212.0)) boiling point of water in Kelvin: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"composing temperature conversion functions, created variables inside functions, temp, temp_c, temp_f, temp_k. refer variables local variables longer exist function done executing. try access values outside function, encounter error: want reuse temperature Kelvin calculated fahr_to_kelvin, can store result function call variable: variable temp_kelvin, defined outside function, said global. Inside function, one can read value global variables:","code":"print('Again, temperature in Kelvin was:', temp_k) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-1-eed2471d229b> in <module> ----> 1 print('Again, temperature in Kelvin was:', temp_k)  NameError: name 'temp_k' is not defined temp_kelvin = fahr_to_kelvin(212.0) print('temperature in Kelvin was:', temp_kelvin) temperature in Kelvin was: 373.15 def print_temperatures():     print('temperature in Fahrenheit was:', temp_fahr)     print('temperature in Kelvin was:', temp_kelvin)  temp_fahr = 212.0 temp_kelvin = fahr_to_kelvin(temp_fahr)  print_temperatures() temperature in Fahrenheit was: 212.0 temperature in Kelvin was: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Now know wrap bits code functions, can make inflammation analysis easier read easier reuse. First, let’s make visualize function generates plots: another function called detect_problems checks systematics noticed: Wait! Didn’t forget specify functions return? Well, didn’t. Python, functions required include return statement can used sole purpose grouping together pieces code conceptually one thing. cases, function names usually describe , e.g. visualize, detect_problems. Notice rather jumbling code together one giant loop, can now read reuse ideas separately. can reproduce previous analysis much simpler loop: giving functions human-readable names, can easily read understand happening loop. Even better, later date want use either pieces code , can single line.","code":"def visualize(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() def detect_problems(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      if numpy.amax(data, axis=0)[0] == 0 and numpy.amax(data, axis=0)[20] == 20:         print('Suspicious looking maxima!')     elif numpy.sum(numpy.amin(data, axis=0)) == 0:         print('Minima add up to zero!')     else:         print('Seems OK!') filenames = sorted(glob.glob('inflammation*.csv'))  for filename in filenames[:3]:     print(filename)     visualize(filename)     detect_problems(filename)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"start putting things functions can re-use , need start testing functions working correctly. see , let’s write function offset dataset ’s mean value shifts user-defined value: test actual data, since don’t know values , hard tell result correct. Instead, let’s use NumPy create matrix 0’s offset values mean value 3: looks right, let’s try offset_mean real data: ’s hard tell default output whether result correct, tests can run reassure us: seems almost right: original mean 6.1, lower bound zero now -6.1. mean offset data isn’t quite zero, ’s pretty close. can even go check standard deviation hasn’t changed: values look , probably wouldn’t notice different sixth decimal place. Let’s instead: Everything looks good, probably get back analysis. one task first, though: write documentation function remind later ’s use . usual way put documentation software add comments like : ’s better way, though. first thing function string isn’t assigned variable, string attached function documentation: better can now ask Python’s built-help system show us documentation function: string like called docstring. don’t need use triple quotes write one, , can break string across multiple lines:","code":"def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value z = numpy.zeros((2, 2)) print(offset_mean(z, 3)) [[ 3.  3.]  [ 3.  3.]] data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(offset_mean(data, 0)) [[-6.14875 -6.14875 -5.14875 ... -3.14875 -6.14875 -6.14875]  [-6.14875 -5.14875 -4.14875 ... -5.14875 -6.14875 -5.14875]  [-6.14875 -5.14875 -5.14875 ... -4.14875 -5.14875 -5.14875]  ...  [-6.14875 -5.14875 -5.14875 ... -5.14875 -5.14875 -5.14875]  [-6.14875 -6.14875 -6.14875 ... -6.14875 -4.14875 -6.14875]  [-6.14875 -6.14875 -5.14875 ... -5.14875 -5.14875 -6.14875]] print('original min, mean, and max are:', numpy.amin(data), numpy.mean(data), numpy.amax(data)) offset_data = offset_mean(data, 0) print('min, mean, and max of offset data are:',       numpy.amin(offset_data),       numpy.mean(offset_data),       numpy.amax(offset_data)) original min, mean, and max are: 0.0 6.14875 20.0 min, mean, and max of offset data are: -6.14875 2.842170943040401e-16 13.85125 print('std dev before and after:', numpy.std(data), numpy.std(offset_data)) std dev before and after: 4.613833197118566 4.613833197118566 print('difference in standard deviations before and after:',       numpy.std(data) - numpy.std(offset_data)) difference in standard deviations before and after: 0.0 # offset_mean(data, target_mean_value): # return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.\"\"\"     return (data - numpy.mean(data)) + target_mean_value help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value  help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"passed parameters functions two ways: directly, type(data), name, numpy.loadtxt(fname='something.csv', delimiter=','). fact, can pass filename loadtxt without fname=: still need say delimiter=: understand ’s going , make functions easier use, let’s re-define offset_mean function like : key change second parameter now written target_mean_value=0.0 instead just target_mean_value. call function two arguments, works : can also now call just one parameter, case target_mean_value automatically assigned default value 0.0: handy: usually want function work one way, occasionally need something else, can allow people pass parameter need provide default make normal case easier. example shows Python matches values parameters: example shows, parameters matched left right, haven’t given value explicitly get default value. can override behavior naming value pass : hand, let’s look help numpy.loadtxt: ’s lot information , important part first couple lines: tells us loadtxt one parameter called fname doesn’t default value, eight others . call function like : filename assigned fname (want), delimiter string ',' assigned dtype rather delimiter, dtype second parameter list. However ',' isn’t known dtype code produced error message tried run . call loadtxt don’t provide fname= filename ’s first item list, want ',' assigned variable delimiter, provide delimiter= second parameter since delimiter second parameter list.","code":"numpy.loadtxt('inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) numpy.loadtxt('inflammation-01.csv', ',') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/lib/npyio.py\", line 1041, in loa dtxt     dtype = np.dtype(dtype)   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/core/_internal.py\", line 199, in _commastring     newitem = (dtype, eval(repeats))   File \"<string>\", line 1     ,     ^ SyntaxError: unexpected EOF while parsing def offset_mean(data, target_mean_value=0.0):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value, (0 by default).      Examples     --------     >>> offset_mean([1, 2, 3])     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value test_data = numpy.zeros((2, 2)) print(offset_mean(test_data, 3)) [[ 3.  3.]  [ 3.  3.]] more_data = 5 + numpy.zeros((2, 2)) print('data before mean offset:') print(more_data) print('offset data:') print(offset_mean(more_data)) data before mean offset: [[ 5.  5.]  [ 5.  5.]] offset data: [[ 0.  0.]  [ 0.  0.]] def display(a=1, b=2, c=3):     print('a:', a, 'b:', b, 'c:', c)  print('no parameters:') display() print('one parameter:') display(55) print('two parameters:') display(55, 66) no parameters: a: 1 b: 2 c: 3 one parameter: a: 55 b: 2 c: 3 two parameters: a: 55 b: 66 c: 3 print('only setting the value of c') display(c=77) only setting the value of c a: 1 b: 2 c: 77 help(numpy.loadtxt) Help on function loadtxt in module numpy.lib.npyio:  loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes')     Load data from a text file.      Each row in the text file must have the same number of values.      Parameters     ---------- ... loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes') numpy.loadtxt('inflammation-01.csv', ',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Consider two functions: functions s std_dev computationally equivalent (calculate sample standard deviation), human reader, look different. probably found std_dev much easier read understand s. example illustrates, documentation programmer’s coding style combine determine easy others read understand programmer’s code. Choosing meaningful variable names using blank spaces break code logical “chunks” helpful techniques producing readable code. useful sharing code others, also original programmer. need revisit code wrote months ago haven’t thought since , appreciate value readable code! Python first execute function add = 7 b = 3, , therefore, print 10. However, function add line starts return (return “statement”), , default, return nothing , Python world, called None. Therefore, assigned None last line (print()) print None. result, see: k 0 k inside function f2k doesn’t know k defined outside function. f2k function called, creates local variable k. function return values alter k outside local copy. Therefore original value k remains unchanged. Beware local k created f2k internal statements affect new value . k read, simply retrieve global k value. Attempting define numbers function results 4. SyntaxError. defined parameters two four given default values. one three given default values, required included arguments function called must placed parameters default values function definition. given call func displays : -1 b: 2 c: 6. -1 assigned first parameter , 2 assigned next parameter b, c passed value, uses default value 6.","code":"def s(p):     a = 0     for v in p:         a += v     m = a / len(p)     d = 0     for v in p:         d += (v - m) * (v - m)     return numpy.sqrt(d / (len(p) - 1))  def std_dev(sample):     sample_sum = 0     for value in sample:         sample_sum += value      sample_mean = sample_sum / len(sample)      sum_squared_devs = 0     for value in sample:         sum_squared_devs += (value - sample_mean) * (value - sample_mean)      return numpy.sqrt(sum_squared_devs / (len(sample) - 1)) def fence(original, wrapper):     return wrapper + original + wrapper 10 None def outer(input_string):     return input_string[0] + input_string[-1] def rescale(input_array):     L = numpy.amin(input_array)     H = numpy.amax(input_array)     output_array = (input_array - L) / (H - L)     return output_array \"\"\"Takes an array as input, and returns a corresponding array scaled so that 0 corresponds to the minimum and 1 to the maximum value of the input array.  Examples: >>> rescale(numpy.arange(10.0)) array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ]) >>> rescale(numpy.linspace(0, 100, 5)) array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]) \"\"\" def rescale(input_array, low_val=0.0, high_val=1.0):     \"\"\"rescales input array values to lie between low_val and high_val\"\"\"     L = numpy.amin(input_array)     H = numpy.amax(input_array)     intermed_array = (input_array - L) / (H - L)     output_array = intermed_array * (high_val - low_val) + low_val     return output_array 259.81666666666666 278.15 273.15 0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"combining-strings","dir":"","previous_headings":"","what":"Combining Strings","title":null,"text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"return-versus-print","dir":"","previous_headings":"","what":"Return versus print","title":null,"text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"selecting-characters-from-strings","dir":"","previous_headings":"","what":"Selecting Characters From Strings","title":null,"text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"rescaling-an-array","dir":"","previous_headings":"","what":"Rescaling an Array","title":null,"text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"testing-and-documenting-your-function","dir":"","previous_headings":"","what":"Testing and Documenting Your Function","title":null,"text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"defining-defaults-1","dir":"","previous_headings":"","what":"Defining Defaults","title":null,"text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"variables-inside-and-outside-functions","dir":"","previous_headings":"","what":"Variables Inside and Outside Functions","title":null,"text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"mixing-default-and-non-default-parameters","dir":"","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":null,"text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":"readable-code","dir":"","previous_headings":"","what":"Readable Code","title":null,"text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/08-func.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"long-tracebacks","dir":"","previous_headings":"","what":"Long Tracebacks","title":null,"text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"reading-error-messages","dir":"","previous_headings":"","what":"Reading Error Messages","title":null,"text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17 ---> 18 print_sunday_message()      19  <ipython-input-7-3ad455d81842> in print_sunday_message()      14      15 def print_sunday_message(): ---> 16     print_message(7)      17      18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14      15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"better-errors-on-newer-pythons","dir":"","previous_headings":"","what":"Better errors on newer Pythons","title":null,"text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"forget colon end line, accidentally add one space many indenting statement, forget parenthesis, encounter syntax error. means Python couldn’t figure read program. similar forgetting punctuation English: example, text difficult read punctuation also capitalization hard figure sentence ends also figure sentence begins extent might ambiguous sentence break People can typically figure meant text punctuation, people much smarter computers. Python doesn’t know read program, give inform error. example: , Python tells us SyntaxError line 1, even puts little arrow place issue. case problem function definition missing colon end. Actually, function two issues syntax. fix problem colon, see also IndentationError, means lines function definition indentation: SyntaxError IndentationError indicate problem syntax program, IndentationError specific: always means problem code indented.","code":"def some_function()     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-3-6bb841ea1423>\", line 1     def some_function()                        ^ SyntaxError: invalid syntax def some_function():     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-4-ae290e7659cb>\", line 4     return msg     ^ IndentationError: unexpected indent"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"tabs-and-spaces","dir":"","previous_headings":"","what":"Tabs and Spaces","title":null,"text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Another common type error called NameError, occurs try use variable exist. example: Variable name errors come informative error messages, usually form “name ‘the_variable_name’ defined”. error message occur? ’s harder question answer, depends code supposed . However, common reasons might undefined variable. first meant use string, forgot put quotes around : second reason might trying use variable yet exist. following example, count defined (e.g., count = 0) loop: Finally, third possibility made typo writing code. Let’s say fixed error adding line Count = 0 loop. Frustratingly, actually fix error. Remember variables case-sensitive, variable count different Count. still get error, still defined count:","code":"print(a) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-7-9d7b17ad5387> in <module>() ----> 1 print(a)  NameError: name 'a' is not defined print(hello) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-8-9553ee03b645> in <module>() ----> 1 print(hello)  NameError: name 'hello' is not defined for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-9-dd6a12d7ca5c> in <module>()       1 for number in range(10): ----> 2     count = count + number       3 print('The count is:', count)  NameError: name 'count' is not defined Count = 0 for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-10-d77d40059aea> in <module>()       1 Count = 0       2 for number in range(10): ----> 3     count = count + number       4 print('The count is:', count)  NameError: name 'count' is not defined"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Next errors containers (like lists strings) items within . try access item list string exist, get error. makes sense: asked someone day like get coffee, answered “caturday”, might bit annoyed. Python gets similarly annoyed try ask item doesn’t exist: , Python telling us IndexError code, meaning tried access list index exist.","code":"letters = ['a', 'b', 'c'] print('Letter #1 is', letters[0]) print('Letter #2 is', letters[1]) print('Letter #3 is', letters[2]) print('Letter #4 is', letters[3]) Letter #1 is a Letter #2 is b Letter #3 is c --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-11-d817f55b7d6c> in <module>()       3 print('Letter #2 is', letters[1])       4 print('Letter #3 is', letters[2]) ----> 5 print('Letter #4 is', letters[3])  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"last type error ’ll cover today associated reading writing files: FileNotFoundError. try read file exist, receive FileNotFoundError telling . attempt write file opened read-, Python 3 returns UnsupportedOperationError. generally, problems input output manifest OSErrors, may show specific subclass; can see list Python docs. unique UNIX errno, can see error message. One reason receiving error specified incorrect path file. example, currently folder called myproject, file myproject/writing/myfile.txt, try open myfile.txt, fail. correct path writing/myfile.txt. also possible file name path contains typo. related issue can occur use “read” flag instead “write” flag. Python give error try open file writing file exist. However, meant open file reading, accidentally opened writing, try read , get UnsupportedOperation error telling file opened reading: common errors files, though many others exist. get error ’ve never seen , searching Internet error type often reveals common reasons might get error. SyntaxError missing (): end first line, IndentationError mismatch second third lines. fixed version : 3 NameErrors number misspelled, message defined, quotes. Fixed version: IndexError; last entry seasons[3], seasons[4] doesn’t make sense. fixed version :","code":"file_handle = open('myfile.txt', 'r') --------------------------------------------------------------------------- FileNotFoundError                         Traceback (most recent call last) <ipython-input-14-f6e1ac4aee96> in <module>() ----> 1 file_handle = open('myfile.txt', 'r')  FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt' file_handle = open('myfile.txt', 'w') file_handle.read() --------------------------------------------------------------------------- UnsupportedOperation                      Traceback (most recent call last) <ipython-input-15-b846479bc61f> in <module>()       1 file_handle = open('myfile.txt', 'w') ----> 2 file_handle.read()  UnsupportedOperation: not readable def another_function():     print('Syntax errors are annoying.')     print('But at least Python tells us about them!')     print('So they are usually not too hard to fix.') message = '' for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (number % 3) == 0:         message = message + 'a'     else:         message = message + 'b' print(message) seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[-1])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"identifying-syntax-errors","dir":"","previous_headings":"","what":"Identifying Syntax Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"identifying-variable-name-errors","dir":"","previous_headings":"","what":"Identifying Variable Name Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":"identifying-index-errors","dir":"","previous_headings":"","what":"Identifying Index Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/09-errors.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"first step toward getting right answers programs assume mistakes happen guard . called defensive programming, common way add assertions code checks runs. assertion simply statement something must true certain point program. Python sees one, evaluates assertion’s condition. ’s true, Python nothing, ’s false, Python halts program immediately prints error message one provided. example, piece code halts soon loop encounters value isn’t positive: Programs like Firefox browser full assertions: 10-20% code contain check 80–90% working correctly. Broadly speaking, assertions fall three categories: precondition something must true start function order work correctly. postcondition something function guarantees true finishes. invariant something always true particular point inside piece code. example, suppose representing rectangles using tuple four coordinates (x0, y0, x1, y1), representing lower left upper right corners rectangle. order calculations, need normalize rectangle lower left corner origin longest side 1.0 units long. function , checks input correctly formatted result makes sense: preconditions lines 6, 8, 9 catch invalid inputs: post-conditions lines 20 21 help us catch bugs telling us calculations might incorrect. example, normalize rectangle taller wide everything seems OK: normalize one ’s wider tall, assertion triggered: Re-reading function, realize line 14 divide dy dx rather dx dy. Jupyter notebook, can display line numbers typing Ctrl+M followed L. left assertion end function, created returned something right shape valid answer, wasn’t. Detecting debugging almost certainly taken time long run writing assertion. assertions aren’t just catching errors: also help people understand programs. assertion gives person reading program chance check (consciously otherwise) understanding matches code . good programmers follow two rules adding assertions code. first , fail early, fail often. greater distance error occurs ’s noticed, harder error debug, good code catches mistakes early possible. second rule , turn bugs assertions tests. Whenever fix bug, write assertion catches mistake make . made mistake piece code, odds good made mistakes nearby, make mistake (related one) next time change . Writing assertions check haven’t regressed (.e., haven’t re-introduced old problem) can save lot time long run, helps warn people reading code (including future self) bit tricky.","code":"numbers = [1.5, 2.3, 0.7, -0.001, 4.4] total = 0.0 for num in numbers:     assert num > 0.0, 'Data should only contain positive values'     total += num print('total is:', total) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-19-33d87ea29ae4> in <module>()       2 total = 0.0       3 for num in numbers: ----> 4     assert num > 0.0, 'Data should only contain positive values'       5     total += num       6 print('total is:', total)  AssertionError: Data should only contain positive values def normalize_rectangle(rect):     \"\"\"Normalizes a rectangle so that it is at the origin and 1.0 units long on its longest axis.     Input should be of the format (x0, y0, x1, y1).     (x0, y0) and (x1, y1) define the lower left and upper right corners     of the rectangle, respectively.\"\"\"     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'     x0, y0, x1, y1 = rect     assert x0 < x1, 'Invalid X coordinates'     assert y0 < y1, 'Invalid Y coordinates'      dx = x1 - x0     dy = y1 - y0     if dx > dy:         scaled = dx / dy         upper_x, upper_y = 1.0, scaled     else:         scaled = dx / dy         upper_x, upper_y = scaled, 1.0      assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid'     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      return (0, 0, upper_x, upper_y) print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-2-1b9cd8e18a1f> in <module> ----> 1 print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       4     (x0, y0) and (x1, y1) define the lower left and upper right corners       5     of the rectangle, respectively.\"\"\" ----> 6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect       8     assert x0 < x1, 'Invalid X coordinates'  AssertionError: Rectangles must contain 4 coordinates print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-3-325036405532> in <module> ----> 1 print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect ----> 8     assert x0 < x1, 'Invalid X coordinates'       9     assert y0 < y1, 'Invalid Y coordinates'      10  AssertionError: Invalid X coordinates print(normalize_rectangle( (0.0, 0.0, 1.0, 5.0) )) (0, 0, 0.2, 1.0) print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) )) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-5-8d4a48f1d068> in <module> ----> 1 print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)      19      20     assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid' ---> 21     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      22      23     return (0, 0, upper_x, upper_y)  AssertionError: Calculated upper Y coordinate invalid"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"assertion checks something true particular point program. next step check overall behavior piece code, .e., make sure produces right output ’s given particular input. example, suppose need find two time series overlap. range time series represented pair numbers, time interval started ended. output largest range include: novice programmers solve problem like : Write function range_overlap. Call interactively two three different inputs. produces wrong answer, fix function re-run test. clearly works — , thousands scientists right now — ’s better way: Write short function test. Write range_overlap function pass tests. range_overlap produces wrong answers, fix re-run test functions. Writing tests writing function exercise called test-driven development (TDD). advocates believe produces better code faster : people write tests writing thing tested, subject confirmation bias, .e., subconsciously write tests show code correct, rather find errors. Writing tests helps programmers figure function actually supposed . start defining empty function range_overlap: three test statements range_overlap: error actually reassuring: haven’t implemented logic range_overlap yet, tests passed, indicate ’ve written entirely ineffective test. bonus writing tests, ’ve implicitly defined input output look like: expect list pairs input, produce single pair output. Something important missing, though. don’t tests case ranges don’t overlap : range_overlap case: fail error message, produce special value like (0.0, 0.0) signal ’s overlap, something else? actual implementation function one things; writing tests first helps us figure best ’re emotionally invested whatever happened write realized issue. case? two segments touch endpoints overlap ? Mathematicians usually say “yes”, engineers usually say “”. best answer “whatever useful rest program”, , actual implementation range_overlap going something, whatever consistent ’s overlap . Since ’re planning use range function returns X axis time series chart, decide : every overlap non-zero width, return special value None ’s overlap. None built Python, means “nothing ”. (languages often call equivalent value null nil). decision made, can finish writing last two tests: , get error haven’t written function, ’re now ready : Take moment think calculate left endpoint overlap maximum input left endpoints, overlap right endpoint minimum input right endpoints. ’d now like re-run tests, ’re scattered across three different cells. make running easier, let’s put function: can now test range_overlap single function call: first test supposed produce None fails, know something wrong function. don’t know whether tests passed failed Python halted program soon spotted first error. Still, information better none, trace behavior function input, realize ’re initializing max_left min_right 0.0 1.0 respectively, regardless input values. violates another important rule programming: always initialize data. first assertion checks input sequence values empty. empty sequence [] make fail. second assertion checks value list can turned integer. Input [1, 2, 'c', 3] make fail. third assertion checks total list greater 0. Input [-10, 2, 3] make fail.","code":"def range_overlap(ranges):     pass assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0) assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0) assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-25-d8be150fbef6> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       2 assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)       3 assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)  AssertionError: assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-26-d877ef460ba2> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       2 assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None  AssertionError: def range_overlap(ranges):     \"\"\"Return common overlap among a set of [left, right] ranges.\"\"\"     max_left = 0.0     min_right = 1.0     for (left, right) in ranges:         max_left = max(max_left, left)         min_right = min(min_right, right)     return (max_left, min_right) def test_range_overlap():     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)     assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([]) == None test_range_overlap() --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-29-cf9215c96457> in <module>() ----> 1 test_range_overlap()  <ipython-input-28-5d4cd6fd41d9> in test_range_overlap()       1 def test_range_overlap(): ----> 2     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       3     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None       4     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       5     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)  AssertionError: # a possible pre-condition: assert len(input_array) > 0, 'Array length must be non-zero' # a possible post-condition: assert numpy.amin(input_array) <= average <= numpy.amax(input_array), 'Average should be between min and max of input values (inclusive)'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":"pre--and-post-conditions","dir":"","previous_headings":"","what":"Pre- and Post-Conditions","title":null,"text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":"testing-assertions","dir":"","previous_headings":"","what":"Testing Assertions","title":null,"text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/10-defensive.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"first step debugging something know ’s supposed . “program doesn’t work” isn’t good enough: order diagnose fix problems, need able tell correct output incorrect. can write test case failing case — .e., can assert inputs, function produce result — ’re ready start debugging. can’t, need figure ’re going know ’ve fixed things. writing test cases scientific software frequently harder writing test cases commercial applications, knew output scientific code supposed , wouldn’t running software: ’d writing results moving next program. practice, scientists tend following: Test simplified data. statistics real data set, try calculating statistics single record, two identical records, two records whose values one step apart, case can calculate right answer hand. Test simplified case. program supposed simulate magnetic eddies rapidly-rotating blobs supercooled helium, first test blob helium isn’t rotating, isn’t subjected external electromagnetic fields. Similarly, ’re looking effects climate change speciation, first test hold temperature, precipitation, factors constant. Compare oracle. test oracle something whose results trusted, experimental data, older program, human expert. use test oracles determine new program produces correct results. test oracle, store output particular cases can compare new results often like without re-running program. Check conservation laws. Mass, energy, quantities conserved physical systems, programs well. Similarly, analyzing patient data, number records either stay decrease move one analysis next (since might throw away outliers records missing values). “new” patients start appearing nowhere move pipeline, ’s probably sign something wrong. Visualize. Data analysts frequently use simple visualizations check science ’re correctness code (just opening lesson tutorial). used debugging last resort, though, since ’s hard compare two visualizations automatically.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"can debug something fails, second step always find test case makes fail every time. “every time” part important things frustrating debugging intermittent problem: call function dozen times get single failure, odds good ’ll scroll past failure actually occurs. part , ’s always important check code “plugged ”, .e., ’re actually exercising problem think . Every programmer spent hours chasing bug, realize actually calling code wrong data set wrong configuration parameters, using wrong version software entirely. Mistakes like particularly likely happen ’re tired, frustrated, deadline, one reasons late-night (overnight) coding sessions almost never worthwhile.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"takes 20 minutes bug surface, can three experiments hour. means ’ll get less data time ’re likely distracted things wait program fail, means time spending problem less focused. ’s therefore critical make fail fast. well making program fail fast time, want make fail fast space, .e., want localize failure smallest possible region code: smaller gap cause effect, easier connection find. Many programmers therefore use divide conquer strategy find bugs, .e., output function wrong, check whether things OK middle, concentrate either first second half, . N things can interact N! different ways, every line code isn’t run part test means one thing don’t need worry .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Replacing random chunks code unlikely much good. (, got wrong first time, ’ll probably get wrong second third well.) Good programmers therefore change one thing time, reason. either trying gather information (“bug still change order loops?”) test fix (“can make bug go away sorting data processing ?”). Every time make change, however small, re-run tests immediately, things change , harder know ’s responsible (N! interactions ). re-run tests: half fixes made code introduce (re-introduce) bugs, re-running tests tells us whether regressed.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Good scientists keep track ’ve done can reproduce work, don’t waste time repeating experiments running ones whose results won’t interesting. Similarly, debugging works best keep track ’ve done well worked. find asking, “left followed right odd number lines cause crash? right followed left? using even number lines?” ’s time step away computer, take deep breath, start working systematically. Records particularly useful time comes ask help. People likely listen us can explain clearly , ’re better able give information need useful.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"version-control-revisited","dir":"","previous_headings":"","what":"Version Control Revisited","title":null,"text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"speaking help: can’t find bug 10 minutes, humble ask help. Explaining problem someone else often useful, since hearing ’re thinking helps us spot inconsistencies hidden assumptions. don’t someone nearby share problem description , get rubber duck! Asking help also helps alleviate confirmation bias. just spent hour writing complicated program, want work, ’re likely keep telling , rather searching reason doesn’t. People aren’t emotionally invested code can objective, ’re often able spot simple mistakes overlooked. Part humble learning mistakes. Programmers tend get things wrong : either don’t understand language libraries ’re working , model things work wrong. either case, taking note error occurred checking next time quickly turns making mistake . makes us productive long run. saying goes, week hard work can sometimes save hour thought. train avoid making kinds mistakes, break code modular, testable chunks, turn every assumption (mistake) assertion, actually take us less time produce working programs, .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"debug-with-a-neighbor","dir":"","previous_headings":"","what":"Debug With a Neighbor","title":null,"text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"not-supposed-to-be-the-same","dir":"","previous_headings":"","what":"Not Supposed to be the Same","title":null,"text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"suggestions-for-debugging","dir":"","previous_headings":"","what":"Suggestions for debugging","title":null,"text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":"bugs-found","dir":"","previous_headings":"","what":"Bugs found","title":null,"text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/11-debugging.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"switching-to-shell-commands","dir":"","previous_headings":"","what":"Switching to Shell Commands","title":null,"text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"going create file python code , use bash shell run code. Using text editor choice, save following text file called sys_version.py: first line imports library called sys, short “system”. defines values sys.version, describes version Python running. can run script command line like : Create another file called argv_list.py save following text . strange name argv stands “argument values”. Whenever Python runs program, takes values given command line puts list sys.argv program can determine . run program arguments: thing list full path script, always sys.argv[0]. run arguments, however: Python adds arguments magic list. hand, let’s build version readings.py always prints per-patient mean single data file. first step write function outlines implementation, placeholder function actual work. convention function usually called main, though can call whatever want: function gets name script sys.argv[0], ’s ’s always put, name file process sys.argv[1]. ’s simple test: output defined function, haven’t actually called . Let’s add call main: run :","code":"import sys print('version is', sys.version) $ python sys_version.py version is 3.4.3+ (default, Jul 28 2015, 13:17:50) [GCC 4.9.3] import sys print('sys.argv is', sys.argv) $ python argv_list.py sys.argv is ['argv_list.py'] $ python argv_list.py first second third sys.argv is ['argv_list.py', 'first', 'second', 'third'] $ cat ../code/readings_01.py import sys import numpy   def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean) $ python ../code/readings_01.py inflammation-01.csv $ cat ../code/readings_02.py import sys import numpy  def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_02.py inflammation-01.csv 5.45 5.425 6.1 5.9 5.55 6.225 5.975 6.65 6.625 6.525 6.775 5.8 6.225 5.75 5.225 6.3 6.55 5.7 5.85 6.55 5.775 5.825 6.175 6.1 5.8 6.425 6.05 6.025 6.175 6.55 6.175 6.35 6.725 6.125 7.075 5.725 5.925 6.15 6.075 5.75 5.975 5.725 6.3 5.9 6.75 5.925 7.225 6.15 5.95 6.275 5.7 6.1 6.825 5.975 6.725 5.7 6.25 6.4 7.05 5.9"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"running-versus-importing","dir":"","previous_headings":"","what":"Running Versus Importing","title":null,"text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"the-right-way-to-do-it","dir":"","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"next step teach program handle multiple files. Since 60 lines output per file lot page , ’ll start using three smaller files, three days data two patients: Using small data files input also allows us check results easily: , example, can see program calculating mean correctly line, whereas really taking faith . yet another rule programming: test simple things first. want program process file separately, need loop executes filename. specify files command line, filenames sys.argv, need careful: sys.argv[0] always name script, rather name file. also need handle unknown number filenames, since program run number files. solution problems loop contents sys.argv[1:]. ‘1’ tells Python start slice location 1, program’s name isn’t included; since ’ve left upper bound, slice runs end list, includes filenames. ’s changed program readings_03.py: action:","code":"$ ls small-*.csv small-01.csv small-02.csv small-03.csv $ cat small-01.csv 0,0,1 0,1,2 $ python ../code/readings_02.py small-01.csv 0.333333333333 1.0 $ cat ../code/readings_03.py import sys import numpy  def main():     script = sys.argv[0]     for filename in sys.argv[1:]:         data = numpy.loadtxt(filename, delimiter=',')         for row_mean in numpy.mean(data, axis=1):             print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_03.py small-01.csv small-02.csv 0.333333333333 1.0 13.6666666667 11.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"the-right-way-to-do-it-1","dir":"","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"next step teach program pay attention --min, --mean, --max flags. always appear names files, : works: several things wrong : main large read comfortably. specify least two additional arguments command-line, one flag one filename, one, program throw exception run. assumes file list empty, sys.argv[1] considered action, even filename. Silent failures like always hard debug. program check submitted action one three recognized flags. version pulls processing file loop function . also checks action one allowed flags processing, program fails fast: four lines longer predecessor, broken digestible chunks 8 12 lines.","code":"$ cat ../code/readings_04.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]      for filename in filenames:         data = numpy.loadtxt(filename, delimiter=',')          if action == '--min':             values = numpy.amin(data, axis=1)         elif action == '--mean':             values = numpy.mean(data, axis=1)         elif action == '--max':             values = numpy.amax(data, axis=1)          for val in values:             print(val)  if __name__ == '__main__':     main() $ python ../code/readings_04.py --max small-01.csv 1.0 2.0 $ cat ../code/readings_05.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     for filename in filenames:         process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"next thing program read data standard input filenames given can put pipeline, redirect input , . Let’s experiment another script called count_stdin.py: little program reads lines special “file” called sys.stdin, automatically connected program’s standard input. don’t open — Python operating system take care program starts — can almost anything regular file. Let’s try running regular command-line program: common mistake try run something reads standard input like : .e., forget < character redirects file standard input. case, ’s nothing standard input, program waits start loop someone type something keyboard. Since ’s way us , program stuck, halt using Interrupt option Kernel menu Notebook. now need rewrite program loads data sys.stdin filenames provided. Luckily, numpy.loadtxt can handle either filename open file first parameter, don’t actually need change process. main changes: Let’s try : ’s better. fact, ’s done: program now everything set .","code":"$ cat ../code/count_stdin.py import sys  count = 0 for line in sys.stdin:     count += 1  print(count, 'lines in standard input') $ python ../code/count_stdin.py < small-01.csv 2 lines in standard input $ python ../code/count_stdin.py small-01.csv $ cat ../code/readings_06.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ python ../code/readings_06.py --mean < small-01.csv 0.333333333333 1.0 import sys  def main():     assert len(sys.argv) == 4, 'Need exactly 3 arguments'      operator = sys.argv[1]     assert operator in ['--add', '--subtract', '--multiply', '--divide'], \\         'Operator is not one of --add, --subtract, --multiply, or --divide: bailing out'     try:         operand1, operand2 = float(sys.argv[2]), float(sys.argv[3])     except ValueError:         print('cannot convert input to a number: bailing out')         return      do_arithmetic(operand1, operator, operand2)  def do_arithmetic(operand1, operator, operand2):      if operator == 'add':         value = operand1 + operand2     elif operator == 'subtract':         value = operand1 - operand2     elif operator == 'multiply':         value = operand1 * operand2     elif operator == 'divide':         value = operand1 / operand2     print(value)  main() import sys import glob  def main():     \"\"\"prints names of all files with sys.argv as suffix\"\"\"     assert len(sys.argv) >= 2, 'Argument list cannot be empty'     suffix = sys.argv[1] # NB: behaviour is not as you'd expect if sys.argv[1] is *     glob_input = '*.' + suffix # construct the input     glob_output = sorted(glob.glob(glob_input)) # call the glob function     for item in glob_output: # print the output         print(item)     return  main() # this is code/readings_07.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['-n', '-m', '-x'], \\            'Action is not one of -n, -m, or -x: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '-n':         values = numpy.amin(data, axis=1)     elif action == '-m':         values = numpy.mean(data, axis=1)     elif action == '-x':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() # this is code/readings_08.py import sys import numpy  def main():     script = sys.argv[0]     if len(sys.argv) == 1:  # no arguments, so print help message         print(\"Usage: python readings_08.py action filenames\\n\"               \"Action:\\n\"               \"    Must be one of --min, --mean, or --max.\\n\"               \"Filenames:\\n\"               \"    If blank, input is taken from standard input (stdin).\\n\"               \"    Otherwise, each filename in the list of arguments is processed in turn.\")         return      action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], (         'Action is not one of --min, --mean, or --max: ' + action)     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() # this is code/readings_09.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     if action not in ['--min', '--mean', '--max']: # if no action given         action = '--mean'    # set a default action, that being mean         filenames = sys.argv[1:] # start the filenames one place earlier in the argv list     else:         filenames = sys.argv[2:]      if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() import sys import numpy  def main():     script = sys.argv[0]     filenames = sys.argv[1:]     if len(filenames) <=1: #nothing to check         print('Only 1 file specified on input')     else:         nrow0, ncol0 = row_col_count(filenames[0])         print('First file %s: %d rows and %d columns' % (filenames[0], nrow0, ncol0))         for filename in filenames[1:]:             nrow, ncol = row_col_count(filename)             if nrow != nrow0 or ncol != ncol0:                 print('File %s does not check: %d rows and %d columns' % (filename, nrow, ncol))             else:                 print('File %s checks' % filename)         return  def row_col_count(filename):     try:         nrow, ncol = numpy.loadtxt(filename, delimiter=',').shape     except ValueError:         # 'ValueError' error is raised when numpy encounters lines that         # have different number of data elements in them than the rest of the lines,         # or when lines have non-numeric elements         nrow, ncol = (0, 0)     return nrow, ncol  main() import sys  def main():     \"\"\"print each input filename and the number of lines in it,        and print the sum of the number of lines\"\"\"     filenames = sys.argv[1:]     sum_nlines = 0 #initialize counting variable      if len(filenames) == 0: # no filenames, just stdin         sum_nlines = count_file_like(sys.stdin)         print('stdin: %d' % sum_nlines)     else:         for filename in filenames:             nlines = count_file(filename)             print('%s %d' % (filename, nlines))             sum_nlines += nlines         print('total: %d' % sum_nlines)  def count_file(filename):     \"\"\"count the number of lines in a file\"\"\"     f = open(filename, 'r')     nlines = len(f.readlines())     f.close()     return(nlines)  def count_file_like(file_like):     \"\"\"count the number of lines in a file-like object (eg stdin)\"\"\"     n = 0     for line in file_like:         n = n+1     return n  main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"arithmetic-on-the-command-line","dir":"","previous_headings":"","what":"Arithmetic on the Command Line","title":null,"text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"finding-particular-files","dir":"","previous_headings":"","what":"Finding Particular Files","title":null,"text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"changing-flags","dir":"","previous_headings":"","what":"Changing Flags","title":null,"text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"adding-a-help-message","dir":"","previous_headings":"","what":"Adding a Help Message","title":null,"text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"adding-a-default-action","dir":"","previous_headings":"","what":"Adding a Default Action","title":null,"text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"a-file-checker","dir":"","previous_headings":"","what":"A File-Checker","title":null,"text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"counting-lines","dir":"","previous_headings":"","what":"Counting Lines","title":null,"text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":"generate-an-error-message","dir":"","previous_headings":"","what":"Generate an Error Message","title":null,"text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/12-cmdline.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Carpentries (Software Carpentry, Data Carpentry, Library Carpentry) instructional material made available Creative Commons Attribution license. following human-readable summary (substitute ) full legal text CC 4.0 license. free: Share—copy redistribute material medium format Adapt—remix, transform, build upon material purpose, even commercially. licensor revoke freedoms long follow license terms. following terms: Attribution—must give appropriate credit (mentioning work derived work Copyright (c) Carpentries , practical, linking https://carpentries.org/), provide link license, indicate changes made. may reasonable manner, way suggests licensor endorses use. additional restrictions—may apply legal terms technological measures legally restrict others anything license permits. understanding : Notices: comply license elements material public domain use permitted applicable exception limitation. warranties given. license may give permissions necessary intended use. example, rights publicity, privacy, moral rights may limit use material.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Except otherwise noted, example programs software provided Carpentries made available OSI-approved MIT license. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"“Carpentries”, “Software Carpentry”, “Data Carpentry”, “Library Carpentry” respective logos registered trademarks Community Initiatives.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/additional_material.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"can use %whos command time see variables created modules loaded computer’s memory. IPython command, work IPython terminal Jupyter Notebook. ## Integer Division using Python 3, division always returns floating point number: Unfortunately, wasn’t case Python 2: using Python 2 want keep fractional part division need convert one number floating point: want integer result division Python 3, use double-slash:","code":"%whos Variable    Type       Data/Info -------------------------------- weight_kg   float      100.0 weight_lb   float      143.0 5/9 0.5555555555555556 5/9 0 float(5)/9 0.555555555556 5/float(9) 0.555555555556 5.0/9 0.555555555556 5/9.0 0.555555555556 4//2 2 3//2 1"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Python Fundamentals  basic data types can work Python? can create new variable Python? use function? Can change value associated variable create ? Assign values variables. Python interpreter can used calculator: great interesting. anything useful data, need assign value variable. Python, can assign value variable, using equals sign =. example, can track weight patient weighs 60 kilograms assigning value 60 variable weight_kg: now , whenever use weight_kg, Python substitute value assigned . layperson’s terms, variable name value. Python, variable names: can include letters, digits, underscores start digit case sensitive. means , example: weight0 valid variable name, whereas 0weight weight Weight different variables Python knows various types data. Three common ones : integer numbers floating point numbers, strings. example , variable weight_kg integer value 60. want precisely track weight patient, can use floating point value executing: create string, add single double quotes around text. identify track patient throughout study, can assign person unique identifier storing string: data stored variable names, can make use calculations. may want store patient’s weight pounds well kilograms: might decide add prefix patient identifier: carry common tasks data variables Python, language provides us several built-functions. display information screen, use print function: want make use function, referred calling function, follow name parentheses. parentheses important: leave , function doesn’t actually run! Sometimes include values variables inside parentheses function use. case print, use parentheses tell function value want display. learn functions work create later episodes. can display multiple things using one print call: can also call function inside another function call. example, Python built-function called type tells value’s data type: Moreover, can arithmetic variables right inside print function: command, however, change value weight_kg: change value weight_kg variable, assign weight_kg new value using equals = sign:","code":"3 + 5 * 4 23 weight_kg = 60 weight_kg = 60.3 patient_id = '001' weight_lb = 2.2 * weight_kg patient_id = 'inflam_' + patient_id print(weight_lb) print(patient_id) 132.66 inflam_001 print(patient_id, 'weight in kilograms:', weight_kg) inflam_001 weight in kilograms: 60.3 print(type(60.3)) print(type(patient_id)) <class 'float'> <class 'str'> print('weight in pounds:', 2.2 * weight_kg) weight in pounds: 132.66 print(weight_kg) 60.3 weight_kg = 65.0 print('weight in kilograms is now:', weight_kg) weight in kilograms is now: 65.0 `mass` holds a value of 47.5, `age` does not exist `mass` still holds a value of 47.5, `age` holds a value of 122 `mass` now has a value of 95.0, `age`'s value is still 122 `mass` still has a value of 95.0, `age` now holds 102 Hopper Grace print(type(planet)) print(type(apples)) print(type(distance)) <class 'str'> <class 'int'> <class 'float'>"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Python interpreter can used calculator: great interesting. anything useful data, need assign value variable. Python, can assign value variable, using equals sign =. example, can track weight patient weighs 60 kilograms assigning value 60 variable weight_kg: now , whenever use weight_kg, Python substitute value assigned . layperson’s terms, variable name value. Python, variable names: can include letters, digits, underscores start digit case sensitive. means , example: weight0 valid variable name, whereas 0weight weight Weight different variables","code":"3 + 5 * 4 23 weight_kg = 60"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Python knows various types data. Three common ones : integer numbers floating point numbers, strings. example , variable weight_kg integer value 60. want precisely track weight patient, can use floating point value executing: create string, add single double quotes around text. identify track patient throughout study, can assign person unique identifier storing string:","code":"weight_kg = 60.3 patient_id = '001'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"data stored variable names, can make use calculations. may want store patient’s weight pounds well kilograms: might decide add prefix patient identifier:","code":"weight_lb = 2.2 * weight_kg patient_id = 'inflam_' + patient_id"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"carry common tasks data variables Python, language provides us several built-functions. display information screen, use print function: want make use function, referred calling function, follow name parentheses. parentheses important: leave , function doesn’t actually run! Sometimes include values variables inside parentheses function use. case print, use parentheses tell function value want display. learn functions work create later episodes. can display multiple things using one print call: can also call function inside another function call. example, Python built-function called type tells value’s data type: Moreover, can arithmetic variables right inside print function: command, however, change value weight_kg: change value weight_kg variable, assign weight_kg new value using equals = sign:","code":"print(weight_lb) print(patient_id) 132.66 inflam_001 print(patient_id, 'weight in kilograms:', weight_kg) inflam_001 weight in kilograms: 60.3 print(type(60.3)) print(type(patient_id)) <class 'float'> <class 'str'> print('weight in pounds:', 2.2 * weight_kg) weight in pounds: 132.66 print(weight_kg) 60.3 weight_kg = 65.0 print('weight in kilograms is now:', weight_kg) weight in kilograms is now: 65.0 `mass` holds a value of 47.5, `age` does not exist `mass` still holds a value of 47.5, `age` holds a value of 122 `mass` now has a value of 95.0, `age`'s value is still 122 `mass` still has a value of 95.0, `age` now holds 102 Hopper Grace print(type(planet)) print(type(apples)) print(type(distance)) <class 'str'> <class 'int'> <class 'float'>"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"variables-as-sticky-notes","dir":"","previous_headings":"","what":"Variables as Sticky Notes","title":null,"text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"check-your-understanding","dir":"","previous_headings":"","what":"Check Your Understanding","title":null,"text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"sorting-out-references","dir":"","previous_headings":"","what":"Sorting Out References","title":null,"text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"seeing-data-types","dir":"","previous_headings":"","what":"Seeing Data Types","title":null,"text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Analyzing Patient Data  can process tabular data files Python? Explain library libraries used . Import Python library use functions contains. Read tabular data file program. Select individual values subsections data. Perform operations arrays data. Words useful, ’s useful sentences stories build . Similarly, lot powerful, general tools built Python, specialized tools built basic units live libraries can called upon needed. begin processing clinical trial inflammation data, need load Python. can using library called NumPy, stands Numerical Python. general, use library want fancy things lots numbers, especially matrices arrays. tell Python ’d like start using NumPy, need import : Importing library like getting piece lab equipment storage locker setting bench. Libraries provide additional functionality basic Python package, much like new piece equipment adds functionality lab space. Just like lab, importing many libraries can sometimes complicate slow programs - import need program. ’ve imported library, can ask library read data file us: expression numpy.loadtxt(...) function call asks Python run function loadtxt belongs numpy library. dot notation Python used object attribute/property specifier invoking method. object.property give object.property value, object_name.method() invoke object_name method. example, John Smith John belongs Smith family. use dot notation write name smith.john, just loadtxt function belongs numpy library. numpy.loadtxt two parameters: name file want read delimiter separates values line. need character strings (strings short), put quotes. Since haven’t told anything else function’s output, notebook displays . case, output data just loaded. default, rows columns shown (... omit elements displaying big arrays). Note , save space displaying NumPy arrays, Python show us trailing zeros, 1.0 becomes 1.. call numpy.loadtxt read file didn’t save data memory. , need assign array variable. similar manner assign single value variable, can also assign array values variable using syntax. Let’s re-run numpy.loadtxt save returned data: statement doesn’t produce output ’ve assigned output variable data. want check data loaded, can print variable’s value: Now data memory, can manipulate . First, let’s ask type thing data refers : output tells us data currently refers N-dimensional array, functionality provided NumPy library. data correspond arthritis patients’ inflammation. rows individual patients, columns daily inflammation measurements. following command, can see array’s shape: output tells us data array variable contains 60 rows 40 columns. created variable data store arthritis data, create array; also created information array, called members attributes. extra information describes data way adjective describes noun. data.shape attribute data describes dimensions data. use dotted notation attributes variables use functions libraries part--whole relationship. want get single number array, must provide index square brackets variable name, just math referring element matrix. inflammation data two dimensions, need use two indices refer one specific value: expression data[29, 19] accesses element row 30, column 20. expression may surprise , data[0, 0] might. Programming languages like Fortran, MATLAB R start counting 1 ’s human beings done thousands years. Languages C family (including C++, Java, Perl, Python) count 0 represents offset first value array (second value offset one index first value). closer way computers represent arrays (interested historical reasons behind counting indices zero, can read Mike Hoye’s blog post). result, M×N array Python, indices go 0 M-1 first axis 0 N-1 second. takes bit getting used , one way remember rule index many steps take start get item want. index like [30, 20] selects single element array, can select whole sections well. example, can select first ten days (columns) values first four patients (rows) like : slice 0:4 means, “Start index 0 go , including, index 4”. , ----including takes bit getting used , rule difference upper lower bounds number values slice. don’t start slices 0: also don’t include upper lower bound slice. don’t include lower bound, Python uses 0 default; don’t include upper, slice runs end axis, don’t include either (.e., use ‘:’ ), slice includes everything: example selects rows 0 2 columns 36 end array. NumPy several useful functions take array input perform operations values. want find average inflammation patients days, example, can ask NumPy compute data’s mean value: mean function takes array argument. Let’s use three NumPy functions get descriptive values dataset. ’ll also use multiple assignment, convenient Python feature enable us one line. ’ve assigned return value numpy.amax(data) variable maxval, value numpy.amin(data) minval, . analyzing data, though, often want look variations statistical values, maximum inflammation per patient average inflammation per day. One way create new temporary array data want, ask calculation: don’t actually need store row variable . Instead, can combine selection function call: need maximum inflammation patient days (next diagram left) average day (diagram right)? diagram shows, want perform operation across axis: support functionality, array functions allow us specify axis want work . ask average across axis 0 (rows 2D example), get: quick check, can ask array shape : expression (40,) tells us N×1 vector, average inflammation per day patients. average across axis 1 (columns 2D example), get: average inflammation per patient across days. Creates substring index 1 (including) final index, effectively removing first last letters ‘oxygen’ ‘gotcha’ array indexing singleton dimensions dropped default. means [:, 0] one dimensional array, won’t stack desired. preserve singleton dimensions, index can slice array. example, [:, :1] returns two dimensional array one singleton dimension (.e. column vector). alternative way achieve result use Numpy’s delete function remove second column . ’re sure parameters numpy.delete mean, use help files. Since row axis (0) patients, make sense get difference two arbitrary patients. column axis (1) days, difference change inflammation – meaningful concept. shape (60, 39) one fewer difference columns columns data. using numpy.amax() function apply numpy.diff() function, get largest difference days. inflammation values decrease along axis, difference one element next negative. interested magnitude change direction, numpy.absolute() function provide . Notice difference get largest absolute difference readings.","code":"import numpy numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(data) [[ 0.  0.  1. ...,  3.  0.  0.]  [ 0.  1.  2. ...,  1.  0.  1.]  [ 0.  1.  1. ...,  2.  1.  1.]  ...,  [ 0.  1.  1. ...,  1.  1.  1.]  [ 0.  0.  0. ...,  0.  2.  0.]  [ 0.  0.  1. ...,  1.  1.  0.]] print(type(data)) <class 'numpy.ndarray'> print(data.shape) (60, 40) print('first value in data:', data[0, 0]) first value in data: 0.0 print('middle value in data:', data[29, 19]) middle value in data: 16.0 print(data[0:4, 0:10]) [[ 0.  0.  1.  3.  1.  2.  4.  7.  8.  3.]  [ 0.  1.  2.  1.  2.  1.  3.  2.  2.  6.]  [ 0.  1.  1.  3.  3.  2.  6.  2.  5.  9.]  [ 0.  0.  2.  0.  4.  2.  2.  1.  6.  7.]] print(data[5:10, 0:10]) [[ 0.  0.  1.  2.  2.  4.  2.  1.  6.  4.]  [ 0.  0.  2.  2.  4.  2.  2.  5.  5.  8.]  [ 0.  0.  1.  2.  3.  1.  2.  3.  5.  3.]  [ 0.  0.  0.  3.  1.  5.  6.  5.  5.  8.]  [ 0.  1.  1.  2.  1.  3.  5.  3.  5.  8.]] small = data[:3, 36:] print('small is:') print(small) small is: [[ 2.  3.  0.  0.]  [ 1.  1.  0.  1.]  [ 2.  2.  1.  1.]] print(numpy.mean(data)) 6.14875 maxval, minval, stdval = numpy.amax(data), numpy.amin(data), numpy.std(data)  print('maximum inflammation:', maxval) print('minimum inflammation:', minval) print('standard deviation:', stdval) maximum inflammation: 20.0 minimum inflammation: 0.0 standard deviation: 4.61383319712 patient_0 = data[0, :] # 0 on the first axis (rows), everything on the second (columns) print('maximum inflammation for patient 0:', numpy.amax(patient_0)) maximum inflammation for patient 0: 18.0 print('maximum inflammation for patient 2:', numpy.amax(data[2, :])) maximum inflammation for patient 2: 19.0 print(numpy.mean(data, axis=0)) [  0.           0.45         1.11666667   1.75         2.43333333   3.15    3.8          3.88333333   5.23333333   5.51666667   5.95         5.9    8.35         7.73333333   8.36666667   9.5          9.58333333   10.63333333  11.56666667  12.35        13.25        11.96666667   11.03333333  10.16666667  10.           8.66666667   9.15         7.25    7.33333333   6.58333333   6.06666667   5.95         5.11666667   3.6    3.3          3.56666667   2.48333333   1.5          1.13333333    0.56666667] print(numpy.mean(data, axis=0).shape) (40,) print(numpy.mean(data, axis=1)) [ 5.45   5.425  6.1    5.9    5.55   6.225  5.975  6.65   6.625  6.525   6.775  5.8    6.225  5.75   5.225  6.3    6.55   5.7    5.85   6.55   5.775  5.825  6.175  6.1    5.8    6.425  6.05   6.025  6.175  6.55   6.175  6.35   6.725  6.125  7.075  5.725  5.925  6.15   6.075  5.75   5.975  5.725  6.3    5.9    6.75   5.925  7.225  6.15   5.95   6.275  5.7   6.1    6.825  5.975  6.725  5.7    6.25   6.4    7.05   5.9  ] oxyg en oxygen n e element = 'oxygen' print('last three characters:', element[-3:]) element = 'carpentry' print('last three characters:', element[-3:]) element = 'clone' print('last three characters:', element[-3:]) element = 'hi' print('last three characters:', element[-3:]) last three characters: gen last three characters: try last three characters: one last three characters: hi array([], shape=(0, 0), dtype=float64) array([], shape=(0, 40), dtype=float64) D = numpy.hstack((A[:, :1], A[:, -1:])) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] D = numpy.delete(arr=A, obj=1, axis=1) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] numpy.diff(data, axis=1) numpy.amax(numpy.diff(data, axis=1), axis=1) array([  7.,  12.,  11.,  10.,  11.,  13.,  10.,   8.,  10.,  10.,   7.,          7.,  13.,   7.,  10.,  10.,   8.,  10.,   9.,  10.,  13.,   7.,         12.,   9.,  12.,  11.,  10.,  10.,   7.,  10.,  11.,  10.,   8.,         11.,  12.,  10.,   9.,  10.,  13.,  10.,   7.,   7.,  10.,  13.,         12.,   8.,   8.,  10.,  10.,   9.,   8.,  13.,  10.,   7.,  10.,          8.,  12.,  10.,   7.,  12.]) numpy.amax(numpy.absolute(numpy.diff(data, axis=1)), axis=1) array([ 12.,  14.,  11.,  13.,  11.,  13.,  10.,  12.,  10.,  10.,  10.,         12.,  13.,  10.,  11.,  10.,  12.,  13.,   9.,  10.,  13.,   9.,         12.,   9.,  12.,  11.,  10.,  13.,   9.,  13.,  11.,  11.,   8.,         11.,  12.,  13.,   9.,  10.,  13.,  11.,  11.,  13.,  11.,  13.,         13.,  10.,   9.,  10.,  10.,   9.,   9.,  13.,  10.,   9.,  10.,         11.,  13.,  10.,  10.,  12.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"begin processing clinical trial inflammation data, need load Python. can using library called NumPy, stands Numerical Python. general, use library want fancy things lots numbers, especially matrices arrays. tell Python ’d like start using NumPy, need import : Importing library like getting piece lab equipment storage locker setting bench. Libraries provide additional functionality basic Python package, much like new piece equipment adds functionality lab space. Just like lab, importing many libraries can sometimes complicate slow programs - import need program. ’ve imported library, can ask library read data file us: expression numpy.loadtxt(...) function call asks Python run function loadtxt belongs numpy library. dot notation Python used object attribute/property specifier invoking method. object.property give object.property value, object_name.method() invoke object_name method. example, John Smith John belongs Smith family. use dot notation write name smith.john, just loadtxt function belongs numpy library. numpy.loadtxt two parameters: name file want read delimiter separates values line. need character strings (strings short), put quotes. Since haven’t told anything else function’s output, notebook displays . case, output data just loaded. default, rows columns shown (... omit elements displaying big arrays). Note , save space displaying NumPy arrays, Python show us trailing zeros, 1.0 becomes 1.. call numpy.loadtxt read file didn’t save data memory. , need assign array variable. similar manner assign single value variable, can also assign array values variable using syntax. Let’s re-run numpy.loadtxt save returned data: statement doesn’t produce output ’ve assigned output variable data. want check data loaded, can print variable’s value: Now data memory, can manipulate . First, let’s ask type thing data refers : output tells us data currently refers N-dimensional array, functionality provided NumPy library. data correspond arthritis patients’ inflammation. rows individual patients, columns daily inflammation measurements. following command, can see array’s shape: output tells us data array variable contains 60 rows 40 columns. created variable data store arthritis data, create array; also created information array, called members attributes. extra information describes data way adjective describes noun. data.shape attribute data describes dimensions data. use dotted notation attributes variables use functions libraries part--whole relationship. want get single number array, must provide index square brackets variable name, just math referring element matrix. inflammation data two dimensions, need use two indices refer one specific value: expression data[29, 19] accesses element row 30, column 20. expression may surprise , data[0, 0] might. Programming languages like Fortran, MATLAB R start counting 1 ’s human beings done thousands years. Languages C family (including C++, Java, Perl, Python) count 0 represents offset first value array (second value offset one index first value). closer way computers represent arrays (interested historical reasons behind counting indices zero, can read Mike Hoye’s blog post). result, M×N array Python, indices go 0 M-1 first axis 0 N-1 second. takes bit getting used , one way remember rule index many steps take start get item want.","code":"import numpy numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(data) [[ 0.  0.  1. ...,  3.  0.  0.]  [ 0.  1.  2. ...,  1.  0.  1.]  [ 0.  1.  1. ...,  2.  1.  1.]  ...,  [ 0.  1.  1. ...,  1.  1.  1.]  [ 0.  0.  0. ...,  0.  2.  0.]  [ 0.  0.  1. ...,  1.  1.  0.]] print(type(data)) <class 'numpy.ndarray'> print(data.shape) (60, 40) print('first value in data:', data[0, 0]) first value in data: 0.0 print('middle value in data:', data[29, 19]) middle value in data: 16.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"data-type","dir":"","previous_headings":"","what":"Data Type","title":null,"text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"in-the-corner","dir":"","previous_headings":"","what":"In the Corner","title":null,"text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"index like [30, 20] selects single element array, can select whole sections well. example, can select first ten days (columns) values first four patients (rows) like : slice 0:4 means, “Start index 0 go , including, index 4”. , ----including takes bit getting used , rule difference upper lower bounds number values slice. don’t start slices 0: also don’t include upper lower bound slice. don’t include lower bound, Python uses 0 default; don’t include upper, slice runs end axis, don’t include either (.e., use ‘:’ ), slice includes everything: example selects rows 0 2 columns 36 end array.","code":"print(data[0:4, 0:10]) [[ 0.  0.  1.  3.  1.  2.  4.  7.  8.  3.]  [ 0.  1.  2.  1.  2.  1.  3.  2.  2.  6.]  [ 0.  1.  1.  3.  3.  2.  6.  2.  5.  9.]  [ 0.  0.  2.  0.  4.  2.  2.  1.  6.  7.]] print(data[5:10, 0:10]) [[ 0.  0.  1.  2.  2.  4.  2.  1.  6.  4.]  [ 0.  0.  2.  2.  4.  2.  2.  5.  5.  8.]  [ 0.  0.  1.  2.  3.  1.  2.  3.  5.  3.]  [ 0.  0.  0.  3.  1.  5.  6.  5.  5.  8.]  [ 0.  1.  1.  2.  1.  3.  5.  3.  5.  8.]] small = data[:3, 36:] print('small is:') print(small) small is: [[ 2.  3.  0.  0.]  [ 1.  1.  0.  1.]  [ 2.  2.  1.  1.]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"NumPy several useful functions take array input perform operations values. want find average inflammation patients days, example, can ask NumPy compute data’s mean value: mean function takes array argument. Let’s use three NumPy functions get descriptive values dataset. ’ll also use multiple assignment, convenient Python feature enable us one line. ’ve assigned return value numpy.amax(data) variable maxval, value numpy.amin(data) minval, . analyzing data, though, often want look variations statistical values, maximum inflammation per patient average inflammation per day. One way create new temporary array data want, ask calculation: don’t actually need store row variable . Instead, can combine selection function call: need maximum inflammation patient days (next diagram left) average day (diagram right)? diagram shows, want perform operation across axis: support functionality, array functions allow us specify axis want work . ask average across axis 0 (rows 2D example), get: quick check, can ask array shape : expression (40,) tells us N×1 vector, average inflammation per day patients. average across axis 1 (columns 2D example), get: average inflammation per patient across days. Creates substring index 1 (including) final index, effectively removing first last letters ‘oxygen’ ‘gotcha’ array indexing singleton dimensions dropped default. means [:, 0] one dimensional array, won’t stack desired. preserve singleton dimensions, index can slice array. example, [:, :1] returns two dimensional array one singleton dimension (.e. column vector). alternative way achieve result use Numpy’s delete function remove second column . ’re sure parameters numpy.delete mean, use help files. Since row axis (0) patients, make sense get difference two arbitrary patients. column axis (1) days, difference change inflammation – meaningful concept. shape (60, 39) one fewer difference columns columns data. using numpy.amax() function apply numpy.diff() function, get largest difference days. inflammation values decrease along axis, difference one element next negative. interested magnitude change direction, numpy.absolute() function provide . Notice difference get largest absolute difference readings.","code":"print(numpy.mean(data)) 6.14875 maxval, minval, stdval = numpy.amax(data), numpy.amin(data), numpy.std(data)  print('maximum inflammation:', maxval) print('minimum inflammation:', minval) print('standard deviation:', stdval) maximum inflammation: 20.0 minimum inflammation: 0.0 standard deviation: 4.61383319712 patient_0 = data[0, :] # 0 on the first axis (rows), everything on the second (columns) print('maximum inflammation for patient 0:', numpy.amax(patient_0)) maximum inflammation for patient 0: 18.0 print('maximum inflammation for patient 2:', numpy.amax(data[2, :])) maximum inflammation for patient 2: 19.0 print(numpy.mean(data, axis=0)) [  0.           0.45         1.11666667   1.75         2.43333333   3.15    3.8          3.88333333   5.23333333   5.51666667   5.95         5.9    8.35         7.73333333   8.36666667   9.5          9.58333333   10.63333333  11.56666667  12.35        13.25        11.96666667   11.03333333  10.16666667  10.           8.66666667   9.15         7.25    7.33333333   6.58333333   6.06666667   5.95         5.11666667   3.6    3.3          3.56666667   2.48333333   1.5          1.13333333    0.56666667] print(numpy.mean(data, axis=0).shape) (40,) print(numpy.mean(data, axis=1)) [ 5.45   5.425  6.1    5.9    5.55   6.225  5.975  6.65   6.625  6.525   6.775  5.8    6.225  5.75   5.225  6.3    6.55   5.7    5.85   6.55   5.775  5.825  6.175  6.1    5.8    6.425  6.05   6.025  6.175  6.55   6.175  6.35   6.725  6.125  7.075  5.725  5.925  6.15   6.075  5.75   5.975  5.725  6.3    5.9    6.75   5.925  7.225  6.15   5.95   6.275  5.7   6.1    6.825  5.975  6.725  5.7    6.25   6.4    7.05   5.9  ] oxyg en oxygen n e element = 'oxygen' print('last three characters:', element[-3:]) element = 'carpentry' print('last three characters:', element[-3:]) element = 'clone' print('last three characters:', element[-3:]) element = 'hi' print('last three characters:', element[-3:]) last three characters: gen last three characters: try last three characters: one last three characters: hi array([], shape=(0, 0), dtype=float64) array([], shape=(0, 40), dtype=float64) D = numpy.hstack((A[:, :1], A[:, -1:])) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] D = numpy.delete(arr=A, obj=1, axis=1) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] numpy.diff(data, axis=1) numpy.amax(numpy.diff(data, axis=1), axis=1) array([  7.,  12.,  11.,  10.,  11.,  13.,  10.,   8.,  10.,  10.,   7.,          7.,  13.,   7.,  10.,  10.,   8.,  10.,   9.,  10.,  13.,   7.,         12.,   9.,  12.,  11.,  10.,  10.,   7.,  10.,  11.,  10.,   8.,         11.,  12.,  10.,   9.,  10.,  13.,  10.,   7.,   7.,  10.,  13.,         12.,   8.,   8.,  10.,  10.,   9.,   8.,  13.,  10.,   7.,  10.,          8.,  12.,  10.,   7.,  12.]) numpy.amax(numpy.absolute(numpy.diff(data, axis=1)), axis=1) array([ 12.,  14.,  11.,  13.,  11.,  13.,  10.,  12.,  10.,  10.,  10.,         12.,  13.,  10.,  11.,  10.,  12.,  13.,   9.,  10.,  13.,   9.,         12.,   9.,  12.,  11.,  10.,  13.,   9.,  13.,  11.,  11.,   8.,         11.,  12.,  13.,   9.,  10.,  13.,  11.,  11.,  13.,  11.,  13.,         13.,  10.,   9.,  10.,  10.,   9.,   9.,  13.,  10.,   9.,  10.,         11.,  13.,  10.,  10.,  12.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"not-all-functions-have-input","dir":"","previous_headings":"","what":"Not All Functions Have Input","title":null,"text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"mystery-functions-in-ipython","dir":"","previous_headings":"","what":"Mystery Functions in IPython","title":null,"text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"confusing-function-names","dir":"","previous_headings":"","what":"Confusing Function Names","title":null,"text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings","dir":"","previous_headings":"","what":"Slicing Strings","title":null,"text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings-1","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings-2","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-strings-3","dir":"","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"thin-slices","dir":"","previous_headings":"","what":"Thin Slices","title":null,"text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"stacking-arrays","dir":"","previous_headings":"","what":"Stacking Arrays","title":null,"text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"change-in-inflammation","dir":"","previous_headings":"","what":"Change In Inflammation","title":null,"text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"change-in-inflammation-1","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"change-in-inflammation-2","dir":"","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Visualizing Tabular Data  can visualize tabular data Python? can group several plots together? Plot simple graphs data. Plot multiple graphs single figure. mathematician Richard Hamming said, “purpose computing insight, numbers,” best way develop insight often visualize data. Visualization deserves entire lecture , can explore features Python’s matplotlib library . official plotting library, matplotlib de facto standard. First, import pyplot module matplotlib use two functions create display heat map data: row heat map corresponds patient clinical trial dataset, column corresponds day dataset. Blue pixels heat map represent low values, yellow pixels represent high values. can see, general number inflammation flare-ups patients rises falls 40-day period. far good line knowledge clinical trial Dr. Maverick’s claims: patients take medication inflammation flare-ups begin takes around 3 weeks medication take effect begin reducing flare-ups flare-ups appear drop zero end clinical trial. Now let’s take look average inflammation time: , put average inflammation per day across patients variable ave_inflammation, asked matplotlib.pyplot create display line graph values. result reasonably linear rise fall, line Dr. Maverick’s claim medication takes 3 weeks take effect. good data scientist doesn’t just consider average dataset, let’s look two statistics: maximum value rises falls linearly, minimum seems step function. Neither trend seems particularly likely, either ’s mistake calculations something wrong data. insight difficult reach examining numbers without visualization tools.","code":"import matplotlib.pyplot image = matplotlib.pyplot.imshow(data) matplotlib.pyplot.show() ave_inflammation = numpy.mean(data, axis=0) ave_plot = matplotlib.pyplot.plot(ave_inflammation) matplotlib.pyplot.show() max_plot = matplotlib.pyplot.plot(numpy.amax(data, axis=0)) matplotlib.pyplot.show() min_plot = matplotlib.pyplot.plot(numpy.amin(data, axis=0)) matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"mathematician Richard Hamming said, “purpose computing insight, numbers,” best way develop insight often visualize data. Visualization deserves entire lecture , can explore features Python’s matplotlib library . official plotting library, matplotlib de facto standard. First, import pyplot module matplotlib use two functions create display heat map data: row heat map corresponds patient clinical trial dataset, column corresponds day dataset. Blue pixels heat map represent low values, yellow pixels represent high values. can see, general number inflammation flare-ups patients rises falls 40-day period. far good line knowledge clinical trial Dr. Maverick’s claims: patients take medication inflammation flare-ups begin takes around 3 weeks medication take effect begin reducing flare-ups flare-ups appear drop zero end clinical trial. Now let’s take look average inflammation time: , put average inflammation per day across patients variable ave_inflammation, asked matplotlib.pyplot create display line graph values. result reasonably linear rise fall, line Dr. Maverick’s claim medication takes 3 weeks take effect. good data scientist doesn’t just consider average dataset, let’s look two statistics: maximum value rises falls linearly, minimum seems step function. Neither trend seems particularly likely, either ’s mistake calculations something wrong data. insight difficult reach examining numbers without visualization tools.","code":"import matplotlib.pyplot image = matplotlib.pyplot.imshow(data) matplotlib.pyplot.show() ave_inflammation = numpy.mean(data, axis=0) ave_plot = matplotlib.pyplot.plot(ave_inflammation) matplotlib.pyplot.show() max_plot = matplotlib.pyplot.plot(numpy.amax(data, axis=0)) matplotlib.pyplot.show() min_plot = matplotlib.pyplot.plot(numpy.amin(data, axis=0)) matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"episode-prerequisites","dir":"","previous_headings":"","what":"Episode Prerequisites","title":null,"text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"grouping-plots","dir":"","previous_headings":"","what":"Grouping plots","title":null,"text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"importing-libraries-with-shortcuts","dir":"","previous_headings":"","what":"Importing libraries with shortcuts","title":null,"text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"plot-scaling","dir":"","previous_headings":"","what":"Plot Scaling","title":null,"text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"plot-scaling-1","dir":"","previous_headings":"","what":"Plot Scaling (continued)","title":null,"text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"drawing-straight-lines","dir":"","previous_headings":"","what":"Drawing Straight Lines","title":null,"text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"make-your-own-plot","dir":"","previous_headings":"","what":"Make Your Own Plot","title":null,"text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"moving-plots-around","dir":"","previous_headings":"","what":"Moving Plots Around","title":null,"text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Storing Multiple Values Lists  can store many values together? Explain list . Create index lists simple values. Change values individual elements Append values existing list Reorder slice list elements Create manipulate nested lists previous episode, analyzed single file clinical trial inflammation data. However, finding peculiar potentially suspicious trends trial data ask Dr. Maverick performed clinical trials. Surprisingly, say provide us 11 CSV files 11 clinical trials undertaken since initial trial. goal now process inflammation data , means still eleven files go! natural first step collect names files process. Python, list way store multiple values together. episode, learn store multiple values list well work lists. Unlike NumPy arrays, lists built language load library use . create list putting values inside square brackets separating values commas: can access elements list using indices – numbered positions elements list. positions numbered starting 0, first element index 0. Yes, can use negative numbers indices Python. , index -1 gives us last element list, -2 second last, . , odds[3] odds[-1] point element . one important difference lists strings: can change values list, change individual characters string. example: works, : . many ways change contents lists besides assigning new values individual elements: modifying place, useful remember Python treats lists slightly counter-intuitive way. saw earlier, modified mild_salsa list item -place, make list, (attempt ) copy modify list, can cause sorts trouble. also applies modifying list using functions: Python stores list memory, can use multiple names refer list. want copy (simple) list, can use list function, modify list mean : Subsets lists strings can accessed specifying ranges values brackets, similar accessed ranges positions NumPy array. commonly referred “slicing” list/string. Use negative indices count elements end container (list string): obtain every character need provide slice step size 2: can also leave beginning end slice take whole string provide step argument go every second element: want take slice beginning sequence, can omit first index range: similarly, can omit ending index range take slice end sequence: multiplication operator * used list replicates elements list concatenates together: ’s equivalent :","code":"odds = [1, 3, 5, 7] print('odds are:', odds) odds are: [1, 3, 5, 7] print('first element:', odds[0]) print('last element:', odds[3]) print('\"-1\" element:', odds[-1]) first element: 1 last element: 7 \"-1\" element: 7 names = ['Curie', 'Darwing', 'Turing']  # typo in Darwin's name print('names is originally:', names) names[1] = 'Darwin'  # correct the name print('final value of names:', names) names is originally: ['Curie', 'Darwing', 'Turing'] final value of names: ['Curie', 'Darwin', 'Turing'] name = 'Darwin' name[0] = 'd' --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-8-220df48aeb2e> in <module>()       1 name = 'Darwin' ----> 2 name[0] = 'd'  TypeError: 'str' object does not support item assignment odds.append(11) print('odds after adding a value:', odds) odds after adding a value: [1, 3, 5, 7, 11] removed_element = odds.pop(0) print('odds after removing the first element:', odds) print('removed_element:', removed_element) odds after removing the first element: [3, 5, 7, 11] removed_element: 1 odds.reverse() print('odds after reversing:', odds) odds after reversing: [11, 7, 5, 3] odds = [3, 5, 7] primes = odds primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7, 2] odds = [3, 5, 7] primes = list(odds) primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7] binomial_name = 'Drosophila melanogaster' group = binomial_name[0:10] print('group:', group)  species = binomial_name[11:23] print('species:', species)  chromosomes = ['X', 'Y', '2', '3', '4'] autosomes = chromosomes[2:5] print('autosomes:', autosomes)  last = chromosomes[-1] print('last:', last) group: Drosophila species: melanogaster autosomes: ['2', '3', '4'] last: 4 string_for_slicing[-4:] list_for_slicing[-4:] beatles[0:35:2] beatles[::2] date = 'Monday 4 January 2016' day = date[0:6] print('Using 0 to begin range:', day) day = date[:6] print('Omitting beginning index:', day) Using 0 to begin range: Monday Omitting beginning index: Monday months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] sond = months[8:12] print('With known last position:', sond) sond = months[8:len(months)] print('Using len() to get last entry:', sond) sond = months[8:] print('Omitting ending index:', sond) With known last position: ['sep', 'oct', 'nov', 'dec'] Using len() to get last entry: ['sep', 'oct', 'nov', 'dec'] Omitting ending index: ['sep', 'oct', 'nov', 'dec'] [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] counts + counts"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Unlike NumPy arrays, lists built language load library use . create list putting values inside square brackets separating values commas: can access elements list using indices – numbered positions elements list. positions numbered starting 0, first element index 0. Yes, can use negative numbers indices Python. , index -1 gives us last element list, -2 second last, . , odds[3] odds[-1] point element . one important difference lists strings: can change values list, change individual characters string. example: works, : . many ways change contents lists besides assigning new values individual elements: modifying place, useful remember Python treats lists slightly counter-intuitive way. saw earlier, modified mild_salsa list item -place, make list, (attempt ) copy modify list, can cause sorts trouble. also applies modifying list using functions: Python stores list memory, can use multiple names refer list. want copy (simple) list, can use list function, modify list mean : Subsets lists strings can accessed specifying ranges values brackets, similar accessed ranges positions NumPy array. commonly referred “slicing” list/string. Use negative indices count elements end container (list string): obtain every character need provide slice step size 2: can also leave beginning end slice take whole string provide step argument go every second element: want take slice beginning sequence, can omit first index range: similarly, can omit ending index range take slice end sequence: multiplication operator * used list replicates elements list concatenates together: ’s equivalent :","code":"odds = [1, 3, 5, 7] print('odds are:', odds) odds are: [1, 3, 5, 7] print('first element:', odds[0]) print('last element:', odds[3]) print('\"-1\" element:', odds[-1]) first element: 1 last element: 7 \"-1\" element: 7 names = ['Curie', 'Darwing', 'Turing']  # typo in Darwin's name print('names is originally:', names) names[1] = 'Darwin'  # correct the name print('final value of names:', names) names is originally: ['Curie', 'Darwing', 'Turing'] final value of names: ['Curie', 'Darwin', 'Turing'] name = 'Darwin' name[0] = 'd' --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-8-220df48aeb2e> in <module>()       1 name = 'Darwin' ----> 2 name[0] = 'd'  TypeError: 'str' object does not support item assignment odds.append(11) print('odds after adding a value:', odds) odds after adding a value: [1, 3, 5, 7, 11] removed_element = odds.pop(0) print('odds after removing the first element:', odds) print('removed_element:', removed_element) odds after removing the first element: [3, 5, 7, 11] removed_element: 1 odds.reverse() print('odds after reversing:', odds) odds after reversing: [11, 7, 5, 3] odds = [3, 5, 7] primes = odds primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7, 2] odds = [3, 5, 7] primes = list(odds) primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7] binomial_name = 'Drosophila melanogaster' group = binomial_name[0:10] print('group:', group)  species = binomial_name[11:23] print('species:', species)  chromosomes = ['X', 'Y', '2', '3', '4'] autosomes = chromosomes[2:5] print('autosomes:', autosomes)  last = chromosomes[-1] print('last:', last) group: Drosophila species: melanogaster autosomes: ['2', '3', '4'] last: 4 string_for_slicing[-4:] list_for_slicing[-4:] beatles[0:35:2] beatles[::2] date = 'Monday 4 January 2016' day = date[0:6] print('Using 0 to begin range:', day) day = date[:6] print('Omitting beginning index:', day) Using 0 to begin range: Monday Omitting beginning index: Monday months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] sond = months[8:12] print('With known last position:', sond) sond = months[8:len(months)] print('Using len() to get last entry:', sond) sond = months[8:] print('Omitting ending index:', sond) With known last position: ['sep', 'oct', 'nov', 'dec'] Using len() to get last entry: ['sep', 'oct', 'nov', 'dec'] Omitting ending index: ['sep', 'oct', 'nov', 'dec'] [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] counts + counts"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"ch-ch-ch-ch-changes","dir":"","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":null,"text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"nested-lists","dir":"","previous_headings":"","what":"Nested Lists","title":null,"text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"heterogeneous-lists","dir":"","previous_headings":"","what":"Heterogeneous Lists","title":null,"text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"slicing-from-the-end","dir":"","previous_headings":"","what":"Slicing From the End","title":null,"text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"non-continuous-slices","dir":"","previous_headings":"","what":"Non-Continuous Slices","title":null,"text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"overloading","dir":"","previous_headings":"","what":"Overloading","title":null,"text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Repeating Actions Loops  can operations many different values? Explain loop . Correctly write loops repeat simple calculations. Trace changes loop variable loop runs. Trace changes variables updated loop. episode visualizing data, wrote Python code plots values interest first inflammation dataset (inflammation-01.csv), revealed suspicious features . dozen data sets right now potentially way Dr. Maverick can keep surprisingly fast clinical trial rate. want create plots data sets single statement. , ’ll teach computer repeat things. example task might want repeat accessing numbers list, printing number line . Python, list basically ordered collection elements, every element unique number associated — index. means can access elements list using indices. example, can get first number list odds, using odds[0]. One way print number use four print statements: bad approach three reasons: scalable. Imagine need print list hundreds elements. might easier type manually. Difficult maintain. want decorate printed element asterisk character, change four lines code. might problem small lists, definitely problem longer ones. Fragile. use list elements initially envisioned, display part list’s elements. shorter list, hand, cause error trying display elements list exist. ’s better approach: loop shorter — certainly shorter something prints every number hundred-number list — robust well: improved version uses loop repeat operation — case, printing — thing sequence. general form loop : Using odds example , loop might look like : number (num) variable odds looped printed one number another. numbers diagram denote loop cycle number printed (1 first loop cycle, 6 final loop cycle). can call loop variable anything like, must colon end line starting loop, must indent anything want run inside loop. Unlike many languages, command signify end loop body (e.g. end ); everything indented statement belongs loop. ’s another loop repeatedly updates variable: ’s worth tracing execution little program step step. Since three names names, statement line 4 executed three times. first time around, length zero (value assigned line 1) value Curie. statement adds 1 old value length, producing 1, updates length refer new value. next time around, value Darwin length 1, length updated 2. one update, length 3; since nothing left names Python process, loop finishes print function line 5 tells us final answer. Note loop variable variable used record progress loop. still exists loop , can re-use variables previously defined loop variables well: Note also finding length object common operation Python actually built-function called len: len much faster function write , much easier read two-line loop; also give us length many things haven’t met yet, always use can. body loop executed 6 times.","code":"odds = [1, 3, 5, 7] print(odds[0]) print(odds[1]) print(odds[2]) print(odds[3]) 1 3 5 7 odds = [1, 3, 5] print(odds[0]) print(odds[1]) print(odds[2]) print(odds[3]) 1 3 5 --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-3-7974b6cdaf14> in <module>()       3 print(odds[1])       4 print(odds[2]) ----> 5 print(odds[3])  IndexError: list index out of range odds = [1, 3, 5, 7] for num in odds:     print(num) 1 3 5 7 odds = [1, 3, 5, 7, 9, 11] for num in odds:     print(num) 1 3 5 7 9 11 for variable in collection:     # do things using variable, such as print length = 0 names = ['Curie', 'Darwin', 'Turing'] for value in names:     length = length + 1 print('There are', length, 'names in the list.') There are 3 names in the list. name = 'Rosalind' for name in ['Curie', 'Darwin', 'Turing']:     print(name) print('after the loop, name is', name) Curie Darwin Turing after the loop, name is Turing print(len([0, 1, 2, 3])) 4 for number in range(1, 4):     print(number) result = 1 for number in range(0, 3):     result = result * 5 print(result) numbers = [124, 402, 36] summed = 0 for num in numbers:     summed = summed + num print(summed) y = 0 for idx, coef in enumerate(coefs):     y = y + coef * x**idx"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s in a name?","title":null,"text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"from-1-to-n","dir":"","previous_headings":"","what":"From 1 to N","title":null,"text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"understanding-the-loops","dir":"","previous_headings":"","what":"Understanding the loops","title":null,"text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"computing-powers-with-loops","dir":"","previous_headings":"","what":"Computing Powers With Loops","title":null,"text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"summing-a-list","dir":"","previous_headings":"","what":"Summing a list","title":null,"text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"computing-the-value-of-a-polynomial","dir":"","previous_headings":"","what":"Computing the Value of a Polynomial","title":null,"text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Analyzing Data Multiple Files  can operations many different files? Use library function get list filenames match wildcard pattern. Write loop process multiple files. final piece processing inflammation data, need way get list files data directory whose names start inflammation- end .csv. following library help us achieve : glob library contains function, also called glob, finds files directories whose names match pattern. provide patterns strings: character * matches zero characters, ? matches one character. can use get names CSV files current directory: examples show, glob.glob’s result list file directory paths arbitrary order. means can loop something filename turn. case, “something” want generate set plots file inflammation dataset. want start analyzing just first three files alphabetical order, can use sorted built-function generate new sorted list glob.glob output: plots generated second clinical trial file look similar plots first file: average plots show similar “noisy” rises falls; maxima plots show exactly linear rise fall; minima plots show similar staircase structures. third dataset shows much noisier average maxima plots far less suspicious first two datasets, however minima plot shows third dataset minima consistently zero across every day trial. produce heat map third data file see following: can see zero values sporadically distributed across patients days clinical trial, suggesting potential issues data collection throughout trial. addition, can see last patient study didn’t inflammation flare-ups throughout trial, suggesting may even suffer arthritis! spending time investigating heat map statistical plots, well exercises plot differences datasets generate composite patient statistics, gain insight twelve clinical trial datasets. datasets appear fall two categories: seemingly “ideal” datasets agree excellently Dr. Maverick’s claims, display suspicious maxima minima (inflammation-01.csv inflammation-02.csv) “noisy” datasets somewhat agree Dr. Maverick’s claims, show concerning data collection issues sporadic missing values even unsuitable candidate making clinical trial. fact, appears three “noisy” datasets (inflammation-03.csv, inflammation-08.csv, inflammation-11.csv) identical last value. Armed information, confront Dr. Maverick suspicious data duplicated files. Dr. Maverick admitted fabricating clinical data drug trial. discovering initial trial several issues, including unreliable data recording poor participant selection. order prove efficacy drug, created fake data. asked additional data, attempted generate fake datasets, also included original poor-quality dataset several times order make trials seem realistic. Congratulations! ’ve investigated inflammation data proven datasets synthetically generated. shame throw away synthetic datasets taught us much already, ’ll forgive imaginary Dr. Maverick continue use data learn program.","code":"import glob print(glob.glob('inflammation*.csv')) ['inflammation-05.csv', 'inflammation-11.csv', 'inflammation-12.csv', 'inflammation-08.csv', 'inflammation-03.csv', 'inflammation-06.csv', 'inflammation-09.csv', 'inflammation-07.csv', 'inflammation-10.csv', 'inflammation-02.csv', 'inflammation-04.csv', 'inflammation-01.csv'] import glob import numpy import matplotlib.pyplot  filenames = sorted(glob.glob('inflammation*.csv')) filenames = filenames[0:3] for filename in filenames:     print(filename)      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() inflammation-01.csv inflammation-02.csv inflammation-03.csv import glob import numpy import matplotlib.pyplot  filenames = sorted(glob.glob('inflammation*.csv'))  data0 = numpy.loadtxt(fname=filenames[0], delimiter=',') data1 = numpy.loadtxt(fname=filenames[1], delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  matplotlib.pyplot.ylabel('Difference in average') matplotlib.pyplot.plot(numpy.mean(data0, axis=0) - numpy.mean(data1, axis=0))  fig.tight_layout() matplotlib.pyplot.show() import glob import numpy import matplotlib.pyplot  filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40))  for filename in filenames:     data = numpy.loadtxt(fname = filename, delimiter=',')     composite_data = composite_data + data  composite_data = composite_data / len(filenames)  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(composite_data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(composite_data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(composite_data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"plotting-differences","dir":"","previous_headings":"","what":"Plotting Differences","title":null,"text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"generate-composite-statistics","dir":"","previous_headings":"","what":"Generate Composite Statistics","title":null,"text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Making Choices  can programs different things based data values? Write conditional statements including , elif, else branches. Correctly evaluate expressions containing . last lesson, discovered something suspicious going inflammation data drawing plots. can use Python automatically recognize different features saw, take different action ? lesson, ’ll learn write code runs certain conditions true. can ask Python take different actions, depending condition, statement: second line code uses keyword tell Python want make choice. test follows statement true, body (.e., set lines indented underneath ) executed, “greater” printed. test false, body else executed instead, “greater” printed. one ever executed continuing program execution print “done”: Conditional statements don’t include else. isn’t one, Python simply nothing test false: can also chain several tests together using elif, short “else ”. following Python code uses elif print sign number. Note test equality use double equals sign == rather single equals sign = used assign values. can also combine tests using . true parts true: true least one part true: Now ’ve seen conditionals work, can use check suspicious features saw inflammation data. use functions provided numpy module . Therefore, ’re working new Python session, make sure load module data : first couple plots, saw maximum daily inflammation exhibits strange behavior raises one unit day. Wouldn’t good idea detect behavior report suspicious? Let’s ! However, instead checking every single day study, let’s merely check maximum inflammation beginning (day 0) middle (day 20) study equal corresponding day numbers. also saw different problem third dataset; minima per day zero (looks like healthy person snuck study). can also check elif condition: neither conditions true, can use else give -clear: Let’s test : way, asked Python something different depending condition data. printed messages cases, also imagine using else catch-messages printed something wrong, freeing us manually examine every plot features ’ve seen . C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met. built-function abs returns absolute value number: works Booleans True False string representations can printed. pass means “don’t anything”. particular case, ’s actually needed, since num == 0 neither sum needs change, illustrates use elif pass.","code":"num = 37 if num > 100:     print('greater') else:     print('not greater') print('done') not greater done num = 53 print('before conditional...') if num > 100:     print(num, 'is greater than 100') print('...after conditional') before conditional... ...after conditional num = -3  if num > 0:     print(num, 'is positive') elif num == 0:     print(num, 'is zero') else:     print(num, 'is negative') -3 is negative if (1 > 0) and (-1 >= 0):     print('both parts are true') else:     print('at least one part is false') at least one part is false if (1 < 0) or (1 >= 0):     print('at least one test is true') at least one test is true import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Suspicious looking maxima! data = numpy.loadtxt(fname='inflammation-03.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Minima add up to zero! print(abs(-12)) 12 a = 5 b = 5.1  if abs(a - b) <= 0.1 * abs(b):     print('True') else:     print('False') print(abs(a - b) <= 0.1 * abs(b)) positive_sum = 0 negative_sum = 0 test_list = [3, 4, 6, 1, -1, -5, 0, 7, -8] for num in test_list:     if num > 0:         positive_sum += num     elif num == 0:         pass     else:         negative_sum += num print(positive_sum, negative_sum) for filename in filenames:     if filename.startswith('inflammation-'):         large_files.append(filename)     elif filename.startswith('small-'):         small_files.append(filename)     else:         other_files.append(filename)  print('large_files:', large_files) print('small_files:', small_files) print('other_files:', other_files) vowels = 'aeiouAEIOU' sentence = 'Mary had a little lamb.' count = 0 for char in sentence:     if char in vowels:         count += 1  print('The number of vowels in this string is ' + str(count))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"can ask Python take different actions, depending condition, statement: second line code uses keyword tell Python want make choice. test follows statement true, body (.e., set lines indented underneath ) executed, “greater” printed. test false, body else executed instead, “greater” printed. one ever executed continuing program execution print “done”: Conditional statements don’t include else. isn’t one, Python simply nothing test false: can also chain several tests together using elif, short “else ”. following Python code uses elif print sign number. Note test equality use double equals sign == rather single equals sign = used assign values. can also combine tests using . true parts true: true least one part true:","code":"num = 37 if num > 100:     print('greater') else:     print('not greater') print('done') not greater done num = 53 print('before conditional...') if num > 100:     print(num, 'is greater than 100') print('...after conditional') before conditional... ...after conditional num = -3  if num > 0:     print(num, 'is positive') elif num == 0:     print(num, 'is zero') else:     print(num, 'is negative') -3 is negative if (1 > 0) and (-1 >= 0):     print('both parts are true') else:     print('at least one part is false') at least one part is false if (1 < 0) or (1 >= 0):     print('at least one test is true') at least one test is true"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"comparing-in-python","dir":"","previous_headings":"","what":"Comparing in Python","title":null,"text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"true-and-false","dir":"","previous_headings":"","what":"True and False","title":null,"text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen conditionals work, can use check suspicious features saw inflammation data. use functions provided numpy module . Therefore, ’re working new Python session, make sure load module data : first couple plots, saw maximum daily inflammation exhibits strange behavior raises one unit day. Wouldn’t good idea detect behavior report suspicious? Let’s ! However, instead checking every single day study, let’s merely check maximum inflammation beginning (day 0) middle (day 20) study equal corresponding day numbers. also saw different problem third dataset; minima per day zero (looks like healthy person snuck study). can also check elif condition: neither conditions true, can use else give -clear: Let’s test : way, asked Python something different depending condition data. printed messages cases, also imagine using else catch-messages printed something wrong, freeing us manually examine every plot features ’ve seen . C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met. built-function abs returns absolute value number: works Booleans True False string representations can printed. pass means “don’t anything”. particular case, ’s actually needed, since num == 0 neither sum needs change, illustrates use elif pass.","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Suspicious looking maxima! data = numpy.loadtxt(fname='inflammation-03.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Minima add up to zero! print(abs(-12)) 12 a = 5 b = 5.1  if abs(a - b) <= 0.1 * abs(b):     print('True') else:     print('False') print(abs(a - b) <= 0.1 * abs(b)) positive_sum = 0 negative_sum = 0 test_list = [3, 4, 6, 1, -1, -5, 0, 7, -8] for num in test_list:     if num > 0:         positive_sum += num     elif num == 0:         pass     else:         negative_sum += num print(positive_sum, negative_sum) for filename in filenames:     if filename.startswith('inflammation-'):         large_files.append(filename)     elif filename.startswith('small-'):         small_files.append(filename)     else:         other_files.append(filename)  print('large_files:', large_files) print('small_files:', small_files) print('other_files:', other_files) vowels = 'aeiouAEIOU' sentence = 'Mary had a little lamb.' count = 0 for char in sentence:     if char in vowels:         count += 1  print('The number of vowels in this string is ' + str(count))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"how-many-paths","dir":"","previous_headings":"","what":"How Many Paths?","title":null,"text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"what-is-truth","dir":"","previous_headings":"","what":"What Is Truth?","title":null,"text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"thats-not-not-what-i-meant","dir":"","previous_headings":"","what":"That’s Not Not What I Meant","title":null,"text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"close-enough","dir":"","previous_headings":"","what":"Close Enough","title":null,"text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"in-place-operators","dir":"","previous_headings":"","what":"In-Place Operators","title":null,"text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"sorting-a-list-into-buckets","dir":"","previous_headings":"","what":"Sorting a List Into Buckets","title":null,"text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"counting-vowels","dir":"","previous_headings":"","what":"Counting Vowels","title":null,"text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Creating Functions  can define new functions? ’s difference defining calling function? happens call function? Define function takes parameters. Return value function. Test debug function. Set default values function parameters. Explain divide programs small, single-purpose functions. point, ’ve seen code can Python make decisions sees data. want convert data, like taking temperature Fahrenheit converting Celsius. write something like converting single number second number just copy line rename variables trouble soon couple times. Cutting pasting going make code get long repetitive, quickly. ’d like way package code easier reuse, shorthand way re-executing longer pieces code. Python can use ‘functions’. Let’s start defining function fahr_to_celsius converts temperatures Fahrenheit Celsius: function definition opens keyword def followed name function (fahr_to_celsius) parenthesized list parameter names (temp). body function — statements executed runs — indented definition line. body concludes return keyword followed return value. call function, values pass assigned variables can use inside function. Inside function, use return statement send result back whoever asked . Let’s try running function. command call function, using “32” input return function value. fact, calling function different calling function: ’ve successfully called function defined, access value returned. Now ’ve seen turn Fahrenheit Celsius, can also write function turn Celsius Kelvin: converting Fahrenheit Kelvin? write formula, don’t need . Instead, can compose two functions already created: first taste larger programs built: define basic operations, combine ever-larger chunks get effect want. Real-life functions usually larger ones shown — typically half dozen dozen lines — shouldn’t ever much longer , next person reads won’t able understand ’s going . composing temperature conversion functions, created variables inside functions, temp, temp_c, temp_f, temp_k. refer variables local variables longer exist function done executing. try access values outside function, encounter error: want reuse temperature Kelvin calculated fahr_to_kelvin, can store result function call variable: variable temp_kelvin, defined outside function, said global. Inside function, one can read value global variables: Now know wrap bits code functions, can make inflammation analysis easier read easier reuse. First, let’s make visualize function generates plots: another function called detect_problems checks systematics noticed: Wait! Didn’t forget specify functions return? Well, didn’t. Python, functions required include return statement can used sole purpose grouping together pieces code conceptually one thing. cases, function names usually describe , e.g. visualize, detect_problems. Notice rather jumbling code together one giant loop, can now read reuse ideas separately. can reproduce previous analysis much simpler loop: giving functions human-readable names, can easily read understand happening loop. Even better, later date want use either pieces code , can single line. start putting things functions can re-use , need start testing functions working correctly. see , let’s write function offset dataset ’s mean value shifts user-defined value: test actual data, since don’t know values , hard tell result correct. Instead, let’s use NumPy create matrix 0’s offset values mean value 3: looks right, let’s try offset_mean real data: ’s hard tell default output whether result correct, tests can run reassure us: seems almost right: original mean 6.1, lower bound zero now -6.1. mean offset data isn’t quite zero, ’s pretty close. can even go check standard deviation hasn’t changed: values look , probably wouldn’t notice different sixth decimal place. Let’s instead: Everything looks good, probably get back analysis. one task first, though: write documentation function remind later ’s use . usual way put documentation software add comments like : ’s better way, though. first thing function string isn’t assigned variable, string attached function documentation: better can now ask Python’s built-help system show us documentation function: string like called docstring. don’t need use triple quotes write one, , can break string across multiple lines: passed parameters functions two ways: directly, type(data), name, numpy.loadtxt(fname='something.csv', delimiter=','). fact, can pass filename loadtxt without fname=: still need say delimiter=: understand ’s going , make functions easier use, let’s re-define offset_mean function like : key change second parameter now written target_mean_value=0.0 instead just target_mean_value. call function two arguments, works : can also now call just one parameter, case target_mean_value automatically assigned default value 0.0: handy: usually want function work one way, occasionally need something else, can allow people pass parameter need provide default make normal case easier. example shows Python matches values parameters: example shows, parameters matched left right, haven’t given value explicitly get default value. can override behavior naming value pass : hand, let’s look help numpy.loadtxt: ’s lot information , important part first couple lines: tells us loadtxt one parameter called fname doesn’t default value, eight others . call function like : filename assigned fname (want), delimiter string ',' assigned dtype rather delimiter, dtype second parameter list. However ',' isn’t known dtype code produced error message tried run . call loadtxt don’t provide fname= filename ’s first item list, want ',' assigned variable delimiter, provide delimiter= second parameter since delimiter second parameter list. Consider two functions: functions s std_dev computationally equivalent (calculate sample standard deviation), human reader, look different. probably found std_dev much easier read understand s. example illustrates, documentation programmer’s coding style combine determine easy others read understand programmer’s code. Choosing meaningful variable names using blank spaces break code logical “chunks” helpful techniques producing readable code. useful sharing code others, also original programmer. need revisit code wrote months ago haven’t thought since , appreciate value readable code! Python first execute function add = 7 b = 3, , therefore, print 10. However, function add line starts return (return “statement”), , default, return nothing , Python world, called None. Therefore, assigned None last line (print()) print None. result, see: k 0 k inside function f2k doesn’t know k defined outside function. f2k function called, creates local variable k. function return values alter k outside local copy. Therefore original value k remains unchanged. Beware local k created f2k internal statements affect new value . k read, simply retrieve global k value. Attempting define numbers function results 4. SyntaxError. defined parameters two four given default values. one three given default values, required included arguments function called must placed parameters default values function definition. given call func displays : -1 b: 2 c: 6. -1 assigned first parameter , 2 assigned next parameter b, c passed value, uses default value 6.","code":"fahrenheit_val = 99 celsius_val = ((fahrenheit_val - 32) * (5/9)) fahrenheit_val = 99 celsius_val = ((fahrenheit_val - 32) * (5/9))  fahrenheit_val2 = 43 celsius_val2 = ((fahrenheit_val2 - 32) * (5/9)) def explicit_fahr_to_celsius(temp):     # Assign the converted value to a variable     converted = ((temp - 32) * (5/9))     # Return the value of the new variable     return converted      def fahr_to_celsius(temp):     # Return converted value more efficiently using the return     # function without creating a new variable. This code does     # the same thing as the previous function but it is more explicit     # in explaining how the return command works.     return ((temp - 32) * (5/9)) fahr_to_celsius(32) print('freezing point of water:', fahr_to_celsius(32), 'C') print('boiling point of water:', fahr_to_celsius(212), 'C') freezing point of water: 0.0 C boiling point of water: 100.0 C def celsius_to_kelvin(temp_c):     return temp_c + 273.15  print('freezing point of water in Kelvin:', celsius_to_kelvin(0.)) freezing point of water in Kelvin: 273.15 def fahr_to_kelvin(temp_f):     temp_c = fahr_to_celsius(temp_f)     temp_k = celsius_to_kelvin(temp_c)     return temp_k  print('boiling point of water in Kelvin:', fahr_to_kelvin(212.0)) boiling point of water in Kelvin: 373.15 print('Again, temperature in Kelvin was:', temp_k) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-1-eed2471d229b> in <module> ----> 1 print('Again, temperature in Kelvin was:', temp_k)  NameError: name 'temp_k' is not defined temp_kelvin = fahr_to_kelvin(212.0) print('temperature in Kelvin was:', temp_kelvin) temperature in Kelvin was: 373.15 def print_temperatures():     print('temperature in Fahrenheit was:', temp_fahr)     print('temperature in Kelvin was:', temp_kelvin)  temp_fahr = 212.0 temp_kelvin = fahr_to_kelvin(temp_fahr)  print_temperatures() temperature in Fahrenheit was: 212.0 temperature in Kelvin was: 373.15 def visualize(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() def detect_problems(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      if numpy.amax(data, axis=0)[0] == 0 and numpy.amax(data, axis=0)[20] == 20:         print('Suspicious looking maxima!')     elif numpy.sum(numpy.amin(data, axis=0)) == 0:         print('Minima add up to zero!')     else:         print('Seems OK!') filenames = sorted(glob.glob('inflammation*.csv'))  for filename in filenames[:3]:     print(filename)     visualize(filename)     detect_problems(filename) def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value z = numpy.zeros((2, 2)) print(offset_mean(z, 3)) [[ 3.  3.]  [ 3.  3.]] data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(offset_mean(data, 0)) [[-6.14875 -6.14875 -5.14875 ... -3.14875 -6.14875 -6.14875]  [-6.14875 -5.14875 -4.14875 ... -5.14875 -6.14875 -5.14875]  [-6.14875 -5.14875 -5.14875 ... -4.14875 -5.14875 -5.14875]  ...  [-6.14875 -5.14875 -5.14875 ... -5.14875 -5.14875 -5.14875]  [-6.14875 -6.14875 -6.14875 ... -6.14875 -4.14875 -6.14875]  [-6.14875 -6.14875 -5.14875 ... -5.14875 -5.14875 -6.14875]] print('original min, mean, and max are:', numpy.amin(data), numpy.mean(data), numpy.amax(data)) offset_data = offset_mean(data, 0) print('min, mean, and max of offset data are:',       numpy.amin(offset_data),       numpy.mean(offset_data),       numpy.amax(offset_data)) original min, mean, and max are: 0.0 6.14875 20.0 min, mean, and max of offset data are: -6.14875 2.842170943040401e-16 13.85125 print('std dev before and after:', numpy.std(data), numpy.std(offset_data)) std dev before and after: 4.613833197118566 4.613833197118566 print('difference in standard deviations before and after:',       numpy.std(data) - numpy.std(offset_data)) difference in standard deviations before and after: 0.0 # offset_mean(data, target_mean_value): # return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.\"\"\"     return (data - numpy.mean(data)) + target_mean_value help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value  help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.]) numpy.loadtxt('inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) numpy.loadtxt('inflammation-01.csv', ',') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/lib/npyio.py\", line 1041, in loa dtxt     dtype = np.dtype(dtype)   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/core/_internal.py\", line 199, in _commastring     newitem = (dtype, eval(repeats))   File \"<string>\", line 1     ,     ^ SyntaxError: unexpected EOF while parsing def offset_mean(data, target_mean_value=0.0):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value, (0 by default).      Examples     --------     >>> offset_mean([1, 2, 3])     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value test_data = numpy.zeros((2, 2)) print(offset_mean(test_data, 3)) [[ 3.  3.]  [ 3.  3.]] more_data = 5 + numpy.zeros((2, 2)) print('data before mean offset:') print(more_data) print('offset data:') print(offset_mean(more_data)) data before mean offset: [[ 5.  5.]  [ 5.  5.]] offset data: [[ 0.  0.]  [ 0.  0.]] def display(a=1, b=2, c=3):     print('a:', a, 'b:', b, 'c:', c)  print('no parameters:') display() print('one parameter:') display(55) print('two parameters:') display(55, 66) no parameters: a: 1 b: 2 c: 3 one parameter: a: 55 b: 2 c: 3 two parameters: a: 55 b: 66 c: 3 print('only setting the value of c') display(c=77) only setting the value of c a: 1 b: 2 c: 77 help(numpy.loadtxt) Help on function loadtxt in module numpy.lib.npyio:  loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes')     Load data from a text file.      Each row in the text file must have the same number of values.      Parameters     ---------- ... loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes') numpy.loadtxt('inflammation-01.csv', ',') def s(p):     a = 0     for v in p:         a += v     m = a / len(p)     d = 0     for v in p:         d += (v - m) * (v - m)     return numpy.sqrt(d / (len(p) - 1))  def std_dev(sample):     sample_sum = 0     for value in sample:         sample_sum += value      sample_mean = sample_sum / len(sample)      sum_squared_devs = 0     for value in sample:         sum_squared_devs += (value - sample_mean) * (value - sample_mean)      return numpy.sqrt(sum_squared_devs / (len(sample) - 1)) def fence(original, wrapper):     return wrapper + original + wrapper 10 None def outer(input_string):     return input_string[0] + input_string[-1] def rescale(input_array):     L = numpy.amin(input_array)     H = numpy.amax(input_array)     output_array = (input_array - L) / (H - L)     return output_array \"\"\"Takes an array as input, and returns a corresponding array scaled so that 0 corresponds to the minimum and 1 to the maximum value of the input array.  Examples: >>> rescale(numpy.arange(10.0)) array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ]) >>> rescale(numpy.linspace(0, 100, 5)) array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]) \"\"\" def rescale(input_array, low_val=0.0, high_val=1.0):     \"\"\"rescales input array values to lie between low_val and high_val\"\"\"     L = numpy.amin(input_array)     H = numpy.amax(input_array)     intermed_array = (input_array - L) / (H - L)     output_array = intermed_array * (high_val - low_val) + low_val     return output_array 259.81666666666666 278.15 273.15 0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen turn Fahrenheit Celsius, can also write function turn Celsius Kelvin: converting Fahrenheit Kelvin? write formula, don’t need . Instead, can compose two functions already created: first taste larger programs built: define basic operations, combine ever-larger chunks get effect want. Real-life functions usually larger ones shown — typically half dozen dozen lines — shouldn’t ever much longer , next person reads won’t able understand ’s going .","code":"def celsius_to_kelvin(temp_c):     return temp_c + 273.15  print('freezing point of water in Kelvin:', celsius_to_kelvin(0.)) freezing point of water in Kelvin: 273.15 def fahr_to_kelvin(temp_f):     temp_c = fahr_to_celsius(temp_f)     temp_k = celsius_to_kelvin(temp_c)     return temp_k  print('boiling point of water in Kelvin:', fahr_to_kelvin(212.0)) boiling point of water in Kelvin: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"composing temperature conversion functions, created variables inside functions, temp, temp_c, temp_f, temp_k. refer variables local variables longer exist function done executing. try access values outside function, encounter error: want reuse temperature Kelvin calculated fahr_to_kelvin, can store result function call variable: variable temp_kelvin, defined outside function, said global. Inside function, one can read value global variables:","code":"print('Again, temperature in Kelvin was:', temp_k) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-1-eed2471d229b> in <module> ----> 1 print('Again, temperature in Kelvin was:', temp_k)  NameError: name 'temp_k' is not defined temp_kelvin = fahr_to_kelvin(212.0) print('temperature in Kelvin was:', temp_kelvin) temperature in Kelvin was: 373.15 def print_temperatures():     print('temperature in Fahrenheit was:', temp_fahr)     print('temperature in Kelvin was:', temp_kelvin)  temp_fahr = 212.0 temp_kelvin = fahr_to_kelvin(temp_fahr)  print_temperatures() temperature in Fahrenheit was: 212.0 temperature in Kelvin was: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Now know wrap bits code functions, can make inflammation analysis easier read easier reuse. First, let’s make visualize function generates plots: another function called detect_problems checks systematics noticed: Wait! Didn’t forget specify functions return? Well, didn’t. Python, functions required include return statement can used sole purpose grouping together pieces code conceptually one thing. cases, function names usually describe , e.g. visualize, detect_problems. Notice rather jumbling code together one giant loop, can now read reuse ideas separately. can reproduce previous analysis much simpler loop: giving functions human-readable names, can easily read understand happening loop. Even better, later date want use either pieces code , can single line.","code":"def visualize(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() def detect_problems(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      if numpy.amax(data, axis=0)[0] == 0 and numpy.amax(data, axis=0)[20] == 20:         print('Suspicious looking maxima!')     elif numpy.sum(numpy.amin(data, axis=0)) == 0:         print('Minima add up to zero!')     else:         print('Seems OK!') filenames = sorted(glob.glob('inflammation*.csv'))  for filename in filenames[:3]:     print(filename)     visualize(filename)     detect_problems(filename)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"start putting things functions can re-use , need start testing functions working correctly. see , let’s write function offset dataset ’s mean value shifts user-defined value: test actual data, since don’t know values , hard tell result correct. Instead, let’s use NumPy create matrix 0’s offset values mean value 3: looks right, let’s try offset_mean real data: ’s hard tell default output whether result correct, tests can run reassure us: seems almost right: original mean 6.1, lower bound zero now -6.1. mean offset data isn’t quite zero, ’s pretty close. can even go check standard deviation hasn’t changed: values look , probably wouldn’t notice different sixth decimal place. Let’s instead: Everything looks good, probably get back analysis. one task first, though: write documentation function remind later ’s use . usual way put documentation software add comments like : ’s better way, though. first thing function string isn’t assigned variable, string attached function documentation: better can now ask Python’s built-help system show us documentation function: string like called docstring. don’t need use triple quotes write one, , can break string across multiple lines:","code":"def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value z = numpy.zeros((2, 2)) print(offset_mean(z, 3)) [[ 3.  3.]  [ 3.  3.]] data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(offset_mean(data, 0)) [[-6.14875 -6.14875 -5.14875 ... -3.14875 -6.14875 -6.14875]  [-6.14875 -5.14875 -4.14875 ... -5.14875 -6.14875 -5.14875]  [-6.14875 -5.14875 -5.14875 ... -4.14875 -5.14875 -5.14875]  ...  [-6.14875 -5.14875 -5.14875 ... -5.14875 -5.14875 -5.14875]  [-6.14875 -6.14875 -6.14875 ... -6.14875 -4.14875 -6.14875]  [-6.14875 -6.14875 -5.14875 ... -5.14875 -5.14875 -6.14875]] print('original min, mean, and max are:', numpy.amin(data), numpy.mean(data), numpy.amax(data)) offset_data = offset_mean(data, 0) print('min, mean, and max of offset data are:',       numpy.amin(offset_data),       numpy.mean(offset_data),       numpy.amax(offset_data)) original min, mean, and max are: 0.0 6.14875 20.0 min, mean, and max of offset data are: -6.14875 2.842170943040401e-16 13.85125 print('std dev before and after:', numpy.std(data), numpy.std(offset_data)) std dev before and after: 4.613833197118566 4.613833197118566 print('difference in standard deviations before and after:',       numpy.std(data) - numpy.std(offset_data)) difference in standard deviations before and after: 0.0 # offset_mean(data, target_mean_value): # return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.\"\"\"     return (data - numpy.mean(data)) + target_mean_value help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value  help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"passed parameters functions two ways: directly, type(data), name, numpy.loadtxt(fname='something.csv', delimiter=','). fact, can pass filename loadtxt without fname=: still need say delimiter=: understand ’s going , make functions easier use, let’s re-define offset_mean function like : key change second parameter now written target_mean_value=0.0 instead just target_mean_value. call function two arguments, works : can also now call just one parameter, case target_mean_value automatically assigned default value 0.0: handy: usually want function work one way, occasionally need something else, can allow people pass parameter need provide default make normal case easier. example shows Python matches values parameters: example shows, parameters matched left right, haven’t given value explicitly get default value. can override behavior naming value pass : hand, let’s look help numpy.loadtxt: ’s lot information , important part first couple lines: tells us loadtxt one parameter called fname doesn’t default value, eight others . call function like : filename assigned fname (want), delimiter string ',' assigned dtype rather delimiter, dtype second parameter list. However ',' isn’t known dtype code produced error message tried run . call loadtxt don’t provide fname= filename ’s first item list, want ',' assigned variable delimiter, provide delimiter= second parameter since delimiter second parameter list.","code":"numpy.loadtxt('inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) numpy.loadtxt('inflammation-01.csv', ',') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/lib/npyio.py\", line 1041, in loa dtxt     dtype = np.dtype(dtype)   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/core/_internal.py\", line 199, in _commastring     newitem = (dtype, eval(repeats))   File \"<string>\", line 1     ,     ^ SyntaxError: unexpected EOF while parsing def offset_mean(data, target_mean_value=0.0):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value, (0 by default).      Examples     --------     >>> offset_mean([1, 2, 3])     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value test_data = numpy.zeros((2, 2)) print(offset_mean(test_data, 3)) [[ 3.  3.]  [ 3.  3.]] more_data = 5 + numpy.zeros((2, 2)) print('data before mean offset:') print(more_data) print('offset data:') print(offset_mean(more_data)) data before mean offset: [[ 5.  5.]  [ 5.  5.]] offset data: [[ 0.  0.]  [ 0.  0.]] def display(a=1, b=2, c=3):     print('a:', a, 'b:', b, 'c:', c)  print('no parameters:') display() print('one parameter:') display(55) print('two parameters:') display(55, 66) no parameters: a: 1 b: 2 c: 3 one parameter: a: 55 b: 2 c: 3 two parameters: a: 55 b: 66 c: 3 print('only setting the value of c') display(c=77) only setting the value of c a: 1 b: 2 c: 77 help(numpy.loadtxt) Help on function loadtxt in module numpy.lib.npyio:  loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes')     Load data from a text file.      Each row in the text file must have the same number of values.      Parameters     ---------- ... loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes') numpy.loadtxt('inflammation-01.csv', ',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Consider two functions: functions s std_dev computationally equivalent (calculate sample standard deviation), human reader, look different. probably found std_dev much easier read understand s. example illustrates, documentation programmer’s coding style combine determine easy others read understand programmer’s code. Choosing meaningful variable names using blank spaces break code logical “chunks” helpful techniques producing readable code. useful sharing code others, also original programmer. need revisit code wrote months ago haven’t thought since , appreciate value readable code! Python first execute function add = 7 b = 3, , therefore, print 10. However, function add line starts return (return “statement”), , default, return nothing , Python world, called None. Therefore, assigned None last line (print()) print None. result, see: k 0 k inside function f2k doesn’t know k defined outside function. f2k function called, creates local variable k. function return values alter k outside local copy. Therefore original value k remains unchanged. Beware local k created f2k internal statements affect new value . k read, simply retrieve global k value. Attempting define numbers function results 4. SyntaxError. defined parameters two four given default values. one three given default values, required included arguments function called must placed parameters default values function definition. given call func displays : -1 b: 2 c: 6. -1 assigned first parameter , 2 assigned next parameter b, c passed value, uses default value 6.","code":"def s(p):     a = 0     for v in p:         a += v     m = a / len(p)     d = 0     for v in p:         d += (v - m) * (v - m)     return numpy.sqrt(d / (len(p) - 1))  def std_dev(sample):     sample_sum = 0     for value in sample:         sample_sum += value      sample_mean = sample_sum / len(sample)      sum_squared_devs = 0     for value in sample:         sum_squared_devs += (value - sample_mean) * (value - sample_mean)      return numpy.sqrt(sum_squared_devs / (len(sample) - 1)) def fence(original, wrapper):     return wrapper + original + wrapper 10 None def outer(input_string):     return input_string[0] + input_string[-1] def rescale(input_array):     L = numpy.amin(input_array)     H = numpy.amax(input_array)     output_array = (input_array - L) / (H - L)     return output_array \"\"\"Takes an array as input, and returns a corresponding array scaled so that 0 corresponds to the minimum and 1 to the maximum value of the input array.  Examples: >>> rescale(numpy.arange(10.0)) array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ]) >>> rescale(numpy.linspace(0, 100, 5)) array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]) \"\"\" def rescale(input_array, low_val=0.0, high_val=1.0):     \"\"\"rescales input array values to lie between low_val and high_val\"\"\"     L = numpy.amin(input_array)     H = numpy.amax(input_array)     intermed_array = (input_array - L) / (H - L)     output_array = intermed_array * (high_val - low_val) + low_val     return output_array 259.81666666666666 278.15 273.15 0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"combining-strings","dir":"","previous_headings":"","what":"Combining Strings","title":null,"text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"return-versus-print","dir":"","previous_headings":"","what":"Return versus print","title":null,"text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"selecting-characters-from-strings","dir":"","previous_headings":"","what":"Selecting Characters From Strings","title":null,"text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"rescaling-an-array","dir":"","previous_headings":"","what":"Rescaling an Array","title":null,"text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"testing-and-documenting-your-function","dir":"","previous_headings":"","what":"Testing and Documenting Your Function","title":null,"text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"defining-defaults-1","dir":"","previous_headings":"","what":"Defining Defaults","title":null,"text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"variables-inside-and-outside-functions","dir":"","previous_headings":"","what":"Variables Inside and Outside Functions","title":null,"text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"mixing-default-and-non-default-parameters","dir":"","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":null,"text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"readable-code","dir":"","previous_headings":"","what":"Readable Code","title":null,"text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Errors Exceptions  Python report errors? can handle errors Python programs? able read traceback, determine error took place type . able describe types situations syntax errors, indentation errors, name errors, index errors, missing file errors occur. Every programmer encounters errors, just beginning, programming years. Encountering errors exceptions can frustrating times, can make coding feel like hopeless endeavour. However, understanding different types errors likely encounter can help lot. know get certain types errors, become much easier fix. Errors Python specific form, called traceback. Let’s examine one: particular traceback two levels. can determine number levels looking number arrows left hand side. case: first shows code cell , arrow pointing Line 11 (favorite_ice_cream()). second shows code function favorite_ice_cream, arrow pointing Line 9 (print(ice_creams[3])). last level actual place error occurred. level(s) show function program executed get next level . , case, program first performed function call function favorite_ice_cream. Inside function, program encountered error Line 6, tried run code print(ice_creams[3]). error program actually encounter? last line traceback, Python helpfully tells us category type error (case, IndexError) detailed error message (case, says “list index range”). encounter error don’t know means, still important read traceback closely. way, fix error, encounter new one, can tell error changed. Additionally, sometimes knowing error occurred enough fix , even don’t entirely understand message. encounter error don’t recognize, try looking official documentation errors. However, note may always able find error , possible create custom errors. case, hopefully custom error message informative enough help figure went wrong. 3 levels print_message 13 IndexError list index range can infer 7 right index use messages. forget colon end line, accidentally add one space many indenting statement, forget parenthesis, encounter syntax error. means Python couldn’t figure read program. similar forgetting punctuation English: example, text difficult read punctuation also capitalization hard figure sentence ends also figure sentence begins extent might ambiguous sentence break People can typically figure meant text punctuation, people much smarter computers. Python doesn’t know read program, give inform error. example: , Python tells us SyntaxError line 1, even puts little arrow place issue. case problem function definition missing colon end. Actually, function two issues syntax. fix problem colon, see also IndentationError, means lines function definition indentation: SyntaxError IndentationError indicate problem syntax program, IndentationError specific: always means problem code indented. Another common type error called NameError, occurs try use variable exist. example: Variable name errors come informative error messages, usually form “name ‘the_variable_name’ defined”. error message occur? ’s harder question answer, depends code supposed . However, common reasons might undefined variable. first meant use string, forgot put quotes around : second reason might trying use variable yet exist. following example, count defined (e.g., count = 0) loop: Finally, third possibility made typo writing code. Let’s say fixed error adding line Count = 0 loop. Frustratingly, actually fix error. Remember variables case-sensitive, variable count different Count. still get error, still defined count: Next errors containers (like lists strings) items within . try access item list string exist, get error. makes sense: asked someone day like get coffee, answered “caturday”, might bit annoyed. Python gets similarly annoyed try ask item doesn’t exist: , Python telling us IndexError code, meaning tried access list index exist. last type error ’ll cover today associated reading writing files: FileNotFoundError. try read file exist, receive FileNotFoundError telling . attempt write file opened read-, Python 3 returns UnsupportedOperationError. generally, problems input output manifest OSErrors, may show specific subclass; can see list Python docs. unique UNIX errno, can see error message. One reason receiving error specified incorrect path file. example, currently folder called myproject, file myproject/writing/myfile.txt, try open myfile.txt, fail. correct path writing/myfile.txt. also possible file name path contains typo. related issue can occur use “read” flag instead “write” flag. Python give error try open file writing file exist. However, meant open file reading, accidentally opened writing, try read , get UnsupportedOperation error telling file opened reading: common errors files, though many others exist. get error ’ve never seen , searching Internet error type often reveals common reasons might get error. SyntaxError missing (): end first line, IndentationError mismatch second third lines. fixed version : 3 NameErrors number misspelled, message defined, quotes. Fixed version: IndexError; last entry seasons[3], seasons[4] doesn’t make sense. fixed version :","code":"# This code has an intentional error. You can type it directly or # use it for reference to understand the error message below. def favorite_ice_cream():     ice_creams = [         'chocolate',         'vanilla',         'strawberry'     ]     print(ice_creams[3])  favorite_ice_cream() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-1-70bd89baa4df> in <module>()       9     print(ice_creams[3])       10 ----> 11 favorite_ice_cream()  <ipython-input-1-70bd89baa4df> in favorite_ice_cream()       7         'strawberry'       8     ] ----> 9     print(ice_creams[3])       10       11 favorite_ice_cream()  IndexError: list index out of range def some_function()     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-3-6bb841ea1423>\", line 1     def some_function()                        ^ SyntaxError: invalid syntax def some_function():     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-4-ae290e7659cb>\", line 4     return msg     ^ IndentationError: unexpected indent print(a) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-7-9d7b17ad5387> in <module>() ----> 1 print(a)  NameError: name 'a' is not defined print(hello) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-8-9553ee03b645> in <module>() ----> 1 print(hello)  NameError: name 'hello' is not defined for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-9-dd6a12d7ca5c> in <module>()       1 for number in range(10): ----> 2     count = count + number       3 print('The count is:', count)  NameError: name 'count' is not defined Count = 0 for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-10-d77d40059aea> in <module>()       1 Count = 0       2 for number in range(10): ----> 3     count = count + number       4 print('The count is:', count)  NameError: name 'count' is not defined letters = ['a', 'b', 'c'] print('Letter #1 is', letters[0]) print('Letter #2 is', letters[1]) print('Letter #3 is', letters[2]) print('Letter #4 is', letters[3]) Letter #1 is a Letter #2 is b Letter #3 is c --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-11-d817f55b7d6c> in <module>()       3 print('Letter #2 is', letters[1])       4 print('Letter #3 is', letters[2]) ----> 5 print('Letter #4 is', letters[3])  IndexError: list index out of range file_handle = open('myfile.txt', 'r') --------------------------------------------------------------------------- FileNotFoundError                         Traceback (most recent call last) <ipython-input-14-f6e1ac4aee96> in <module>() ----> 1 file_handle = open('myfile.txt', 'r')  FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt' file_handle = open('myfile.txt', 'w') file_handle.read() --------------------------------------------------------------------------- UnsupportedOperation                      Traceback (most recent call last) <ipython-input-15-b846479bc61f> in <module>()       1 file_handle = open('myfile.txt', 'w') ----> 2 file_handle.read()  UnsupportedOperation: not readable def another_function():     print('Syntax errors are annoying.')     print('But at least Python tells us about them!')     print('So they are usually not too hard to fix.') message = '' for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (number % 3) == 0:         message = message + 'a'     else:         message = message + 'b' print(message) seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[-1])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"long-tracebacks","dir":"","previous_headings":"","what":"Long Tracebacks","title":null,"text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"reading-error-messages","dir":"","previous_headings":"","what":"Reading Error Messages","title":null,"text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17 ---> 18 print_sunday_message()      19  <ipython-input-7-3ad455d81842> in print_sunday_message()      14      15 def print_sunday_message(): ---> 16     print_message(7)      17      18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14      15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"better-errors-on-newer-pythons","dir":"","previous_headings":"","what":"Better errors on newer Pythons","title":null,"text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"forget colon end line, accidentally add one space many indenting statement, forget parenthesis, encounter syntax error. means Python couldn’t figure read program. similar forgetting punctuation English: example, text difficult read punctuation also capitalization hard figure sentence ends also figure sentence begins extent might ambiguous sentence break People can typically figure meant text punctuation, people much smarter computers. Python doesn’t know read program, give inform error. example: , Python tells us SyntaxError line 1, even puts little arrow place issue. case problem function definition missing colon end. Actually, function two issues syntax. fix problem colon, see also IndentationError, means lines function definition indentation: SyntaxError IndentationError indicate problem syntax program, IndentationError specific: always means problem code indented.","code":"def some_function()     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-3-6bb841ea1423>\", line 1     def some_function()                        ^ SyntaxError: invalid syntax def some_function():     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-4-ae290e7659cb>\", line 4     return msg     ^ IndentationError: unexpected indent"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"tabs-and-spaces","dir":"","previous_headings":"","what":"Tabs and Spaces","title":null,"text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Another common type error called NameError, occurs try use variable exist. example: Variable name errors come informative error messages, usually form “name ‘the_variable_name’ defined”. error message occur? ’s harder question answer, depends code supposed . However, common reasons might undefined variable. first meant use string, forgot put quotes around : second reason might trying use variable yet exist. following example, count defined (e.g., count = 0) loop: Finally, third possibility made typo writing code. Let’s say fixed error adding line Count = 0 loop. Frustratingly, actually fix error. Remember variables case-sensitive, variable count different Count. still get error, still defined count:","code":"print(a) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-7-9d7b17ad5387> in <module>() ----> 1 print(a)  NameError: name 'a' is not defined print(hello) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-8-9553ee03b645> in <module>() ----> 1 print(hello)  NameError: name 'hello' is not defined for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-9-dd6a12d7ca5c> in <module>()       1 for number in range(10): ----> 2     count = count + number       3 print('The count is:', count)  NameError: name 'count' is not defined Count = 0 for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-10-d77d40059aea> in <module>()       1 Count = 0       2 for number in range(10): ----> 3     count = count + number       4 print('The count is:', count)  NameError: name 'count' is not defined"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Next errors containers (like lists strings) items within . try access item list string exist, get error. makes sense: asked someone day like get coffee, answered “caturday”, might bit annoyed. Python gets similarly annoyed try ask item doesn’t exist: , Python telling us IndexError code, meaning tried access list index exist.","code":"letters = ['a', 'b', 'c'] print('Letter #1 is', letters[0]) print('Letter #2 is', letters[1]) print('Letter #3 is', letters[2]) print('Letter #4 is', letters[3]) Letter #1 is a Letter #2 is b Letter #3 is c --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-11-d817f55b7d6c> in <module>()       3 print('Letter #2 is', letters[1])       4 print('Letter #3 is', letters[2]) ----> 5 print('Letter #4 is', letters[3])  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"last type error ’ll cover today associated reading writing files: FileNotFoundError. try read file exist, receive FileNotFoundError telling . attempt write file opened read-, Python 3 returns UnsupportedOperationError. generally, problems input output manifest OSErrors, may show specific subclass; can see list Python docs. unique UNIX errno, can see error message. One reason receiving error specified incorrect path file. example, currently folder called myproject, file myproject/writing/myfile.txt, try open myfile.txt, fail. correct path writing/myfile.txt. also possible file name path contains typo. related issue can occur use “read” flag instead “write” flag. Python give error try open file writing file exist. However, meant open file reading, accidentally opened writing, try read , get UnsupportedOperation error telling file opened reading: common errors files, though many others exist. get error ’ve never seen , searching Internet error type often reveals common reasons might get error. SyntaxError missing (): end first line, IndentationError mismatch second third lines. fixed version : 3 NameErrors number misspelled, message defined, quotes. Fixed version: IndexError; last entry seasons[3], seasons[4] doesn’t make sense. fixed version :","code":"file_handle = open('myfile.txt', 'r') --------------------------------------------------------------------------- FileNotFoundError                         Traceback (most recent call last) <ipython-input-14-f6e1ac4aee96> in <module>() ----> 1 file_handle = open('myfile.txt', 'r')  FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt' file_handle = open('myfile.txt', 'w') file_handle.read() --------------------------------------------------------------------------- UnsupportedOperation                      Traceback (most recent call last) <ipython-input-15-b846479bc61f> in <module>()       1 file_handle = open('myfile.txt', 'w') ----> 2 file_handle.read()  UnsupportedOperation: not readable def another_function():     print('Syntax errors are annoying.')     print('But at least Python tells us about them!')     print('So they are usually not too hard to fix.') message = '' for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (number % 3) == 0:         message = message + 'a'     else:         message = message + 'b' print(message) seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[-1])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"identifying-syntax-errors","dir":"","previous_headings":"","what":"Identifying Syntax Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"identifying-variable-name-errors","dir":"","previous_headings":"","what":"Identifying Variable Name Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"identifying-index-errors","dir":"","previous_headings":"","what":"Identifying Index Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Defensive Programming  can make programs reliable? Explain assertion . Add assertions check program’s state correct. Correctly add precondition postcondition assertions functions. Explain test-driven development , use creating new functions. Explain variables initialized using actual data values rather arbitrary constants. previous lessons introduced basic tools programming: variables lists, file /O, loops, conditionals, functions. haven’t done show us tell whether program getting right answer, tell ’s still getting right answer make changes . achieve , need : Write programs check operation. Write run tests widely-used functions. Make sure know “correct” actually means. good news , things speed programming, slow . real carpentry — kind done lumber — time saved measuring carefully cutting piece wood much greater time measuring takes. first step toward getting right answers programs assume mistakes happen guard . called defensive programming, common way add assertions code checks runs. assertion simply statement something must true certain point program. Python sees one, evaluates assertion’s condition. ’s true, Python nothing, ’s false, Python halts program immediately prints error message one provided. example, piece code halts soon loop encounters value isn’t positive: Programs like Firefox browser full assertions: 10-20% code contain check 80–90% working correctly. Broadly speaking, assertions fall three categories: precondition something must true start function order work correctly. postcondition something function guarantees true finishes. invariant something always true particular point inside piece code. example, suppose representing rectangles using tuple four coordinates (x0, y0, x1, y1), representing lower left upper right corners rectangle. order calculations, need normalize rectangle lower left corner origin longest side 1.0 units long. function , checks input correctly formatted result makes sense: preconditions lines 6, 8, 9 catch invalid inputs: post-conditions lines 20 21 help us catch bugs telling us calculations might incorrect. example, normalize rectangle taller wide everything seems OK: normalize one ’s wider tall, assertion triggered: Re-reading function, realize line 14 divide dy dx rather dx dy. Jupyter notebook, can display line numbers typing Ctrl+M followed L. left assertion end function, created returned something right shape valid answer, wasn’t. Detecting debugging almost certainly taken time long run writing assertion. assertions aren’t just catching errors: also help people understand programs. assertion gives person reading program chance check (consciously otherwise) understanding matches code . good programmers follow two rules adding assertions code. first , fail early, fail often. greater distance error occurs ’s noticed, harder error debug, good code catches mistakes early possible. second rule , turn bugs assertions tests. Whenever fix bug, write assertion catches mistake make . made mistake piece code, odds good made mistakes nearby, make mistake (related one) next time change . Writing assertions check haven’t regressed (.e., haven’t re-introduced old problem) can save lot time long run, helps warn people reading code (including future self) bit tricky. assertion checks something true particular point program. next step check overall behavior piece code, .e., make sure produces right output ’s given particular input. example, suppose need find two time series overlap. range time series represented pair numbers, time interval started ended. output largest range include: novice programmers solve problem like : Write function range_overlap. Call interactively two three different inputs. produces wrong answer, fix function re-run test. clearly works — , thousands scientists right now — ’s better way: Write short function test. Write range_overlap function pass tests. range_overlap produces wrong answers, fix re-run test functions. Writing tests writing function exercise called test-driven development (TDD). advocates believe produces better code faster : people write tests writing thing tested, subject confirmation bias, .e., subconsciously write tests show code correct, rather find errors. Writing tests helps programmers figure function actually supposed . start defining empty function range_overlap: three test statements range_overlap: error actually reassuring: haven’t implemented logic range_overlap yet, tests passed, indicate ’ve written entirely ineffective test. bonus writing tests, ’ve implicitly defined input output look like: expect list pairs input, produce single pair output. Something important missing, though. don’t tests case ranges don’t overlap : range_overlap case: fail error message, produce special value like (0.0, 0.0) signal ’s overlap, something else? actual implementation function one things; writing tests first helps us figure best ’re emotionally invested whatever happened write realized issue. case? two segments touch endpoints overlap ? Mathematicians usually say “yes”, engineers usually say “”. best answer “whatever useful rest program”, , actual implementation range_overlap going something, whatever consistent ’s overlap . Since ’re planning use range function returns X axis time series chart, decide : every overlap non-zero width, return special value None ’s overlap. None built Python, means “nothing ”. (languages often call equivalent value null nil). decision made, can finish writing last two tests: , get error haven’t written function, ’re now ready : Take moment think calculate left endpoint overlap maximum input left endpoints, overlap right endpoint minimum input right endpoints. ’d now like re-run tests, ’re scattered across three different cells. make running easier, let’s put function: can now test range_overlap single function call: first test supposed produce None fails, know something wrong function. don’t know whether tests passed failed Python halted program soon spotted first error. Still, information better none, trace behavior function input, realize ’re initializing max_left min_right 0.0 1.0 respectively, regardless input values. violates another important rule programming: always initialize data. first assertion checks input sequence values empty. empty sequence [] make fail. second assertion checks value list can turned integer. Input [1, 2, 'c', 3] make fail. third assertion checks total list greater 0. Input [-10, 2, 3] make fail.","code":"numbers = [1.5, 2.3, 0.7, -0.001, 4.4] total = 0.0 for num in numbers:     assert num > 0.0, 'Data should only contain positive values'     total += num print('total is:', total) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-19-33d87ea29ae4> in <module>()       2 total = 0.0       3 for num in numbers: ----> 4     assert num > 0.0, 'Data should only contain positive values'       5     total += num       6 print('total is:', total)  AssertionError: Data should only contain positive values def normalize_rectangle(rect):     \"\"\"Normalizes a rectangle so that it is at the origin and 1.0 units long on its longest axis.     Input should be of the format (x0, y0, x1, y1).     (x0, y0) and (x1, y1) define the lower left and upper right corners     of the rectangle, respectively.\"\"\"     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'     x0, y0, x1, y1 = rect     assert x0 < x1, 'Invalid X coordinates'     assert y0 < y1, 'Invalid Y coordinates'      dx = x1 - x0     dy = y1 - y0     if dx > dy:         scaled = dx / dy         upper_x, upper_y = 1.0, scaled     else:         scaled = dx / dy         upper_x, upper_y = scaled, 1.0      assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid'     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      return (0, 0, upper_x, upper_y) print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-2-1b9cd8e18a1f> in <module> ----> 1 print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       4     (x0, y0) and (x1, y1) define the lower left and upper right corners       5     of the rectangle, respectively.\"\"\" ----> 6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect       8     assert x0 < x1, 'Invalid X coordinates'  AssertionError: Rectangles must contain 4 coordinates print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-3-325036405532> in <module> ----> 1 print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect ----> 8     assert x0 < x1, 'Invalid X coordinates'       9     assert y0 < y1, 'Invalid Y coordinates'      10  AssertionError: Invalid X coordinates print(normalize_rectangle( (0.0, 0.0, 1.0, 5.0) )) (0, 0, 0.2, 1.0) print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) )) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-5-8d4a48f1d068> in <module> ----> 1 print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)      19      20     assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid' ---> 21     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      22      23     return (0, 0, upper_x, upper_y)  AssertionError: Calculated upper Y coordinate invalid def range_overlap(ranges):     pass assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0) assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0) assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-25-d8be150fbef6> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       2 assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)       3 assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)  AssertionError: assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-26-d877ef460ba2> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       2 assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None  AssertionError: def range_overlap(ranges):     \"\"\"Return common overlap among a set of [left, right] ranges.\"\"\"     max_left = 0.0     min_right = 1.0     for (left, right) in ranges:         max_left = max(max_left, left)         min_right = min(min_right, right)     return (max_left, min_right) def test_range_overlap():     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)     assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([]) == None test_range_overlap() --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-29-cf9215c96457> in <module>() ----> 1 test_range_overlap()  <ipython-input-28-5d4cd6fd41d9> in test_range_overlap()       1 def test_range_overlap(): ----> 2     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       3     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None       4     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       5     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)  AssertionError: # a possible pre-condition: assert len(input_array) > 0, 'Array length must be non-zero' # a possible post-condition: assert numpy.amin(input_array) <= average <= numpy.amax(input_array), 'Average should be between min and max of input values (inclusive)'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"first step toward getting right answers programs assume mistakes happen guard . called defensive programming, common way add assertions code checks runs. assertion simply statement something must true certain point program. Python sees one, evaluates assertion’s condition. ’s true, Python nothing, ’s false, Python halts program immediately prints error message one provided. example, piece code halts soon loop encounters value isn’t positive: Programs like Firefox browser full assertions: 10-20% code contain check 80–90% working correctly. Broadly speaking, assertions fall three categories: precondition something must true start function order work correctly. postcondition something function guarantees true finishes. invariant something always true particular point inside piece code. example, suppose representing rectangles using tuple four coordinates (x0, y0, x1, y1), representing lower left upper right corners rectangle. order calculations, need normalize rectangle lower left corner origin longest side 1.0 units long. function , checks input correctly formatted result makes sense: preconditions lines 6, 8, 9 catch invalid inputs: post-conditions lines 20 21 help us catch bugs telling us calculations might incorrect. example, normalize rectangle taller wide everything seems OK: normalize one ’s wider tall, assertion triggered: Re-reading function, realize line 14 divide dy dx rather dx dy. Jupyter notebook, can display line numbers typing Ctrl+M followed L. left assertion end function, created returned something right shape valid answer, wasn’t. Detecting debugging almost certainly taken time long run writing assertion. assertions aren’t just catching errors: also help people understand programs. assertion gives person reading program chance check (consciously otherwise) understanding matches code . good programmers follow two rules adding assertions code. first , fail early, fail often. greater distance error occurs ’s noticed, harder error debug, good code catches mistakes early possible. second rule , turn bugs assertions tests. Whenever fix bug, write assertion catches mistake make . made mistake piece code, odds good made mistakes nearby, make mistake (related one) next time change . Writing assertions check haven’t regressed (.e., haven’t re-introduced old problem) can save lot time long run, helps warn people reading code (including future self) bit tricky.","code":"numbers = [1.5, 2.3, 0.7, -0.001, 4.4] total = 0.0 for num in numbers:     assert num > 0.0, 'Data should only contain positive values'     total += num print('total is:', total) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-19-33d87ea29ae4> in <module>()       2 total = 0.0       3 for num in numbers: ----> 4     assert num > 0.0, 'Data should only contain positive values'       5     total += num       6 print('total is:', total)  AssertionError: Data should only contain positive values def normalize_rectangle(rect):     \"\"\"Normalizes a rectangle so that it is at the origin and 1.0 units long on its longest axis.     Input should be of the format (x0, y0, x1, y1).     (x0, y0) and (x1, y1) define the lower left and upper right corners     of the rectangle, respectively.\"\"\"     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'     x0, y0, x1, y1 = rect     assert x0 < x1, 'Invalid X coordinates'     assert y0 < y1, 'Invalid Y coordinates'      dx = x1 - x0     dy = y1 - y0     if dx > dy:         scaled = dx / dy         upper_x, upper_y = 1.0, scaled     else:         scaled = dx / dy         upper_x, upper_y = scaled, 1.0      assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid'     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      return (0, 0, upper_x, upper_y) print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-2-1b9cd8e18a1f> in <module> ----> 1 print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       4     (x0, y0) and (x1, y1) define the lower left and upper right corners       5     of the rectangle, respectively.\"\"\" ----> 6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect       8     assert x0 < x1, 'Invalid X coordinates'  AssertionError: Rectangles must contain 4 coordinates print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-3-325036405532> in <module> ----> 1 print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect ----> 8     assert x0 < x1, 'Invalid X coordinates'       9     assert y0 < y1, 'Invalid Y coordinates'      10  AssertionError: Invalid X coordinates print(normalize_rectangle( (0.0, 0.0, 1.0, 5.0) )) (0, 0, 0.2, 1.0) print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) )) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-5-8d4a48f1d068> in <module> ----> 1 print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)      19      20     assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid' ---> 21     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      22      23     return (0, 0, upper_x, upper_y)  AssertionError: Calculated upper Y coordinate invalid"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"assertion checks something true particular point program. next step check overall behavior piece code, .e., make sure produces right output ’s given particular input. example, suppose need find two time series overlap. range time series represented pair numbers, time interval started ended. output largest range include: novice programmers solve problem like : Write function range_overlap. Call interactively two three different inputs. produces wrong answer, fix function re-run test. clearly works — , thousands scientists right now — ’s better way: Write short function test. Write range_overlap function pass tests. range_overlap produces wrong answers, fix re-run test functions. Writing tests writing function exercise called test-driven development (TDD). advocates believe produces better code faster : people write tests writing thing tested, subject confirmation bias, .e., subconsciously write tests show code correct, rather find errors. Writing tests helps programmers figure function actually supposed . start defining empty function range_overlap: three test statements range_overlap: error actually reassuring: haven’t implemented logic range_overlap yet, tests passed, indicate ’ve written entirely ineffective test. bonus writing tests, ’ve implicitly defined input output look like: expect list pairs input, produce single pair output. Something important missing, though. don’t tests case ranges don’t overlap : range_overlap case: fail error message, produce special value like (0.0, 0.0) signal ’s overlap, something else? actual implementation function one things; writing tests first helps us figure best ’re emotionally invested whatever happened write realized issue. case? two segments touch endpoints overlap ? Mathematicians usually say “yes”, engineers usually say “”. best answer “whatever useful rest program”, , actual implementation range_overlap going something, whatever consistent ’s overlap . Since ’re planning use range function returns X axis time series chart, decide : every overlap non-zero width, return special value None ’s overlap. None built Python, means “nothing ”. (languages often call equivalent value null nil). decision made, can finish writing last two tests: , get error haven’t written function, ’re now ready : Take moment think calculate left endpoint overlap maximum input left endpoints, overlap right endpoint minimum input right endpoints. ’d now like re-run tests, ’re scattered across three different cells. make running easier, let’s put function: can now test range_overlap single function call: first test supposed produce None fails, know something wrong function. don’t know whether tests passed failed Python halted program soon spotted first error. Still, information better none, trace behavior function input, realize ’re initializing max_left min_right 0.0 1.0 respectively, regardless input values. violates another important rule programming: always initialize data. first assertion checks input sequence values empty. empty sequence [] make fail. second assertion checks value list can turned integer. Input [1, 2, 'c', 3] make fail. third assertion checks total list greater 0. Input [-10, 2, 3] make fail.","code":"def range_overlap(ranges):     pass assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0) assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0) assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-25-d8be150fbef6> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       2 assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)       3 assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)  AssertionError: assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-26-d877ef460ba2> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       2 assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None  AssertionError: def range_overlap(ranges):     \"\"\"Return common overlap among a set of [left, right] ranges.\"\"\"     max_left = 0.0     min_right = 1.0     for (left, right) in ranges:         max_left = max(max_left, left)         min_right = min(min_right, right)     return (max_left, min_right) def test_range_overlap():     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)     assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([]) == None test_range_overlap() --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-29-cf9215c96457> in <module>() ----> 1 test_range_overlap()  <ipython-input-28-5d4cd6fd41d9> in test_range_overlap()       1 def test_range_overlap(): ----> 2     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       3     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None       4     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       5     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)  AssertionError: # a possible pre-condition: assert len(input_array) > 0, 'Array length must be non-zero' # a possible post-condition: assert numpy.amin(input_array) <= average <= numpy.amax(input_array), 'Average should be between min and max of input values (inclusive)'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"pre--and-post-conditions","dir":"","previous_headings":"","what":"Pre- and Post-Conditions","title":null,"text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"testing-assertions","dir":"","previous_headings":"","what":"Testing Assertions","title":null,"text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Debugging  can debug program? Debug code containing error systematically. Identify ways making code less error-prone easily tested. testing uncovered problems, next step fix . Many novices making --less random changes code seems produce right answer, ’s inefficient (result usually correct one case ’re testing). experienced programmer , systematically debug, follow variation rules explained . first step debugging something know ’s supposed . “program doesn’t work” isn’t good enough: order diagnose fix problems, need able tell correct output incorrect. can write test case failing case — .e., can assert inputs, function produce result — ’re ready start debugging. can’t, need figure ’re going know ’ve fixed things. writing test cases scientific software frequently harder writing test cases commercial applications, knew output scientific code supposed , wouldn’t running software: ’d writing results moving next program. practice, scientists tend following: Test simplified data. statistics real data set, try calculating statistics single record, two identical records, two records whose values one step apart, case can calculate right answer hand. Test simplified case. program supposed simulate magnetic eddies rapidly-rotating blobs supercooled helium, first test blob helium isn’t rotating, isn’t subjected external electromagnetic fields. Similarly, ’re looking effects climate change speciation, first test hold temperature, precipitation, factors constant. Compare oracle. test oracle something whose results trusted, experimental data, older program, human expert. use test oracles determine new program produces correct results. test oracle, store output particular cases can compare new results often like without re-running program. Check conservation laws. Mass, energy, quantities conserved physical systems, programs well. Similarly, analyzing patient data, number records either stay decrease move one analysis next (since might throw away outliers records missing values). “new” patients start appearing nowhere move pipeline, ’s probably sign something wrong. Visualize. Data analysts frequently use simple visualizations check science ’re correctness code (just opening lesson tutorial). used debugging last resort, though, since ’s hard compare two visualizations automatically. can debug something fails, second step always find test case makes fail every time. “every time” part important things frustrating debugging intermittent problem: call function dozen times get single failure, odds good ’ll scroll past failure actually occurs. part , ’s always important check code “plugged ”, .e., ’re actually exercising problem think . Every programmer spent hours chasing bug, realize actually calling code wrong data set wrong configuration parameters, using wrong version software entirely. Mistakes like particularly likely happen ’re tired, frustrated, deadline, one reasons late-night (overnight) coding sessions almost never worthwhile. takes 20 minutes bug surface, can three experiments hour. means ’ll get less data time ’re likely distracted things wait program fail, means time spending problem less focused. ’s therefore critical make fail fast. well making program fail fast time, want make fail fast space, .e., want localize failure smallest possible region code: smaller gap cause effect, easier connection find. Many programmers therefore use divide conquer strategy find bugs, .e., output function wrong, check whether things OK middle, concentrate either first second half, . N things can interact N! different ways, every line code isn’t run part test means one thing don’t need worry . Replacing random chunks code unlikely much good. (, got wrong first time, ’ll probably get wrong second third well.) Good programmers therefore change one thing time, reason. either trying gather information (“bug still change order loops?”) test fix (“can make bug go away sorting data processing ?”). Every time make change, however small, re-run tests immediately, things change , harder know ’s responsible (N! interactions ). re-run tests: half fixes made code introduce (re-introduce) bugs, re-running tests tells us whether regressed. Good scientists keep track ’ve done can reproduce work, don’t waste time repeating experiments running ones whose results won’t interesting. Similarly, debugging works best keep track ’ve done well worked. find asking, “left followed right odd number lines cause crash? right followed left? using even number lines?” ’s time step away computer, take deep breath, start working systematically. Records particularly useful time comes ask help. People likely listen us can explain clearly , ’re better able give information need useful. speaking help: can’t find bug 10 minutes, humble ask help. Explaining problem someone else often useful, since hearing ’re thinking helps us spot inconsistencies hidden assumptions. don’t someone nearby share problem description , get rubber duck! Asking help also helps alleviate confirmation bias. just spent hour writing complicated program, want work, ’re likely keep telling , rather searching reason doesn’t. People aren’t emotionally invested code can objective, ’re often able spot simple mistakes overlooked. Part humble learning mistakes. Programmers tend get things wrong : either don’t understand language libraries ’re working , model things work wrong. either case, taking note error occurred checking next time quickly turns making mistake . makes us productive long run. saying goes, week hard work can sometimes save hour thought. train avoid making kinds mistakes, break code modular, testable chunks, turn every assumption (mistake) assertion, actually take us less time produce working programs, .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"first step debugging something know ’s supposed . “program doesn’t work” isn’t good enough: order diagnose fix problems, need able tell correct output incorrect. can write test case failing case — .e., can assert inputs, function produce result — ’re ready start debugging. can’t, need figure ’re going know ’ve fixed things. writing test cases scientific software frequently harder writing test cases commercial applications, knew output scientific code supposed , wouldn’t running software: ’d writing results moving next program. practice, scientists tend following: Test simplified data. statistics real data set, try calculating statistics single record, two identical records, two records whose values one step apart, case can calculate right answer hand. Test simplified case. program supposed simulate magnetic eddies rapidly-rotating blobs supercooled helium, first test blob helium isn’t rotating, isn’t subjected external electromagnetic fields. Similarly, ’re looking effects climate change speciation, first test hold temperature, precipitation, factors constant. Compare oracle. test oracle something whose results trusted, experimental data, older program, human expert. use test oracles determine new program produces correct results. test oracle, store output particular cases can compare new results often like without re-running program. Check conservation laws. Mass, energy, quantities conserved physical systems, programs well. Similarly, analyzing patient data, number records either stay decrease move one analysis next (since might throw away outliers records missing values). “new” patients start appearing nowhere move pipeline, ’s probably sign something wrong. Visualize. Data analysts frequently use simple visualizations check science ’re correctness code (just opening lesson tutorial). used debugging last resort, though, since ’s hard compare two visualizations automatically.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"can debug something fails, second step always find test case makes fail every time. “every time” part important things frustrating debugging intermittent problem: call function dozen times get single failure, odds good ’ll scroll past failure actually occurs. part , ’s always important check code “plugged ”, .e., ’re actually exercising problem think . Every programmer spent hours chasing bug, realize actually calling code wrong data set wrong configuration parameters, using wrong version software entirely. Mistakes like particularly likely happen ’re tired, frustrated, deadline, one reasons late-night (overnight) coding sessions almost never worthwhile.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"takes 20 minutes bug surface, can three experiments hour. means ’ll get less data time ’re likely distracted things wait program fail, means time spending problem less focused. ’s therefore critical make fail fast. well making program fail fast time, want make fail fast space, .e., want localize failure smallest possible region code: smaller gap cause effect, easier connection find. Many programmers therefore use divide conquer strategy find bugs, .e., output function wrong, check whether things OK middle, concentrate either first second half, . N things can interact N! different ways, every line code isn’t run part test means one thing don’t need worry .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Replacing random chunks code unlikely much good. (, got wrong first time, ’ll probably get wrong second third well.) Good programmers therefore change one thing time, reason. either trying gather information (“bug still change order loops?”) test fix (“can make bug go away sorting data processing ?”). Every time make change, however small, re-run tests immediately, things change , harder know ’s responsible (N! interactions ). re-run tests: half fixes made code introduce (re-introduce) bugs, re-running tests tells us whether regressed.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Good scientists keep track ’ve done can reproduce work, don’t waste time repeating experiments running ones whose results won’t interesting. Similarly, debugging works best keep track ’ve done well worked. find asking, “left followed right odd number lines cause crash? right followed left? using even number lines?” ’s time step away computer, take deep breath, start working systematically. Records particularly useful time comes ask help. People likely listen us can explain clearly , ’re better able give information need useful.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"version-control-revisited","dir":"","previous_headings":"","what":"Version Control Revisited","title":null,"text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"speaking help: can’t find bug 10 minutes, humble ask help. Explaining problem someone else often useful, since hearing ’re thinking helps us spot inconsistencies hidden assumptions. don’t someone nearby share problem description , get rubber duck! Asking help also helps alleviate confirmation bias. just spent hour writing complicated program, want work, ’re likely keep telling , rather searching reason doesn’t. People aren’t emotionally invested code can objective, ’re often able spot simple mistakes overlooked. Part humble learning mistakes. Programmers tend get things wrong : either don’t understand language libraries ’re working , model things work wrong. either case, taking note error occurred checking next time quickly turns making mistake . makes us productive long run. saying goes, week hard work can sometimes save hour thought. train avoid making kinds mistakes, break code modular, testable chunks, turn every assumption (mistake) assertion, actually take us less time produce working programs, .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"debug-with-a-neighbor","dir":"","previous_headings":"","what":"Debug With a Neighbor","title":null,"text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"not-supposed-to-be-the-same","dir":"","previous_headings":"","what":"Not Supposed to be the Same","title":null,"text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"suggestions-for-debugging","dir":"","previous_headings":"","what":"Suggestions for debugging","title":null,"text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"bugs-found","dir":"","previous_headings":"","what":"Bugs found","title":null,"text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Command-Line Programs  can write Python programs work like Unix command-line tools? Use values command-line arguments program. Handle flags files separately command-line program. Read data standard input program can used pipeline. Jupyter Notebook interactive tools great prototyping code exploring data, sooner later want use program pipeline run shell script process thousands data files. order efficient way, need make programs work like Unix command-line tools. example, may want program reads dataset prints average inflammation per patient. program exactly want - prints average inflammation per patient given file. might also want look minimum first four lines maximum inflammations several files one another: scripts following: filename given command line, read data standard input. one filenames given, read data report statistics file separately. Use --min, --mean, --max flag determine statistic print. make work, need know handle command-line arguments program, understand handle standard input. ’ll tackle questions turn . going create file python code , use bash shell run code. Using text editor choice, save following text file called sys_version.py: first line imports library called sys, short “system”. defines values sys.version, describes version Python running. can run script command line like : Create another file called argv_list.py save following text . strange name argv stands “argument values”. Whenever Python runs program, takes values given command line puts list sys.argv program can determine . run program arguments: thing list full path script, always sys.argv[0]. run arguments, however: Python adds arguments magic list. hand, let’s build version readings.py always prints per-patient mean single data file. first step write function outlines implementation, placeholder function actual work. convention function usually called main, though can call whatever want: function gets name script sys.argv[0], ’s ’s always put, name file process sys.argv[1]. ’s simple test: output defined function, haven’t actually called . Let’s add call main: run : next step teach program handle multiple files. Since 60 lines output per file lot page , ’ll start using three smaller files, three days data two patients: Using small data files input also allows us check results easily: , example, can see program calculating mean correctly line, whereas really taking faith . yet another rule programming: test simple things first. want program process file separately, need loop executes filename. specify files command line, filenames sys.argv, need careful: sys.argv[0] always name script, rather name file. also need handle unknown number filenames, since program run number files. solution problems loop contents sys.argv[1:]. ‘1’ tells Python start slice location 1, program’s name isn’t included; since ’ve left upper bound, slice runs end list, includes filenames. ’s changed program readings_03.py: action: next step teach program pay attention --min, --mean, --max flags. always appear names files, : works: several things wrong : main large read comfortably. specify least two additional arguments command-line, one flag one filename, one, program throw exception run. assumes file list empty, sys.argv[1] considered action, even filename. Silent failures like always hard debug. program check submitted action one three recognized flags. version pulls processing file loop function . also checks action one allowed flags processing, program fails fast: four lines longer predecessor, broken digestible chunks 8 12 lines. next thing program read data standard input filenames given can put pipeline, redirect input , . Let’s experiment another script called count_stdin.py: little program reads lines special “file” called sys.stdin, automatically connected program’s standard input. don’t open — Python operating system take care program starts — can almost anything regular file. Let’s try running regular command-line program: common mistake try run something reads standard input like : .e., forget < character redirects file standard input. case, ’s nothing standard input, program waits start loop someone type something keyboard. Since ’s way us , program stuck, halt using Interrupt option Kernel menu Notebook. now need rewrite program loads data sys.stdin filenames provided. Luckily, numpy.loadtxt can handle either filename open file first parameter, don’t actually need change process. main changes: Let’s try : ’s better. fact, ’s done: program now everything set .","code":"$ python ../code/readings_04.py --mean inflammation-01.csv 5.45 5.425 6.1 ... 6.4 7.05 5.9 $ head -4 inflammation-01.csv | python ../code/readings_06.py --min $ python ../code/readings_04.py --max inflammation-*.csv import sys print('version is', sys.version) $ python sys_version.py version is 3.4.3+ (default, Jul 28 2015, 13:17:50) [GCC 4.9.3] import sys print('sys.argv is', sys.argv) $ python argv_list.py sys.argv is ['argv_list.py'] $ python argv_list.py first second third sys.argv is ['argv_list.py', 'first', 'second', 'third'] $ cat ../code/readings_01.py import sys import numpy   def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean) $ python ../code/readings_01.py inflammation-01.csv $ cat ../code/readings_02.py import sys import numpy  def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_02.py inflammation-01.csv 5.45 5.425 6.1 5.9 5.55 6.225 5.975 6.65 6.625 6.525 6.775 5.8 6.225 5.75 5.225 6.3 6.55 5.7 5.85 6.55 5.775 5.825 6.175 6.1 5.8 6.425 6.05 6.025 6.175 6.55 6.175 6.35 6.725 6.125 7.075 5.725 5.925 6.15 6.075 5.75 5.975 5.725 6.3 5.9 6.75 5.925 7.225 6.15 5.95 6.275 5.7 6.1 6.825 5.975 6.725 5.7 6.25 6.4 7.05 5.9 $ ls small-*.csv small-01.csv small-02.csv small-03.csv $ cat small-01.csv 0,0,1 0,1,2 $ python ../code/readings_02.py small-01.csv 0.333333333333 1.0 $ cat ../code/readings_03.py import sys import numpy  def main():     script = sys.argv[0]     for filename in sys.argv[1:]:         data = numpy.loadtxt(filename, delimiter=',')         for row_mean in numpy.mean(data, axis=1):             print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_03.py small-01.csv small-02.csv 0.333333333333 1.0 13.6666666667 11.0 $ cat ../code/readings_04.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]      for filename in filenames:         data = numpy.loadtxt(filename, delimiter=',')          if action == '--min':             values = numpy.amin(data, axis=1)         elif action == '--mean':             values = numpy.mean(data, axis=1)         elif action == '--max':             values = numpy.amax(data, axis=1)          for val in values:             print(val)  if __name__ == '__main__':     main() $ python ../code/readings_04.py --max small-01.csv 1.0 2.0 $ cat ../code/readings_05.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     for filename in filenames:         process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ cat ../code/count_stdin.py import sys  count = 0 for line in sys.stdin:     count += 1  print(count, 'lines in standard input') $ python ../code/count_stdin.py < small-01.csv 2 lines in standard input $ python ../code/count_stdin.py small-01.csv $ cat ../code/readings_06.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ python ../code/readings_06.py --mean < small-01.csv 0.333333333333 1.0 import sys  def main():     assert len(sys.argv) == 4, 'Need exactly 3 arguments'      operator = sys.argv[1]     assert operator in ['--add', '--subtract', '--multiply', '--divide'], \\         'Operator is not one of --add, --subtract, --multiply, or --divide: bailing out'     try:         operand1, operand2 = float(sys.argv[2]), float(sys.argv[3])     except ValueError:         print('cannot convert input to a number: bailing out')         return      do_arithmetic(operand1, operator, operand2)  def do_arithmetic(operand1, operator, operand2):      if operator == 'add':         value = operand1 + operand2     elif operator == 'subtract':         value = operand1 - operand2     elif operator == 'multiply':         value = operand1 * operand2     elif operator == 'divide':         value = operand1 / operand2     print(value)  main() import sys import glob  def main():     \"\"\"prints names of all files with sys.argv as suffix\"\"\"     assert len(sys.argv) >= 2, 'Argument list cannot be empty'     suffix = sys.argv[1] # NB: behaviour is not as you'd expect if sys.argv[1] is *     glob_input = '*.' + suffix # construct the input     glob_output = sorted(glob.glob(glob_input)) # call the glob function     for item in glob_output: # print the output         print(item)     return  main() # this is code/readings_07.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['-n', '-m', '-x'], \\            'Action is not one of -n, -m, or -x: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '-n':         values = numpy.amin(data, axis=1)     elif action == '-m':         values = numpy.mean(data, axis=1)     elif action == '-x':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() # this is code/readings_08.py import sys import numpy  def main():     script = sys.argv[0]     if len(sys.argv) == 1:  # no arguments, so print help message         print(\"Usage: python readings_08.py action filenames\\n\"               \"Action:\\n\"               \"    Must be one of --min, --mean, or --max.\\n\"               \"Filenames:\\n\"               \"    If blank, input is taken from standard input (stdin).\\n\"               \"    Otherwise, each filename in the list of arguments is processed in turn.\")         return      action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], (         'Action is not one of --min, --mean, or --max: ' + action)     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() # this is code/readings_09.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     if action not in ['--min', '--mean', '--max']: # if no action given         action = '--mean'    # set a default action, that being mean         filenames = sys.argv[1:] # start the filenames one place earlier in the argv list     else:         filenames = sys.argv[2:]      if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() import sys import numpy  def main():     script = sys.argv[0]     filenames = sys.argv[1:]     if len(filenames) <=1: #nothing to check         print('Only 1 file specified on input')     else:         nrow0, ncol0 = row_col_count(filenames[0])         print('First file %s: %d rows and %d columns' % (filenames[0], nrow0, ncol0))         for filename in filenames[1:]:             nrow, ncol = row_col_count(filename)             if nrow != nrow0 or ncol != ncol0:                 print('File %s does not check: %d rows and %d columns' % (filename, nrow, ncol))             else:                 print('File %s checks' % filename)         return  def row_col_count(filename):     try:         nrow, ncol = numpy.loadtxt(filename, delimiter=',').shape     except ValueError:         # 'ValueError' error is raised when numpy encounters lines that         # have different number of data elements in them than the rest of the lines,         # or when lines have non-numeric elements         nrow, ncol = (0, 0)     return nrow, ncol  main() import sys  def main():     \"\"\"print each input filename and the number of lines in it,        and print the sum of the number of lines\"\"\"     filenames = sys.argv[1:]     sum_nlines = 0 #initialize counting variable      if len(filenames) == 0: # no filenames, just stdin         sum_nlines = count_file_like(sys.stdin)         print('stdin: %d' % sum_nlines)     else:         for filename in filenames:             nlines = count_file(filename)             print('%s %d' % (filename, nlines))             sum_nlines += nlines         print('total: %d' % sum_nlines)  def count_file(filename):     \"\"\"count the number of lines in a file\"\"\"     f = open(filename, 'r')     nlines = len(f.readlines())     f.close()     return(nlines)  def count_file_like(file_like):     \"\"\"count the number of lines in a file-like object (eg stdin)\"\"\"     n = 0     for line in file_like:         n = n+1     return n  main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"switching-to-shell-commands","dir":"","previous_headings":"","what":"Switching to Shell Commands","title":null,"text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"going create file python code , use bash shell run code. Using text editor choice, save following text file called sys_version.py: first line imports library called sys, short “system”. defines values sys.version, describes version Python running. can run script command line like : Create another file called argv_list.py save following text . strange name argv stands “argument values”. Whenever Python runs program, takes values given command line puts list sys.argv program can determine . run program arguments: thing list full path script, always sys.argv[0]. run arguments, however: Python adds arguments magic list. hand, let’s build version readings.py always prints per-patient mean single data file. first step write function outlines implementation, placeholder function actual work. convention function usually called main, though can call whatever want: function gets name script sys.argv[0], ’s ’s always put, name file process sys.argv[1]. ’s simple test: output defined function, haven’t actually called . Let’s add call main: run :","code":"import sys print('version is', sys.version) $ python sys_version.py version is 3.4.3+ (default, Jul 28 2015, 13:17:50) [GCC 4.9.3] import sys print('sys.argv is', sys.argv) $ python argv_list.py sys.argv is ['argv_list.py'] $ python argv_list.py first second third sys.argv is ['argv_list.py', 'first', 'second', 'third'] $ cat ../code/readings_01.py import sys import numpy   def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean) $ python ../code/readings_01.py inflammation-01.csv $ cat ../code/readings_02.py import sys import numpy  def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_02.py inflammation-01.csv 5.45 5.425 6.1 5.9 5.55 6.225 5.975 6.65 6.625 6.525 6.775 5.8 6.225 5.75 5.225 6.3 6.55 5.7 5.85 6.55 5.775 5.825 6.175 6.1 5.8 6.425 6.05 6.025 6.175 6.55 6.175 6.35 6.725 6.125 7.075 5.725 5.925 6.15 6.075 5.75 5.975 5.725 6.3 5.9 6.75 5.925 7.225 6.15 5.95 6.275 5.7 6.1 6.825 5.975 6.725 5.7 6.25 6.4 7.05 5.9"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"running-versus-importing","dir":"","previous_headings":"","what":"Running Versus Importing","title":null,"text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"the-right-way-to-do-it","dir":"","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"next step teach program handle multiple files. Since 60 lines output per file lot page , ’ll start using three smaller files, three days data two patients: Using small data files input also allows us check results easily: , example, can see program calculating mean correctly line, whereas really taking faith . yet another rule programming: test simple things first. want program process file separately, need loop executes filename. specify files command line, filenames sys.argv, need careful: sys.argv[0] always name script, rather name file. also need handle unknown number filenames, since program run number files. solution problems loop contents sys.argv[1:]. ‘1’ tells Python start slice location 1, program’s name isn’t included; since ’ve left upper bound, slice runs end list, includes filenames. ’s changed program readings_03.py: action:","code":"$ ls small-*.csv small-01.csv small-02.csv small-03.csv $ cat small-01.csv 0,0,1 0,1,2 $ python ../code/readings_02.py small-01.csv 0.333333333333 1.0 $ cat ../code/readings_03.py import sys import numpy  def main():     script = sys.argv[0]     for filename in sys.argv[1:]:         data = numpy.loadtxt(filename, delimiter=',')         for row_mean in numpy.mean(data, axis=1):             print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_03.py small-01.csv small-02.csv 0.333333333333 1.0 13.6666666667 11.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"the-right-way-to-do-it-1","dir":"","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"next step teach program pay attention --min, --mean, --max flags. always appear names files, : works: several things wrong : main large read comfortably. specify least two additional arguments command-line, one flag one filename, one, program throw exception run. assumes file list empty, sys.argv[1] considered action, even filename. Silent failures like always hard debug. program check submitted action one three recognized flags. version pulls processing file loop function . also checks action one allowed flags processing, program fails fast: four lines longer predecessor, broken digestible chunks 8 12 lines.","code":"$ cat ../code/readings_04.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]      for filename in filenames:         data = numpy.loadtxt(filename, delimiter=',')          if action == '--min':             values = numpy.amin(data, axis=1)         elif action == '--mean':             values = numpy.mean(data, axis=1)         elif action == '--max':             values = numpy.amax(data, axis=1)          for val in values:             print(val)  if __name__ == '__main__':     main() $ python ../code/readings_04.py --max small-01.csv 1.0 2.0 $ cat ../code/readings_05.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     for filename in filenames:         process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"next thing program read data standard input filenames given can put pipeline, redirect input , . Let’s experiment another script called count_stdin.py: little program reads lines special “file” called sys.stdin, automatically connected program’s standard input. don’t open — Python operating system take care program starts — can almost anything regular file. Let’s try running regular command-line program: common mistake try run something reads standard input like : .e., forget < character redirects file standard input. case, ’s nothing standard input, program waits start loop someone type something keyboard. Since ’s way us , program stuck, halt using Interrupt option Kernel menu Notebook. now need rewrite program loads data sys.stdin filenames provided. Luckily, numpy.loadtxt can handle either filename open file first parameter, don’t actually need change process. main changes: Let’s try : ’s better. fact, ’s done: program now everything set .","code":"$ cat ../code/count_stdin.py import sys  count = 0 for line in sys.stdin:     count += 1  print(count, 'lines in standard input') $ python ../code/count_stdin.py < small-01.csv 2 lines in standard input $ python ../code/count_stdin.py small-01.csv $ cat ../code/readings_06.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ python ../code/readings_06.py --mean < small-01.csv 0.333333333333 1.0 import sys  def main():     assert len(sys.argv) == 4, 'Need exactly 3 arguments'      operator = sys.argv[1]     assert operator in ['--add', '--subtract', '--multiply', '--divide'], \\         'Operator is not one of --add, --subtract, --multiply, or --divide: bailing out'     try:         operand1, operand2 = float(sys.argv[2]), float(sys.argv[3])     except ValueError:         print('cannot convert input to a number: bailing out')         return      do_arithmetic(operand1, operator, operand2)  def do_arithmetic(operand1, operator, operand2):      if operator == 'add':         value = operand1 + operand2     elif operator == 'subtract':         value = operand1 - operand2     elif operator == 'multiply':         value = operand1 * operand2     elif operator == 'divide':         value = operand1 / operand2     print(value)  main() import sys import glob  def main():     \"\"\"prints names of all files with sys.argv as suffix\"\"\"     assert len(sys.argv) >= 2, 'Argument list cannot be empty'     suffix = sys.argv[1] # NB: behaviour is not as you'd expect if sys.argv[1] is *     glob_input = '*.' + suffix # construct the input     glob_output = sorted(glob.glob(glob_input)) # call the glob function     for item in glob_output: # print the output         print(item)     return  main() # this is code/readings_07.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['-n', '-m', '-x'], \\            'Action is not one of -n, -m, or -x: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '-n':         values = numpy.amin(data, axis=1)     elif action == '-m':         values = numpy.mean(data, axis=1)     elif action == '-x':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() # this is code/readings_08.py import sys import numpy  def main():     script = sys.argv[0]     if len(sys.argv) == 1:  # no arguments, so print help message         print(\"Usage: python readings_08.py action filenames\\n\"               \"Action:\\n\"               \"    Must be one of --min, --mean, or --max.\\n\"               \"Filenames:\\n\"               \"    If blank, input is taken from standard input (stdin).\\n\"               \"    Otherwise, each filename in the list of arguments is processed in turn.\")         return      action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], (         'Action is not one of --min, --mean, or --max: ' + action)     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() # this is code/readings_09.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     if action not in ['--min', '--mean', '--max']: # if no action given         action = '--mean'    # set a default action, that being mean         filenames = sys.argv[1:] # start the filenames one place earlier in the argv list     else:         filenames = sys.argv[2:]      if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() import sys import numpy  def main():     script = sys.argv[0]     filenames = sys.argv[1:]     if len(filenames) <=1: #nothing to check         print('Only 1 file specified on input')     else:         nrow0, ncol0 = row_col_count(filenames[0])         print('First file %s: %d rows and %d columns' % (filenames[0], nrow0, ncol0))         for filename in filenames[1:]:             nrow, ncol = row_col_count(filename)             if nrow != nrow0 or ncol != ncol0:                 print('File %s does not check: %d rows and %d columns' % (filename, nrow, ncol))             else:                 print('File %s checks' % filename)         return  def row_col_count(filename):     try:         nrow, ncol = numpy.loadtxt(filename, delimiter=',').shape     except ValueError:         # 'ValueError' error is raised when numpy encounters lines that         # have different number of data elements in them than the rest of the lines,         # or when lines have non-numeric elements         nrow, ncol = (0, 0)     return nrow, ncol  main() import sys  def main():     \"\"\"print each input filename and the number of lines in it,        and print the sum of the number of lines\"\"\"     filenames = sys.argv[1:]     sum_nlines = 0 #initialize counting variable      if len(filenames) == 0: # no filenames, just stdin         sum_nlines = count_file_like(sys.stdin)         print('stdin: %d' % sum_nlines)     else:         for filename in filenames:             nlines = count_file(filename)             print('%s %d' % (filename, nlines))             sum_nlines += nlines         print('total: %d' % sum_nlines)  def count_file(filename):     \"\"\"count the number of lines in a file\"\"\"     f = open(filename, 'r')     nlines = len(f.readlines())     f.close()     return(nlines)  def count_file_like(file_like):     \"\"\"count the number of lines in a file-like object (eg stdin)\"\"\"     n = 0     for line in file_like:         n = n+1     return n  main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"arithmetic-on-the-command-line","dir":"","previous_headings":"","what":"Arithmetic on the Command Line","title":null,"text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"finding-particular-files","dir":"","previous_headings":"","what":"Finding Particular Files","title":null,"text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"changing-flags","dir":"","previous_headings":"","what":"Changing Flags","title":null,"text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"adding-a-help-message","dir":"","previous_headings":"","what":"Adding a Help Message","title":null,"text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"adding-a-default-action","dir":"","previous_headings":"","what":"Adding a Default Action","title":null,"text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"a-file-checker","dir":"","previous_headings":"","what":"A File-Checker","title":null,"text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"counting-lines","dir":"","previous_headings":"","what":"Counting Lines","title":null,"text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":"generate-an-error-message","dir":"","previous_headings":"","what":"Generate an Error Message","title":null,"text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Fail early, fail often. Always initialize data. Know ’s supposed . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble. Test simple things first. remember, week hard work can sometimes save hour thought.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Let’s take closer look happens call fahr_to_celsius(32.0). make things clearer, ’ll start putting initial value 32.0 variable store final result one well: diagram shows memory looks like first line executed: call fahr_to_celsius, Python doesn’t create variable temp right away. Instead, creates something called stack frame keep track variables defined fahr_to_kelvin. Initially, stack frame holds value temp: call fahr_to_kelvin inside fahr_to_celsius, Python creates another stack frame hold fahr_to_kelvin’s variables: now two variables play called temp: parameter fahr_to_celsius, parameter fahr_to_kelvin. two variables name part program ambiguous, Python (every modern programming language) creates new stack frame function call keep function’s variables separate defined functions. call fahr_to_kelvin returns value, Python throws away fahr_to_kelvin’s stack frame creates new variable stack frame fahr_to_celsius hold temperature Kelvin: calls kelvin_to_celsius, means creates stack frame hold function’s variables: , Python throws away stack frame kelvin_to_celsius done creates variable result stack frame fahr_to_celsius: Finally, fahr_to_celsius done, Python throws away stack frame puts result new variable called final lives stack frame started : final stack frame always ; holds variables defined outside functions code. doesn’t hold variables various stack frames. try get value temp functions finished running, Python tells us ’s thing: go trouble? Well, ’s function called span calculates difference minimum maximum values array: Notice span assigns value variable called diff. might well use variable name hold data: don’t expect diff value 20.0 function call, name diff refer thing inside span main body program. yes, probably choose different name diff main program case, don’t want read every line NumPy see variable names functions use calling functions, just case change values variables. big idea encapsulation, ’s key writing correct, comprehensible programs. function’s job turn several operations one can think single function call instead dozen hundred statements time want something. works functions don’t interfere ; , pay attention details , quickly overloads short-term memory.","code":"original = 32.0 final = fahr_to_celsius(original) print('final value of temp after all function calls:', temp) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-12-ffd9b4dbd5f1> in <module>() ----> 1 print('final value of temp after all function calls:', temp)  NameError: name 'temp' is not defined final value of temp after all function calls: import numpy  def span(a):     diff = numpy.amax(a) - numpy.amin(a)     return diff  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print('span of data:', span(data)) span of data: 20.0 diff = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print('span of data:', span(diff)) span of data: 20.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"following-the-call-stack","dir":"","previous_headings":"","what":"Following the Call Stack","title":null,"text":"previously wrote functions called fence outer. Draw diagram showing call stack changes run following:","code":"print(outer(fence('carbon', '+')))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Let’s start creating simple heat maps using library called ipythonblocks. first step create “image”: Unlike import statements seen earlier, one doesn’t load entire ipythonblocks library. Instead, just loads ImageGrid library, since ’s thing need (now). ImageGrid loaded, can use create simple grid colored cells: Just like NumPy array, ImageGrid properties hold information : obvious thing grid like color cells, order , need know computers represent color. common schemes RGB, short “red, green, blue”. RGB additive color model: every shade combination red, green, blue intensities. can think three values axes cube: RGB color example multi-part value: like Cartesian coordinate, one thing several parts. can represent value Python using tuple, write using parentheses instead square brackets used list: can select elements tuples using indexing, just lists arrays: Unlike lists arrays, though, tuples changed created — technical terms, immutable: tuple represents RGB color, red, green, blue components can take values 0 255. upper bound may seem odd, ’s largest number can represented 8-bit byte (.e., 28-1). makes easy computers manipulate colors, providing fine enough gradations fool human eyes, time. Let’s see RGB colors actually look like: Simple color values like (0,255,0) easy enough decipher bit practice, color (214,90,127)? help us, ipythonblocks provides function called show_color: also provides table standard colors:","code":"from ipythonblocks import ImageGrid grid = ImageGrid(5, 3) grid.show() print('grid width:', grid.width) print('grid height:', grid.height) print('grid lines on:', grid.lines_on) grid width: 5 grid height: 3 grid lines on: True position = (12.3, 45.6) print('position is:', position) color = (10, 20, 30) print('color is:', color) position is: (12.3, 45.6) color is: (10, 20, 30) print('first element of color is:', color[0]) first element of color is: 10 color[0] = 40 print('first element of color after change:', color[0]) --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-11-9c3dd30a4e52> in <module>() ----> 1 color[0] = 40 2 print('first element of color after change:', color[0])  TypeError: 'tuple' object does not support item assignment row = ImageGrid(8, 1) row[0, 0] = (0, 0, 0)   # no color => black row[1, 0] = (255, 255, 255) # all colors => white row[2, 0] = (255, 0, 0) # all red row[3, 0] = (0, 255, 0) # all green row[4, 0] = (0, 0, 255) # all blue row[5, 0] = (255, 255, 0) # red and green row[6, 0] = (255, 0, 255) # red and blue row[7, 0] = (0, 255, 255) # green and blue row.show() from ipythonblocks import show_color show_color(214, 90, 127) from ipythonblocks import colors c = ImageGrid(3, 2) c[0, 0] = colors['Fuchsia'] c[0, 1] = colors['Salmon'] c[1, 0] = colors['Orchid'] c[1, 1] = colors['Lavender'] c[2, 0] = colors['LimeGreen'] c[2, 1] = colors['HotPink'] c.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"making-a-colorbar","dir":"","previous_headings":"","what":"Making a Colorbar","title":null,"text":"Fill ____ code create bar changes color dark blue black.","code":"bar = ImageGrid(10, 1) for x in range(10):     bar[x, 0] = (0, 0, ____) bar.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"why-rgb","dir":"","previous_headings":"","what":"Why RGB?","title":null,"text":"computers use red, green, blue primary colors?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"nested-loops","dir":"","previous_headings":"","what":"Nested Loops","title":null,"text":"changing nesting loops code — .e., wrapping Y-axis loop around X-axis loop — change final image? ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"where-to-change-data","dir":"","previous_headings":"","what":"Where to Change Data","title":null,"text":"transpose data outside heat map function? function perform transpose?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/discuss.html","id":"return-versus-display","dir":"","previous_headings":"","what":"Return Versus Display","title":null,"text":"heat map function return grid rather displaying immediately? think good bad design choice?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"swapping-the-contents-of-variables-5-min","dir":"","previous_headings":"","what":"Swapping the contents of variables (5 min)","title":null,"text":"Explain overall effect code : Compare : always thing? find easier read?","code":"left = 'L' right = 'R'  temp = left left = right right = temp left, right = right, left"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"turn-a-string-into-a-list","dir":"","previous_headings":"","what":"Turn a String into a List","title":null,"text":"Use -loop convert string “hello” list letters: Hint: can create empty list like :","code":"[\"h\", \"e\", \"l\", \"l\", \"o\"] my_list = []"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"reverse-a-string","dir":"","previous_headings":"","what":"Reverse a String","title":null,"text":"Knowing two strings can concatenated using + operator, write loop takes string produces new string characters reverse order, 'Newton' becomes 'notweN'.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/extra_exercises.html","id":"fixing-and-testing","dir":"","previous_headings":"","what":"Fixing and Testing","title":null,"text":": “Defensive Programming” Fix range_overlap. Re-run test_range_overlap change make.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"01-intro-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Value 65.0 weight_kg label stuck ’ Image 1 1: ‘Value 65.0 weight_kg label stuck , value 143.0 weight_lb label stuck ’ Image 1 1: ‘Value 100.0 label weight_kg stuck , value 143.0 label weight_lbstuck ’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"02-numpy-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘'data' 3 3 numpy array containing row 0: ['', 'B', 'C'], row 1: ['D', 'E', 'F'], androw 2: ['G', 'H', '']. Starting upper left hand corner, data[0, 0] = '', data[0, 1] = 'B',data[0, 2] = 'C', data[1, 0] = 'D', data[1, 1] = 'E', data[1, 2] = 'F', data[2, 0] = 'G',data[2, 1] = 'H', data[2, 2] = '', bottom right hand corner.’ Image 1 1: ‘Per-patient maximum inflammation computed row-wise across columns usingnumpy.amax(data, axis=1). Per-day average inflammation computed column-wise across rows usingnumpy.mean(data, axis=0).’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"03-matplotlib-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Heat map representing data variable. cell colored value along color gradientfrom blue yellow.’ Image 1 1: ‘line graph showing average inflammation across patients 40-day period.’ Image 1 1: ‘line graph showing maximum inflammation across patients 40-day period.’ Image 1 1: ‘line graph showing minimum inflammation across patients 40-day period.’ Image 1 1: ‘Three line graphs showing daily average, maximum minimum inflammation 40-day period.’ Image 1 1: ‘Three line graphs, step lines connecting points, showing daily average, maximumand minimum inflammation 40-day period.’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"04-lists-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘veg represented shelf full produce. three rows vegetableson shelf, row contains three baskets vegetables. can labeleach basket according type vegetable contains, top rowcontains (left right) lettuce, lettuce, peppers.’ Image 1 1: ‘veg now shown list three rows, veg[0] representing top row ofthree baskets, veg[1] representing second row, veg[2] representing bottom row.’ Image 1 1: ‘veg now shown two-dimensional grid, basket labeled according toits index nested list. first index row number secondindex basket number, veg[1][3] represents basket far rightside second row (basket 4 row 2): zucchini’ reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"05-loop-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Line graphs showing average, maximum minimum inflammation across patients 40-dayperiod.’ Image 1 1: ‘Loop variable 'num' assigned value element list odds turn andthen printed’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"06-files-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Output first iteration loop. Three line graphs showing daily average, maximum minimum inflammation 40-day period patients first dataset.’ Image 1 1: ‘Output second iteration loop. Three line graphs showing daily average, maximum minimum inflammation 40-day period patients seconddataset.’ Image 1 1: ‘Output third iteration loop. Three line graphs showing daily average, maximum minimum inflammation 40-day period patients thirddataset.’ Image 1 1: ‘Heat map third inflammation dataset. Note sporadic zero values throughoutthe entire dataset, last patient zero values 40 day study.’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"07-cond-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘flowchart diagram -else construct tests variable num greater 100’ Image 1 2: ‘flowchart diagram conditional section multiple elif conditions possible outcomes.’ Image 2 2: ‘flowchart diagram conditional section multiple statements possible outcomes.’ C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"08-func-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Labeled parts Python function definition’","code":""},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/images.html","id":"10-defensive-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Graph showing three number lines , bottom, interval overlap.’","code":""},{"path":[]},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"scenario-a-miracle-arthritis-inflammation-cure","dir":"","previous_headings":"","what":"Scenario: A Miracle Arthritis Inflammation Cure","title":null,"text":"imaginary colleague “Dr. Maverick” invented new miracle drug promises cure arthritis inflammation flare-ups 3 weeks since initially taking medication! Naturally, wish see clinical trial data, months asking data finally provided us CSV spreadsheet containing clinical trial data. CSV file contains number inflammation flare-ups per day 60 patients initial clinical trial, trial lasting 40 days. row corresponds patient, column corresponds day trial. patient first inflammation flare-take medication wait weeks take effect reduce flare-ups. see effective treatment like : Calculate average inflammation per day across patients. Plot result discuss share colleagues.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"data-format","dir":"","previous_headings":"","what":"Data Format","title":null,"text":"data sets stored comma-separated values (CSV) format: row holds information single patient, columns represent successive days. first three rows first file look like : number represents number inflammation bouts particular patient experienced given day. example, value “6” row 3 column 7 data set means third patient experiencing inflammation six times seventh day clinical study. order analyze data report colleagues, ’ll learn little bit programming.","code":"0,0,1,3,1,2,4,7,8,3,3,3,10,5,7,4,7,7,12,18,6,13,11,11,7,7,4,6,8,8,4,4,5,7,3,4,2,3,0,0 0,1,2,1,2,1,3,2,2,6,10,11,5,9,4,4,7,16,8,6,18,4,12,5,12,7,11,5,11,3,3,5,4,4,5,5,1,1,0,1 0,1,1,3,3,2,6,2,5,9,5,7,4,5,4,15,5,11,9,10,19,14,12,17,7,12,11,7,4,2,10,5,4,2,2,3,2,2,1,1"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":null,"text":"need understand concepts files directories start Python interpreter tackling lesson. lesson sometimes references Jupyter Notebook although can use Python interpreter mentioned Setup. commands lesson pertain officially supported Python version, currently Python 3.8+. Newer versions usually better error printouts, using newer Python versions recommend possible.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":null,"text":"get started, follow directions Setup page download data install Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"headingSpoiler1","dir":"","previous_headings":"","what":null,"title":null,"text":"lesson designed run personal computer. software data used lesson freely available online, instructions obtain provided . lesson, using Python 3 popular scientific libraries. Although one can install plain-vanilla Python required libraries hand, recommend installing Anaconda, Python distribution comes everything need lesson. Detailed installation instructions various operating systems can found Carpentries template website workshops Anaconda documentation. Download python-novice-inflammation-data.zip python-novice-inflammation-code.zip. Create folder called swc-python Desktop. Move downloaded files swc-python. Unzip files. see two folders called data code swc-python directory Desktop. start working Python, need launch program interpret execute Python commands. list several options. don’t preference, proceed top option list available machine. Otherwise, may use interface like. Jupyter Notebook provides browser-based interface working Python. installed Anaconda, can launch notebook two ways: Launch Anaconda Navigator. might ask ’d like send anonymized usage information Anaconda developers:  Make choice click “Ok, don’t show ” button. Find “Notebook” tab click “Launch” button:  Anaconda open new browser window tab Notebook Dashboard showing contents Home (User) folder. Navigate data directory clicking directory names leading : Desktop, swc-python, data: Launch notebook clicking “New” button selecting “Python 3”: 1. Navigate data directory: ’re using Unix shell application, Terminal app macOS, Console Terminal Linux, Git Bash Windows, execute following command: Windows, can use native Command Prompt program. easiest way start pressing Windows Logo Key+R, entering cmd, hitting Return. Command Prompt, use following command navigate data folder: 2. Start Jupyter server 3. Launch notebook clicking “New” button right selecting “Python 3” drop-menu:   IPython alternative solution situated somewhere plain-vanilla Python interpreter Jupyter Notebook. provides interactive command-line based interpreter various convenience features commands. IPython system installed Anaconda. start using IPython, execute:   launch plain-vanilla Python interpreter, execute: using Git Bash Windows, call Python via winpty:","code":"cd ~/Desktop/swc-python/data cd /D %userprofile%\\Desktop\\swc-python\\data jupyter notebook python -m notebook ipython python winpty python"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"lesson designed run personal computer. software data used lesson freely available online, instructions obtain provided .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"lesson, using Python 3 popular scientific libraries. Although one can install plain-vanilla Python required libraries hand, recommend installing Anaconda, Python distribution comes everything need lesson. Detailed installation instructions various operating systems can found Carpentries template website workshops Anaconda documentation.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Download python-novice-inflammation-data.zip python-novice-inflammation-code.zip. Create folder called swc-python Desktop. Move downloaded files swc-python. Unzip files. see two folders called data code swc-python directory Desktop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"start working Python, need launch program interpret execute Python commands. list several options. don’t preference, proceed top option list available machine. Otherwise, may use interface like.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":"headingSpoiler1","dir":"","previous_headings":"","what":null,"title":null,"text":"Jupyter Notebook provides browser-based interface working Python. installed Anaconda, can launch notebook two ways: Launch Anaconda Navigator. might ask ’d like send anonymized usage information Anaconda developers:  Make choice click “Ok, don’t show ” button. Find “Notebook” tab click “Launch” button:  Anaconda open new browser window tab Notebook Dashboard showing contents Home (User) folder. Navigate data directory clicking directory names leading : Desktop, swc-python, data: Launch notebook clicking “New” button selecting “Python 3”: 1. Navigate data directory: ’re using Unix shell application, Terminal app macOS, Console Terminal Linux, Git Bash Windows, execute following command: Windows, can use native Command Prompt program. easiest way start pressing Windows Logo Key+R, entering cmd, hitting Return. Command Prompt, use following command navigate data folder: 2. Start Jupyter server 3. Launch notebook clicking “New” button right selecting “Python 3” drop-menu:  ","code":"cd ~/Desktop/swc-python/data cd /D %userprofile%\\Desktop\\swc-python\\data jupyter notebook python -m notebook"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"IPython alternative solution situated somewhere plain-vanilla Python interpreter Jupyter Notebook. provides interactive command-line based interpreter various convenience features commands. IPython system installed Anaconda. start using IPython, execute:  ","code":"ipython"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"launch plain-vanilla Python interpreter, execute: using Git Bash Windows, call Python via winpty:","code":"python winpty python"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Python interpreter can used calculator: great interesting. anything useful data, need assign value variable. Python, can assign value variable, using equals sign =. example, can track weight patient weighs 60 kilograms assigning value 60 variable weight_kg: now , whenever use weight_kg, Python substitute value assigned . layperson’s terms, variable name value. Python, variable names: can include letters, digits, underscores start digit case sensitive. means , example: weight0 valid variable name, whereas 0weight weight Weight different variables","code":"3 + 5 * 4 23 weight_kg = 60"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Python knows various types data. Three common ones : integer numbers floating point numbers, strings. example , variable weight_kg integer value 60. want precisely track weight patient, can use floating point value executing: create string, add single double quotes around text. identify track patient throughout study, can assign person unique identifier storing string:","code":"weight_kg = 60.3 patient_id = '001'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"data stored variable names, can make use calculations. may want store patient’s weight pounds well kilograms: might decide add prefix patient identifier:","code":"weight_lb = 2.2 * weight_kg patient_id = 'inflam_' + patient_id"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"carry common tasks data variables Python, language provides us several built-functions. display information screen, use print function: want make use function, referred calling function, follow name parentheses. parentheses important: leave , function doesn’t actually run! Sometimes include values variables inside parentheses function use. case print, use parentheses tell function value want display. learn functions work create later episodes. can display multiple things using one print call: can also call function inside another function call. example, Python built-function called type tells value’s data type: Moreover, can arithmetic variables right inside print function: command, however, change value weight_kg: change value weight_kg variable, assign weight_kg new value using equals = sign:","code":"print(weight_lb) print(patient_id) 132.66 inflam_001 print(patient_id, 'weight in kilograms:', weight_kg) inflam_001 weight in kilograms: 60.3 print(type(60.3)) print(type(patient_id)) <class 'float'> <class 'str'> print('weight in pounds:', 2.2 * weight_kg) weight in pounds: 132.66 print(weight_kg) 60.3 weight_kg = 65.0 print('weight in kilograms is now:', weight_kg) weight in kilograms is now: 65.0 `mass` holds a value of 47.5, `age` does not exist `mass` still holds a value of 47.5, `age` holds a value of 122 `mass` now has a value of 95.0, `age`'s value is still 122 `mass` still has a value of 95.0, `age` now holds 102 Hopper Grace print(type(planet)) print(type(apples)) print(type(distance)) <class 'str'> <class 'int'> <class 'float'>"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"variables-as-sticky-notes","dir":"Instructor","previous_headings":"","what":"Variables as Sticky Notes","title":null,"text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"check-your-understanding","dir":"Instructor","previous_headings":"","what":"Check Your Understanding","title":null,"text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"sorting-out-references","dir":"Instructor","previous_headings":"","what":"Sorting Out References","title":null,"text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":"seeing-data-types","dir":"Instructor","previous_headings":"","what":"Seeing Data Types","title":null,"text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"begin processing clinical trial inflammation data, need load Python. can using library called NumPy, stands Numerical Python. general, use library want fancy things lots numbers, especially matrices arrays. tell Python ’d like start using NumPy, need import : Importing library like getting piece lab equipment storage locker setting bench. Libraries provide additional functionality basic Python package, much like new piece equipment adds functionality lab space. Just like lab, importing many libraries can sometimes complicate slow programs - import need program. ’ve imported library, can ask library read data file us: expression numpy.loadtxt(...) function call asks Python run function loadtxt belongs numpy library. dot notation Python used object attribute/property specifier invoking method. object.property give object.property value, object_name.method() invoke object_name method. example, John Smith John belongs Smith family. use dot notation write name smith.john, just loadtxt function belongs numpy library. numpy.loadtxt two parameters: name file want read delimiter separates values line. need character strings (strings short), put quotes. Since haven’t told anything else function’s output, notebook displays . case, output data just loaded. default, rows columns shown (... omit elements displaying big arrays). Note , save space displaying NumPy arrays, Python show us trailing zeros, 1.0 becomes 1.. call numpy.loadtxt read file didn’t save data memory. , need assign array variable. similar manner assign single value variable, can also assign array values variable using syntax. Let’s re-run numpy.loadtxt save returned data: statement doesn’t produce output ’ve assigned output variable data. want check data loaded, can print variable’s value: Now data memory, can manipulate . First, let’s ask type thing data refers : output tells us data currently refers N-dimensional array, functionality provided NumPy library. data correspond arthritis patients’ inflammation. rows individual patients, columns daily inflammation measurements. following command, can see array’s shape: output tells us data array variable contains 60 rows 40 columns. created variable data store arthritis data, create array; also created information array, called members attributes. extra information describes data way adjective describes noun. data.shape attribute data describes dimensions data. use dotted notation attributes variables use functions libraries part--whole relationship. want get single number array, must provide index square brackets variable name, just math referring element matrix. inflammation data two dimensions, need use two indices refer one specific value: expression data[29, 19] accesses element row 30, column 20. expression may surprise , data[0, 0] might. Programming languages like Fortran, MATLAB R start counting 1 ’s human beings done thousands years. Languages C family (including C++, Java, Perl, Python) count 0 represents offset first value array (second value offset one index first value). closer way computers represent arrays (interested historical reasons behind counting indices zero, can read Mike Hoye’s blog post). result, M×N array Python, indices go 0 M-1 first axis 0 N-1 second. takes bit getting used , one way remember rule index many steps take start get item want.","code":"import numpy numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(data) [[ 0.  0.  1. ...,  3.  0.  0.]  [ 0.  1.  2. ...,  1.  0.  1.]  [ 0.  1.  1. ...,  2.  1.  1.]  ...,  [ 0.  1.  1. ...,  1.  1.  1.]  [ 0.  0.  0. ...,  0.  2.  0.]  [ 0.  0.  1. ...,  1.  1.  0.]] print(type(data)) <class 'numpy.ndarray'> print(data.shape) (60, 40) print('first value in data:', data[0, 0]) first value in data: 0.0 print('middle value in data:', data[29, 19]) middle value in data: 16.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"data-type","dir":"Instructor","previous_headings":"","what":"Data Type","title":null,"text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"in-the-corner","dir":"Instructor","previous_headings":"","what":"In the Corner","title":null,"text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"index like [30, 20] selects single element array, can select whole sections well. example, can select first ten days (columns) values first four patients (rows) like : slice 0:4 means, “Start index 0 go , including, index 4”. , ----including takes bit getting used , rule difference upper lower bounds number values slice. don’t start slices 0: also don’t include upper lower bound slice. don’t include lower bound, Python uses 0 default; don’t include upper, slice runs end axis, don’t include either (.e., use ‘:’ ), slice includes everything: example selects rows 0 2 columns 36 end array.","code":"print(data[0:4, 0:10]) [[ 0.  0.  1.  3.  1.  2.  4.  7.  8.  3.]  [ 0.  1.  2.  1.  2.  1.  3.  2.  2.  6.]  [ 0.  1.  1.  3.  3.  2.  6.  2.  5.  9.]  [ 0.  0.  2.  0.  4.  2.  2.  1.  6.  7.]] print(data[5:10, 0:10]) [[ 0.  0.  1.  2.  2.  4.  2.  1.  6.  4.]  [ 0.  0.  2.  2.  4.  2.  2.  5.  5.  8.]  [ 0.  0.  1.  2.  3.  1.  2.  3.  5.  3.]  [ 0.  0.  0.  3.  1.  5.  6.  5.  5.  8.]  [ 0.  1.  1.  2.  1.  3.  5.  3.  5.  8.]] small = data[:3, 36:] print('small is:') print(small) small is: [[ 2.  3.  0.  0.]  [ 1.  1.  0.  1.]  [ 2.  2.  1.  1.]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"NumPy several useful functions take array input perform operations values. want find average inflammation patients days, example, can ask NumPy compute data’s mean value: mean function takes array argument. Let’s use three NumPy functions get descriptive values dataset. ’ll also use multiple assignment, convenient Python feature enable us one line. ’ve assigned return value numpy.amax(data) variable maxval, value numpy.amin(data) minval, . analyzing data, though, often want look variations statistical values, maximum inflammation per patient average inflammation per day. One way create new temporary array data want, ask calculation: don’t actually need store row variable . Instead, can combine selection function call: need maximum inflammation patient days (next diagram left) average day (diagram right)? diagram shows, want perform operation across axis: support functionality, array functions allow us specify axis want work . ask average across axis 0 (rows 2D example), get: quick check, can ask array shape : expression (40,) tells us N×1 vector, average inflammation per day patients. average across axis 1 (columns 2D example), get: average inflammation per patient across days. Creates substring index 1 (including) final index, effectively removing first last letters ‘oxygen’ ‘gotcha’ array indexing singleton dimensions dropped default. means [:, 0] one dimensional array, won’t stack desired. preserve singleton dimensions, index can slice array. example, [:, :1] returns two dimensional array one singleton dimension (.e. column vector). alternative way achieve result use Numpy’s delete function remove second column . ’re sure parameters numpy.delete mean, use help files. Since row axis (0) patients, make sense get difference two arbitrary patients. column axis (1) days, difference change inflammation – meaningful concept. shape (60, 39) one fewer difference columns columns data. using numpy.amax() function apply numpy.diff() function, get largest difference days. inflammation values decrease along axis, difference one element next negative. interested magnitude change direction, numpy.absolute() function provide . Notice difference get largest absolute difference readings.","code":"print(numpy.mean(data)) 6.14875 maxval, minval, stdval = numpy.amax(data), numpy.amin(data), numpy.std(data)  print('maximum inflammation:', maxval) print('minimum inflammation:', minval) print('standard deviation:', stdval) maximum inflammation: 20.0 minimum inflammation: 0.0 standard deviation: 4.61383319712 patient_0 = data[0, :] # 0 on the first axis (rows), everything on the second (columns) print('maximum inflammation for patient 0:', numpy.amax(patient_0)) maximum inflammation for patient 0: 18.0 print('maximum inflammation for patient 2:', numpy.amax(data[2, :])) maximum inflammation for patient 2: 19.0 print(numpy.mean(data, axis=0)) [  0.           0.45         1.11666667   1.75         2.43333333   3.15    3.8          3.88333333   5.23333333   5.51666667   5.95         5.9    8.35         7.73333333   8.36666667   9.5          9.58333333   10.63333333  11.56666667  12.35        13.25        11.96666667   11.03333333  10.16666667  10.           8.66666667   9.15         7.25    7.33333333   6.58333333   6.06666667   5.95         5.11666667   3.6    3.3          3.56666667   2.48333333   1.5          1.13333333    0.56666667] print(numpy.mean(data, axis=0).shape) (40,) print(numpy.mean(data, axis=1)) [ 5.45   5.425  6.1    5.9    5.55   6.225  5.975  6.65   6.625  6.525   6.775  5.8    6.225  5.75   5.225  6.3    6.55   5.7    5.85   6.55   5.775  5.825  6.175  6.1    5.8    6.425  6.05   6.025  6.175  6.55   6.175  6.35   6.725  6.125  7.075  5.725  5.925  6.15   6.075  5.75   5.975  5.725  6.3    5.9    6.75   5.925  7.225  6.15   5.95   6.275  5.7   6.1    6.825  5.975  6.725  5.7    6.25   6.4    7.05   5.9  ] oxyg en oxygen n e element = 'oxygen' print('last three characters:', element[-3:]) element = 'carpentry' print('last three characters:', element[-3:]) element = 'clone' print('last three characters:', element[-3:]) element = 'hi' print('last three characters:', element[-3:]) last three characters: gen last three characters: try last three characters: one last three characters: hi array([], shape=(0, 0), dtype=float64) array([], shape=(0, 40), dtype=float64) D = numpy.hstack((A[:, :1], A[:, -1:])) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] D = numpy.delete(arr=A, obj=1, axis=1) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] numpy.diff(data, axis=1) numpy.amax(numpy.diff(data, axis=1), axis=1) array([  7.,  12.,  11.,  10.,  11.,  13.,  10.,   8.,  10.,  10.,   7.,          7.,  13.,   7.,  10.,  10.,   8.,  10.,   9.,  10.,  13.,   7.,         12.,   9.,  12.,  11.,  10.,  10.,   7.,  10.,  11.,  10.,   8.,         11.,  12.,  10.,   9.,  10.,  13.,  10.,   7.,   7.,  10.,  13.,         12.,   8.,   8.,  10.,  10.,   9.,   8.,  13.,  10.,   7.,  10.,          8.,  12.,  10.,   7.,  12.]) numpy.amax(numpy.absolute(numpy.diff(data, axis=1)), axis=1) array([ 12.,  14.,  11.,  13.,  11.,  13.,  10.,  12.,  10.,  10.,  10.,         12.,  13.,  10.,  11.,  10.,  12.,  13.,   9.,  10.,  13.,   9.,         12.,   9.,  12.,  11.,  10.,  13.,   9.,  13.,  11.,  11.,   8.,         11.,  12.,  13.,   9.,  10.,  13.,  11.,  11.,  13.,  11.,  13.,         13.,  10.,   9.,  10.,  10.,   9.,   9.,  13.,  10.,   9.,  10.,         11.,  13.,  10.,  10.,  12.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"not-all-functions-have-input","dir":"Instructor","previous_headings":"","what":"Not All Functions Have Input","title":null,"text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"mystery-functions-in-ipython","dir":"Instructor","previous_headings":"","what":"Mystery Functions in IPython","title":null,"text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"confusing-function-names","dir":"Instructor","previous_headings":"","what":"Confusing Function Names","title":null,"text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings","dir":"Instructor","previous_headings":"","what":"Slicing Strings","title":null,"text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings-1","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings-2","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"slicing-strings-3","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"thin-slices","dir":"Instructor","previous_headings":"","what":"Thin Slices","title":null,"text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"stacking-arrays","dir":"Instructor","previous_headings":"","what":"Stacking Arrays","title":null,"text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"change-in-inflammation","dir":"Instructor","previous_headings":"","what":"Change In Inflammation","title":null,"text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"change-in-inflammation-1","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":"change-in-inflammation-2","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/02-numpy.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"mathematician Richard Hamming said, “purpose computing insight, numbers,” best way develop insight often visualize data. Visualization deserves entire lecture , can explore features Python’s matplotlib library . official plotting library, matplotlib de facto standard. First, import pyplot module matplotlib use two functions create display heat map data: row heat map corresponds patient clinical trial dataset, column corresponds day dataset. Blue pixels heat map represent low values, yellow pixels represent high values. can see, general number inflammation flare-ups patients rises falls 40-day period. far good line knowledge clinical trial Dr. Maverick’s claims: patients take medication inflammation flare-ups begin takes around 3 weeks medication take effect begin reducing flare-ups flare-ups appear drop zero end clinical trial. Now let’s take look average inflammation time: , put average inflammation per day across patients variable ave_inflammation, asked matplotlib.pyplot create display line graph values. result reasonably linear rise fall, line Dr. Maverick’s claim medication takes 3 weeks take effect. good data scientist doesn’t just consider average dataset, let’s look two statistics: maximum value rises falls linearly, minimum seems step function. Neither trend seems particularly likely, either ’s mistake calculations something wrong data. insight difficult reach examining numbers without visualization tools.","code":"import matplotlib.pyplot image = matplotlib.pyplot.imshow(data) matplotlib.pyplot.show() ave_inflammation = numpy.mean(data, axis=0) ave_plot = matplotlib.pyplot.plot(ave_inflammation) matplotlib.pyplot.show() max_plot = matplotlib.pyplot.plot(numpy.amax(data, axis=0)) matplotlib.pyplot.show() min_plot = matplotlib.pyplot.plot(numpy.amin(data, axis=0)) matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"episode-prerequisites","dir":"Instructor","previous_headings":"","what":"Episode Prerequisites","title":null,"text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"grouping-plots","dir":"Instructor","previous_headings":"","what":"Grouping plots","title":null,"text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"importing-libraries-with-shortcuts","dir":"Instructor","previous_headings":"","what":"Importing libraries with shortcuts","title":null,"text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"plot-scaling","dir":"Instructor","previous_headings":"","what":"Plot Scaling","title":null,"text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"plot-scaling-1","dir":"Instructor","previous_headings":"","what":"Plot Scaling (continued)","title":null,"text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"drawing-straight-lines","dir":"Instructor","previous_headings":"","what":"Drawing Straight Lines","title":null,"text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"make-your-own-plot","dir":"Instructor","previous_headings":"","what":"Make Your Own Plot","title":null,"text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":"moving-plots-around","dir":"Instructor","previous_headings":"","what":"Moving Plots Around","title":null,"text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/03-matplotlib.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Unlike NumPy arrays, lists built language load library use . create list putting values inside square brackets separating values commas: can access elements list using indices – numbered positions elements list. positions numbered starting 0, first element index 0. Yes, can use negative numbers indices Python. , index -1 gives us last element list, -2 second last, . , odds[3] odds[-1] point element . one important difference lists strings: can change values list, change individual characters string. example: works, : . many ways change contents lists besides assigning new values individual elements: modifying place, useful remember Python treats lists slightly counter-intuitive way. saw earlier, modified mild_salsa list item -place, make list, (attempt ) copy modify list, can cause sorts trouble. also applies modifying list using functions: Python stores list memory, can use multiple names refer list. want copy (simple) list, can use list function, modify list mean : Subsets lists strings can accessed specifying ranges values brackets, similar accessed ranges positions NumPy array. commonly referred “slicing” list/string. Use negative indices count elements end container (list string): obtain every character need provide slice step size 2: can also leave beginning end slice take whole string provide step argument go every second element: want take slice beginning sequence, can omit first index range: similarly, can omit ending index range take slice end sequence: multiplication operator * used list replicates elements list concatenates together: ’s equivalent :","code":"odds = [1, 3, 5, 7] print('odds are:', odds) odds are: [1, 3, 5, 7] print('first element:', odds[0]) print('last element:', odds[3]) print('\"-1\" element:', odds[-1]) first element: 1 last element: 7 \"-1\" element: 7 names = ['Curie', 'Darwing', 'Turing']  # typo in Darwin's name print('names is originally:', names) names[1] = 'Darwin'  # correct the name print('final value of names:', names) names is originally: ['Curie', 'Darwing', 'Turing'] final value of names: ['Curie', 'Darwin', 'Turing'] name = 'Darwin' name[0] = 'd' --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-8-220df48aeb2e> in <module>()       1 name = 'Darwin' ----> 2 name[0] = 'd'  TypeError: 'str' object does not support item assignment odds.append(11) print('odds after adding a value:', odds) odds after adding a value: [1, 3, 5, 7, 11] removed_element = odds.pop(0) print('odds after removing the first element:', odds) print('removed_element:', removed_element) odds after removing the first element: [3, 5, 7, 11] removed_element: 1 odds.reverse() print('odds after reversing:', odds) odds after reversing: [11, 7, 5, 3] odds = [3, 5, 7] primes = odds primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7, 2] odds = [3, 5, 7] primes = list(odds) primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7] binomial_name = 'Drosophila melanogaster' group = binomial_name[0:10] print('group:', group)  species = binomial_name[11:23] print('species:', species)  chromosomes = ['X', 'Y', '2', '3', '4'] autosomes = chromosomes[2:5] print('autosomes:', autosomes)  last = chromosomes[-1] print('last:', last) group: Drosophila species: melanogaster autosomes: ['2', '3', '4'] last: 4 string_for_slicing[-4:] list_for_slicing[-4:] beatles[0:35:2] beatles[::2] date = 'Monday 4 January 2016' day = date[0:6] print('Using 0 to begin range:', day) day = date[:6] print('Omitting beginning index:', day) Using 0 to begin range: Monday Omitting beginning index: Monday months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] sond = months[8:12] print('With known last position:', sond) sond = months[8:len(months)] print('Using len() to get last entry:', sond) sond = months[8:] print('Omitting ending index:', sond) With known last position: ['sep', 'oct', 'nov', 'dec'] Using len() to get last entry: ['sep', 'oct', 'nov', 'dec'] Omitting ending index: ['sep', 'oct', 'nov', 'dec'] [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] counts + counts"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"ch-ch-ch-ch-changes","dir":"Instructor","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":null,"text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"nested-lists","dir":"Instructor","previous_headings":"","what":"Nested Lists","title":null,"text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"heterogeneous-lists","dir":"Instructor","previous_headings":"","what":"Heterogeneous Lists","title":null,"text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"slicing-from-the-end","dir":"Instructor","previous_headings":"","what":"Slicing From the End","title":null,"text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"non-continuous-slices","dir":"Instructor","previous_headings":"","what":"Non-Continuous Slices","title":null,"text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":"overloading","dir":"Instructor","previous_headings":"","what":"Overloading","title":null,"text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/04-lists.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s in a name?","title":null,"text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"from-1-to-n","dir":"Instructor","previous_headings":"","what":"From 1 to N","title":null,"text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"understanding-the-loops","dir":"Instructor","previous_headings":"","what":"Understanding the loops","title":null,"text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"computing-powers-with-loops","dir":"Instructor","previous_headings":"","what":"Computing Powers With Loops","title":null,"text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"summing-a-list","dir":"Instructor","previous_headings":"","what":"Summing a list","title":null,"text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":"computing-the-value-of-a-polynomial","dir":"Instructor","previous_headings":"","what":"Computing the Value of a Polynomial","title":null,"text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/05-loop.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/06-files.html","id":"plotting-differences","dir":"Instructor","previous_headings":"","what":"Plotting Differences","title":null,"text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/06-files.html","id":"generate-composite-statistics","dir":"Instructor","previous_headings":"","what":"Generate Composite Statistics","title":null,"text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/06-files.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"headingInstructor1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"can ask Python take different actions, depending condition, statement: following example lead syntax error Python prompt, seems expect exactly one top-level statement per invocation. Removing print('done') example fix problem. IPython executes example single prompt without throwing error. second line code uses keyword tell Python want make choice. test follows statement true, body (.e., set lines indented underneath ) executed, “greater” printed. test false, body else executed instead, “greater” printed. one ever executed continuing program execution print “done”: Conditional statements don’t include else. isn’t one, Python simply nothing test false: can also chain several tests together using elif, short “else ”. following Python code uses elif print sign number. Note test equality use double equals sign == rather single equals sign = used assign values. can also combine tests using . true parts true: true least one part true:","code":"num = 37 if num > 100:     print('greater') else:     print('not greater') print('done') not greater done num = 53 print('before conditional...') if num > 100:     print(num, 'is greater than 100') print('...after conditional') before conditional... ...after conditional num = -3  if num > 0:     print(num, 'is positive') elif num == 0:     print(num, 'is zero') else:     print(num, 'is negative') -3 is negative if (1 > 0) and (-1 >= 0):     print('both parts are true') else:     print('at least one part is false') at least one part is false if (1 < 0) or (1 >= 0):     print('at least one test is true') at least one test is true"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"comparing-in-python","dir":"Instructor","previous_headings":"","what":"Comparing in Python","title":null,"text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"true-and-false","dir":"Instructor","previous_headings":"","what":"True and False","title":null,"text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen conditionals work, can use check suspicious features saw inflammation data. use functions provided numpy module . Therefore, ’re working new Python session, make sure load module data : first couple plots, saw maximum daily inflammation exhibits strange behavior raises one unit day. Wouldn’t good idea detect behavior report suspicious? Let’s ! However, instead checking every single day study, let’s merely check maximum inflammation beginning (day 0) middle (day 20) study equal corresponding day numbers. also saw different problem third dataset; minima per day zero (looks like healthy person snuck study). can also check elif condition: neither conditions true, can use else give -clear: Let’s test : way, asked Python something different depending condition data. printed messages cases, also imagine using else catch-messages printed something wrong, freeing us manually examine every plot features ’ve seen . C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met. built-function abs returns absolute value number: works Booleans True False string representations can printed. pass means “don’t anything”. particular case, ’s actually needed, since num == 0 neither sum needs change, illustrates use elif pass.","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Suspicious looking maxima! data = numpy.loadtxt(fname='inflammation-03.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Minima add up to zero! print(abs(-12)) 12 a = 5 b = 5.1  if abs(a - b) <= 0.1 * abs(b):     print('True') else:     print('False') print(abs(a - b) <= 0.1 * abs(b)) positive_sum = 0 negative_sum = 0 test_list = [3, 4, 6, 1, -1, -5, 0, 7, -8] for num in test_list:     if num > 0:         positive_sum += num     elif num == 0:         pass     else:         negative_sum += num print(positive_sum, negative_sum) for filename in filenames:     if filename.startswith('inflammation-'):         large_files.append(filename)     elif filename.startswith('small-'):         small_files.append(filename)     else:         other_files.append(filename)  print('large_files:', large_files) print('small_files:', small_files) print('other_files:', other_files) vowels = 'aeiouAEIOU' sentence = 'Mary had a little lamb.' count = 0 for char in sentence:     if char in vowels:         count += 1  print('The number of vowels in this string is ' + str(count))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"how-many-paths","dir":"Instructor","previous_headings":"","what":"How Many Paths?","title":null,"text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"what-is-truth","dir":"Instructor","previous_headings":"","what":"What Is Truth?","title":null,"text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"thats-not-not-what-i-meant","dir":"Instructor","previous_headings":"","what":"That’s Not Not What I Meant","title":null,"text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"close-enough","dir":"Instructor","previous_headings":"","what":"Close Enough","title":null,"text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"in-place-operators","dir":"Instructor","previous_headings":"","what":"In-Place Operators","title":null,"text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"sorting-a-list-into-buckets","dir":"Instructor","previous_headings":"","what":"Sorting a List Into Buckets","title":null,"text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":"counting-vowels","dir":"Instructor","previous_headings":"","what":"Counting Vowels","title":null,"text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/07-cond.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen turn Fahrenheit Celsius, can also write function turn Celsius Kelvin: converting Fahrenheit Kelvin? write formula, don’t need . Instead, can compose two functions already created: first taste larger programs built: define basic operations, combine ever-larger chunks get effect want. Real-life functions usually larger ones shown — typically half dozen dozen lines — shouldn’t ever much longer , next person reads won’t able understand ’s going .","code":"def celsius_to_kelvin(temp_c):     return temp_c + 273.15  print('freezing point of water in Kelvin:', celsius_to_kelvin(0.)) freezing point of water in Kelvin: 273.15 def fahr_to_kelvin(temp_f):     temp_c = fahr_to_celsius(temp_f)     temp_k = celsius_to_kelvin(temp_c)     return temp_k  print('boiling point of water in Kelvin:', fahr_to_kelvin(212.0)) boiling point of water in Kelvin: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"composing temperature conversion functions, created variables inside functions, temp, temp_c, temp_f, temp_k. refer variables local variables longer exist function done executing. try access values outside function, encounter error: want reuse temperature Kelvin calculated fahr_to_kelvin, can store result function call variable: variable temp_kelvin, defined outside function, said global. Inside function, one can read value global variables:","code":"print('Again, temperature in Kelvin was:', temp_k) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-1-eed2471d229b> in <module> ----> 1 print('Again, temperature in Kelvin was:', temp_k)  NameError: name 'temp_k' is not defined temp_kelvin = fahr_to_kelvin(212.0) print('temperature in Kelvin was:', temp_kelvin) temperature in Kelvin was: 373.15 def print_temperatures():     print('temperature in Fahrenheit was:', temp_fahr)     print('temperature in Kelvin was:', temp_kelvin)  temp_fahr = 212.0 temp_kelvin = fahr_to_kelvin(temp_fahr)  print_temperatures() temperature in Fahrenheit was: 212.0 temperature in Kelvin was: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Now know wrap bits code functions, can make inflammation analysis easier read easier reuse. First, let’s make visualize function generates plots: another function called detect_problems checks systematics noticed: Wait! Didn’t forget specify functions return? Well, didn’t. Python, functions required include return statement can used sole purpose grouping together pieces code conceptually one thing. cases, function names usually describe , e.g. visualize, detect_problems. Notice rather jumbling code together one giant loop, can now read reuse ideas separately. can reproduce previous analysis much simpler loop: giving functions human-readable names, can easily read understand happening loop. Even better, later date want use either pieces code , can single line.","code":"def visualize(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() def detect_problems(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      if numpy.amax(data, axis=0)[0] == 0 and numpy.amax(data, axis=0)[20] == 20:         print('Suspicious looking maxima!')     elif numpy.sum(numpy.amin(data, axis=0)) == 0:         print('Minima add up to zero!')     else:         print('Seems OK!') filenames = sorted(glob.glob('inflammation*.csv'))  for filename in filenames[:3]:     print(filename)     visualize(filename)     detect_problems(filename)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"start putting things functions can re-use , need start testing functions working correctly. see , let’s write function offset dataset ’s mean value shifts user-defined value: test actual data, since don’t know values , hard tell result correct. Instead, let’s use NumPy create matrix 0’s offset values mean value 3: looks right, let’s try offset_mean real data: ’s hard tell default output whether result correct, tests can run reassure us: seems almost right: original mean 6.1, lower bound zero now -6.1. mean offset data isn’t quite zero, ’s pretty close. can even go check standard deviation hasn’t changed: values look , probably wouldn’t notice different sixth decimal place. Let’s instead: Everything looks good, probably get back analysis. one task first, though: write documentation function remind later ’s use . usual way put documentation software add comments like : ’s better way, though. first thing function string isn’t assigned variable, string attached function documentation: better can now ask Python’s built-help system show us documentation function: string like called docstring. don’t need use triple quotes write one, , can break string across multiple lines:","code":"def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value z = numpy.zeros((2, 2)) print(offset_mean(z, 3)) [[ 3.  3.]  [ 3.  3.]] data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(offset_mean(data, 0)) [[-6.14875 -6.14875 -5.14875 ... -3.14875 -6.14875 -6.14875]  [-6.14875 -5.14875 -4.14875 ... -5.14875 -6.14875 -5.14875]  [-6.14875 -5.14875 -5.14875 ... -4.14875 -5.14875 -5.14875]  ...  [-6.14875 -5.14875 -5.14875 ... -5.14875 -5.14875 -5.14875]  [-6.14875 -6.14875 -6.14875 ... -6.14875 -4.14875 -6.14875]  [-6.14875 -6.14875 -5.14875 ... -5.14875 -5.14875 -6.14875]] print('original min, mean, and max are:', numpy.amin(data), numpy.mean(data), numpy.amax(data)) offset_data = offset_mean(data, 0) print('min, mean, and max of offset data are:',       numpy.amin(offset_data),       numpy.mean(offset_data),       numpy.amax(offset_data)) original min, mean, and max are: 0.0 6.14875 20.0 min, mean, and max of offset data are: -6.14875 2.842170943040401e-16 13.85125 print('std dev before and after:', numpy.std(data), numpy.std(offset_data)) std dev before and after: 4.613833197118566 4.613833197118566 print('difference in standard deviations before and after:',       numpy.std(data) - numpy.std(offset_data)) difference in standard deviations before and after: 0.0 # offset_mean(data, target_mean_value): # return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.\"\"\"     return (data - numpy.mean(data)) + target_mean_value help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value  help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"passed parameters functions two ways: directly, type(data), name, numpy.loadtxt(fname='something.csv', delimiter=','). fact, can pass filename loadtxt without fname=: still need say delimiter=: understand ’s going , make functions easier use, let’s re-define offset_mean function like : key change second parameter now written target_mean_value=0.0 instead just target_mean_value. call function two arguments, works : can also now call just one parameter, case target_mean_value automatically assigned default value 0.0: handy: usually want function work one way, occasionally need something else, can allow people pass parameter need provide default make normal case easier. example shows Python matches values parameters: example shows, parameters matched left right, haven’t given value explicitly get default value. can override behavior naming value pass : hand, let’s look help numpy.loadtxt: ’s lot information , important part first couple lines: tells us loadtxt one parameter called fname doesn’t default value, eight others . call function like : filename assigned fname (want), delimiter string ',' assigned dtype rather delimiter, dtype second parameter list. However ',' isn’t known dtype code produced error message tried run . call loadtxt don’t provide fname= filename ’s first item list, want ',' assigned variable delimiter, provide delimiter= second parameter since delimiter second parameter list.","code":"numpy.loadtxt('inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) numpy.loadtxt('inflammation-01.csv', ',') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/lib/npyio.py\", line 1041, in loa dtxt     dtype = np.dtype(dtype)   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/core/_internal.py\", line 199, in _commastring     newitem = (dtype, eval(repeats))   File \"<string>\", line 1     ,     ^ SyntaxError: unexpected EOF while parsing def offset_mean(data, target_mean_value=0.0):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value, (0 by default).      Examples     --------     >>> offset_mean([1, 2, 3])     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value test_data = numpy.zeros((2, 2)) print(offset_mean(test_data, 3)) [[ 3.  3.]  [ 3.  3.]] more_data = 5 + numpy.zeros((2, 2)) print('data before mean offset:') print(more_data) print('offset data:') print(offset_mean(more_data)) data before mean offset: [[ 5.  5.]  [ 5.  5.]] offset data: [[ 0.  0.]  [ 0.  0.]] def display(a=1, b=2, c=3):     print('a:', a, 'b:', b, 'c:', c)  print('no parameters:') display() print('one parameter:') display(55) print('two parameters:') display(55, 66) no parameters: a: 1 b: 2 c: 3 one parameter: a: 55 b: 2 c: 3 two parameters: a: 55 b: 66 c: 3 print('only setting the value of c') display(c=77) only setting the value of c a: 1 b: 2 c: 77 help(numpy.loadtxt) Help on function loadtxt in module numpy.lib.npyio:  loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes')     Load data from a text file.      Each row in the text file must have the same number of values.      Parameters     ---------- ... loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes') numpy.loadtxt('inflammation-01.csv', ',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Consider two functions: functions s std_dev computationally equivalent (calculate sample standard deviation), human reader, look different. probably found std_dev much easier read understand s. example illustrates, documentation programmer’s coding style combine determine easy others read understand programmer’s code. Choosing meaningful variable names using blank spaces break code logical “chunks” helpful techniques producing readable code. useful sharing code others, also original programmer. need revisit code wrote months ago haven’t thought since , appreciate value readable code! Python first execute function add = 7 b = 3, , therefore, print 10. However, function add line starts return (return “statement”), , default, return nothing , Python world, called None. Therefore, assigned None last line (print()) print None. result, see: k 0 k inside function f2k doesn’t know k defined outside function. f2k function called, creates local variable k. function return values alter k outside local copy. Therefore original value k remains unchanged. Beware local k created f2k internal statements affect new value . k read, simply retrieve global k value. Attempting define numbers function results 4. SyntaxError. defined parameters two four given default values. one three given default values, required included arguments function called must placed parameters default values function definition. given call func displays : -1 b: 2 c: 6. -1 assigned first parameter , 2 assigned next parameter b, c passed value, uses default value 6.","code":"def s(p):     a = 0     for v in p:         a += v     m = a / len(p)     d = 0     for v in p:         d += (v - m) * (v - m)     return numpy.sqrt(d / (len(p) - 1))  def std_dev(sample):     sample_sum = 0     for value in sample:         sample_sum += value      sample_mean = sample_sum / len(sample)      sum_squared_devs = 0     for value in sample:         sum_squared_devs += (value - sample_mean) * (value - sample_mean)      return numpy.sqrt(sum_squared_devs / (len(sample) - 1)) def fence(original, wrapper):     return wrapper + original + wrapper 10 None def outer(input_string):     return input_string[0] + input_string[-1] def rescale(input_array):     L = numpy.amin(input_array)     H = numpy.amax(input_array)     output_array = (input_array - L) / (H - L)     return output_array \"\"\"Takes an array as input, and returns a corresponding array scaled so that 0 corresponds to the minimum and 1 to the maximum value of the input array.  Examples: >>> rescale(numpy.arange(10.0)) array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ]) >>> rescale(numpy.linspace(0, 100, 5)) array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]) \"\"\" def rescale(input_array, low_val=0.0, high_val=1.0):     \"\"\"rescales input array values to lie between low_val and high_val\"\"\"     L = numpy.amin(input_array)     H = numpy.amax(input_array)     intermed_array = (input_array - L) / (H - L)     output_array = intermed_array * (high_val - low_val) + low_val     return output_array 259.81666666666666 278.15 273.15 0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"combining-strings","dir":"Instructor","previous_headings":"","what":"Combining Strings","title":null,"text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"return-versus-print","dir":"Instructor","previous_headings":"","what":"Return versus print","title":null,"text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"selecting-characters-from-strings","dir":"Instructor","previous_headings":"","what":"Selecting Characters From Strings","title":null,"text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"rescaling-an-array","dir":"Instructor","previous_headings":"","what":"Rescaling an Array","title":null,"text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"testing-and-documenting-your-function","dir":"Instructor","previous_headings":"","what":"Testing and Documenting Your Function","title":null,"text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"defining-defaults-1","dir":"Instructor","previous_headings":"","what":"Defining Defaults","title":null,"text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"variables-inside-and-outside-functions","dir":"Instructor","previous_headings":"","what":"Variables Inside and Outside Functions","title":null,"text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"mixing-default-and-non-default-parameters","dir":"Instructor","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":null,"text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":"readable-code","dir":"Instructor","previous_headings":"","what":"Readable Code","title":null,"text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/08-func.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"long-tracebacks","dir":"Instructor","previous_headings":"","what":"Long Tracebacks","title":null,"text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"reading-error-messages","dir":"Instructor","previous_headings":"","what":"Reading Error Messages","title":null,"text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17 ---> 18 print_sunday_message()      19  <ipython-input-7-3ad455d81842> in print_sunday_message()      14      15 def print_sunday_message(): ---> 16     print_message(7)      17      18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14      15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"better-errors-on-newer-pythons","dir":"Instructor","previous_headings":"","what":"Better errors on newer Pythons","title":null,"text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"forget colon end line, accidentally add one space many indenting statement, forget parenthesis, encounter syntax error. means Python couldn’t figure read program. similar forgetting punctuation English: example, text difficult read punctuation also capitalization hard figure sentence ends also figure sentence begins extent might ambiguous sentence break People can typically figure meant text punctuation, people much smarter computers. Python doesn’t know read program, give inform error. example: , Python tells us SyntaxError line 1, even puts little arrow place issue. case problem function definition missing colon end. Actually, function two issues syntax. fix problem colon, see also IndentationError, means lines function definition indentation: SyntaxError IndentationError indicate problem syntax program, IndentationError specific: always means problem code indented.","code":"def some_function()     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-3-6bb841ea1423>\", line 1     def some_function()                        ^ SyntaxError: invalid syntax def some_function():     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-4-ae290e7659cb>\", line 4     return msg     ^ IndentationError: unexpected indent"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"tabs-and-spaces","dir":"Instructor","previous_headings":"","what":"Tabs and Spaces","title":null,"text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Another common type error called NameError, occurs try use variable exist. example: Variable name errors come informative error messages, usually form “name ‘the_variable_name’ defined”. error message occur? ’s harder question answer, depends code supposed . However, common reasons might undefined variable. first meant use string, forgot put quotes around : second reason might trying use variable yet exist. following example, count defined (e.g., count = 0) loop: Finally, third possibility made typo writing code. Let’s say fixed error adding line Count = 0 loop. Frustratingly, actually fix error. Remember variables case-sensitive, variable count different Count. still get error, still defined count:","code":"print(a) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-7-9d7b17ad5387> in <module>() ----> 1 print(a)  NameError: name 'a' is not defined print(hello) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-8-9553ee03b645> in <module>() ----> 1 print(hello)  NameError: name 'hello' is not defined for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-9-dd6a12d7ca5c> in <module>()       1 for number in range(10): ----> 2     count = count + number       3 print('The count is:', count)  NameError: name 'count' is not defined Count = 0 for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-10-d77d40059aea> in <module>()       1 Count = 0       2 for number in range(10): ----> 3     count = count + number       4 print('The count is:', count)  NameError: name 'count' is not defined"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Next errors containers (like lists strings) items within . try access item list string exist, get error. makes sense: asked someone day like get coffee, answered “caturday”, might bit annoyed. Python gets similarly annoyed try ask item doesn’t exist: , Python telling us IndexError code, meaning tried access list index exist.","code":"letters = ['a', 'b', 'c'] print('Letter #1 is', letters[0]) print('Letter #2 is', letters[1]) print('Letter #3 is', letters[2]) print('Letter #4 is', letters[3]) Letter #1 is a Letter #2 is b Letter #3 is c --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-11-d817f55b7d6c> in <module>()       3 print('Letter #2 is', letters[1])       4 print('Letter #3 is', letters[2]) ----> 5 print('Letter #4 is', letters[3])  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"last type error ’ll cover today associated reading writing files: FileNotFoundError. try read file exist, receive FileNotFoundError telling . attempt write file opened read-, Python 3 returns UnsupportedOperationError. generally, problems input output manifest OSErrors, may show specific subclass; can see list Python docs. unique UNIX errno, can see error message. One reason receiving error specified incorrect path file. example, currently folder called myproject, file myproject/writing/myfile.txt, try open myfile.txt, fail. correct path writing/myfile.txt. also possible file name path contains typo. related issue can occur use “read” flag instead “write” flag. Python give error try open file writing file exist. However, meant open file reading, accidentally opened writing, try read , get UnsupportedOperation error telling file opened reading: common errors files, though many others exist. get error ’ve never seen , searching Internet error type often reveals common reasons might get error. SyntaxError missing (): end first line, IndentationError mismatch second third lines. fixed version : 3 NameErrors number misspelled, message defined, quotes. Fixed version: IndexError; last entry seasons[3], seasons[4] doesn’t make sense. fixed version :","code":"file_handle = open('myfile.txt', 'r') --------------------------------------------------------------------------- FileNotFoundError                         Traceback (most recent call last) <ipython-input-14-f6e1ac4aee96> in <module>() ----> 1 file_handle = open('myfile.txt', 'r')  FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt' file_handle = open('myfile.txt', 'w') file_handle.read() --------------------------------------------------------------------------- UnsupportedOperation                      Traceback (most recent call last) <ipython-input-15-b846479bc61f> in <module>()       1 file_handle = open('myfile.txt', 'w') ----> 2 file_handle.read()  UnsupportedOperation: not readable def another_function():     print('Syntax errors are annoying.')     print('But at least Python tells us about them!')     print('So they are usually not too hard to fix.') message = '' for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (number % 3) == 0:         message = message + 'a'     else:         message = message + 'b' print(message) seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[-1])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"identifying-syntax-errors","dir":"Instructor","previous_headings":"","what":"Identifying Syntax Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"identifying-variable-name-errors","dir":"Instructor","previous_headings":"","what":"Identifying Variable Name Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":"identifying-index-errors","dir":"Instructor","previous_headings":"","what":"Identifying Index Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/09-errors.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"first step toward getting right answers programs assume mistakes happen guard . called defensive programming, common way add assertions code checks runs. assertion simply statement something must true certain point program. Python sees one, evaluates assertion’s condition. ’s true, Python nothing, ’s false, Python halts program immediately prints error message one provided. example, piece code halts soon loop encounters value isn’t positive: Programs like Firefox browser full assertions: 10-20% code contain check 80–90% working correctly. Broadly speaking, assertions fall three categories: precondition something must true start function order work correctly. postcondition something function guarantees true finishes. invariant something always true particular point inside piece code. example, suppose representing rectangles using tuple four coordinates (x0, y0, x1, y1), representing lower left upper right corners rectangle. order calculations, need normalize rectangle lower left corner origin longest side 1.0 units long. function , checks input correctly formatted result makes sense: preconditions lines 6, 8, 9 catch invalid inputs: post-conditions lines 20 21 help us catch bugs telling us calculations might incorrect. example, normalize rectangle taller wide everything seems OK: normalize one ’s wider tall, assertion triggered: Re-reading function, realize line 14 divide dy dx rather dx dy. Jupyter notebook, can display line numbers typing Ctrl+M followed L. left assertion end function, created returned something right shape valid answer, wasn’t. Detecting debugging almost certainly taken time long run writing assertion. assertions aren’t just catching errors: also help people understand programs. assertion gives person reading program chance check (consciously otherwise) understanding matches code . good programmers follow two rules adding assertions code. first , fail early, fail often. greater distance error occurs ’s noticed, harder error debug, good code catches mistakes early possible. second rule , turn bugs assertions tests. Whenever fix bug, write assertion catches mistake make . made mistake piece code, odds good made mistakes nearby, make mistake (related one) next time change . Writing assertions check haven’t regressed (.e., haven’t re-introduced old problem) can save lot time long run, helps warn people reading code (including future self) bit tricky.","code":"numbers = [1.5, 2.3, 0.7, -0.001, 4.4] total = 0.0 for num in numbers:     assert num > 0.0, 'Data should only contain positive values'     total += num print('total is:', total) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-19-33d87ea29ae4> in <module>()       2 total = 0.0       3 for num in numbers: ----> 4     assert num > 0.0, 'Data should only contain positive values'       5     total += num       6 print('total is:', total)  AssertionError: Data should only contain positive values def normalize_rectangle(rect):     \"\"\"Normalizes a rectangle so that it is at the origin and 1.0 units long on its longest axis.     Input should be of the format (x0, y0, x1, y1).     (x0, y0) and (x1, y1) define the lower left and upper right corners     of the rectangle, respectively.\"\"\"     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'     x0, y0, x1, y1 = rect     assert x0 < x1, 'Invalid X coordinates'     assert y0 < y1, 'Invalid Y coordinates'      dx = x1 - x0     dy = y1 - y0     if dx > dy:         scaled = dx / dy         upper_x, upper_y = 1.0, scaled     else:         scaled = dx / dy         upper_x, upper_y = scaled, 1.0      assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid'     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      return (0, 0, upper_x, upper_y) print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-2-1b9cd8e18a1f> in <module> ----> 1 print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       4     (x0, y0) and (x1, y1) define the lower left and upper right corners       5     of the rectangle, respectively.\"\"\" ----> 6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect       8     assert x0 < x1, 'Invalid X coordinates'  AssertionError: Rectangles must contain 4 coordinates print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-3-325036405532> in <module> ----> 1 print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect ----> 8     assert x0 < x1, 'Invalid X coordinates'       9     assert y0 < y1, 'Invalid Y coordinates'      10  AssertionError: Invalid X coordinates print(normalize_rectangle( (0.0, 0.0, 1.0, 5.0) )) (0, 0, 0.2, 1.0) print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) )) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-5-8d4a48f1d068> in <module> ----> 1 print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)      19      20     assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid' ---> 21     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      22      23     return (0, 0, upper_x, upper_y)  AssertionError: Calculated upper Y coordinate invalid"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"assertion checks something true particular point program. next step check overall behavior piece code, .e., make sure produces right output ’s given particular input. example, suppose need find two time series overlap. range time series represented pair numbers, time interval started ended. output largest range include: novice programmers solve problem like : Write function range_overlap. Call interactively two three different inputs. produces wrong answer, fix function re-run test. clearly works — , thousands scientists right now — ’s better way: Write short function test. Write range_overlap function pass tests. range_overlap produces wrong answers, fix re-run test functions. Writing tests writing function exercise called test-driven development (TDD). advocates believe produces better code faster : people write tests writing thing tested, subject confirmation bias, .e., subconsciously write tests show code correct, rather find errors. Writing tests helps programmers figure function actually supposed . start defining empty function range_overlap: three test statements range_overlap: error actually reassuring: haven’t implemented logic range_overlap yet, tests passed, indicate ’ve written entirely ineffective test. bonus writing tests, ’ve implicitly defined input output look like: expect list pairs input, produce single pair output. Something important missing, though. don’t tests case ranges don’t overlap : range_overlap case: fail error message, produce special value like (0.0, 0.0) signal ’s overlap, something else? actual implementation function one things; writing tests first helps us figure best ’re emotionally invested whatever happened write realized issue. case? two segments touch endpoints overlap ? Mathematicians usually say “yes”, engineers usually say “”. best answer “whatever useful rest program”, , actual implementation range_overlap going something, whatever consistent ’s overlap . Since ’re planning use range function returns X axis time series chart, decide : every overlap non-zero width, return special value None ’s overlap. None built Python, means “nothing ”. (languages often call equivalent value null nil). decision made, can finish writing last two tests: , get error haven’t written function, ’re now ready : Take moment think calculate left endpoint overlap maximum input left endpoints, overlap right endpoint minimum input right endpoints. ’d now like re-run tests, ’re scattered across three different cells. make running easier, let’s put function: can now test range_overlap single function call: first test supposed produce None fails, know something wrong function. don’t know whether tests passed failed Python halted program soon spotted first error. Still, information better none, trace behavior function input, realize ’re initializing max_left min_right 0.0 1.0 respectively, regardless input values. violates another important rule programming: always initialize data. first assertion checks input sequence values empty. empty sequence [] make fail. second assertion checks value list can turned integer. Input [1, 2, 'c', 3] make fail. third assertion checks total list greater 0. Input [-10, 2, 3] make fail.","code":"def range_overlap(ranges):     pass assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0) assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0) assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-25-d8be150fbef6> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       2 assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)       3 assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)  AssertionError: assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-26-d877ef460ba2> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       2 assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None  AssertionError: def range_overlap(ranges):     \"\"\"Return common overlap among a set of [left, right] ranges.\"\"\"     max_left = 0.0     min_right = 1.0     for (left, right) in ranges:         max_left = max(max_left, left)         min_right = min(min_right, right)     return (max_left, min_right) def test_range_overlap():     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)     assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([]) == None test_range_overlap() --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-29-cf9215c96457> in <module>() ----> 1 test_range_overlap()  <ipython-input-28-5d4cd6fd41d9> in test_range_overlap()       1 def test_range_overlap(): ----> 2     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       3     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None       4     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       5     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)  AssertionError: # a possible pre-condition: assert len(input_array) > 0, 'Array length must be non-zero' # a possible post-condition: assert numpy.amin(input_array) <= average <= numpy.amax(input_array), 'Average should be between min and max of input values (inclusive)'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":"pre--and-post-conditions","dir":"Instructor","previous_headings":"","what":"Pre- and Post-Conditions","title":null,"text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":"testing-assertions","dir":"Instructor","previous_headings":"","what":"Testing Assertions","title":null,"text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/10-defensive.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"first step debugging something know ’s supposed . “program doesn’t work” isn’t good enough: order diagnose fix problems, need able tell correct output incorrect. can write test case failing case — .e., can assert inputs, function produce result — ’re ready start debugging. can’t, need figure ’re going know ’ve fixed things. writing test cases scientific software frequently harder writing test cases commercial applications, knew output scientific code supposed , wouldn’t running software: ’d writing results moving next program. practice, scientists tend following: Test simplified data. statistics real data set, try calculating statistics single record, two identical records, two records whose values one step apart, case can calculate right answer hand. Test simplified case. program supposed simulate magnetic eddies rapidly-rotating blobs supercooled helium, first test blob helium isn’t rotating, isn’t subjected external electromagnetic fields. Similarly, ’re looking effects climate change speciation, first test hold temperature, precipitation, factors constant. Compare oracle. test oracle something whose results trusted, experimental data, older program, human expert. use test oracles determine new program produces correct results. test oracle, store output particular cases can compare new results often like without re-running program. Check conservation laws. Mass, energy, quantities conserved physical systems, programs well. Similarly, analyzing patient data, number records either stay decrease move one analysis next (since might throw away outliers records missing values). “new” patients start appearing nowhere move pipeline, ’s probably sign something wrong. Visualize. Data analysts frequently use simple visualizations check science ’re correctness code (just opening lesson tutorial). used debugging last resort, though, since ’s hard compare two visualizations automatically.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"can debug something fails, second step always find test case makes fail every time. “every time” part important things frustrating debugging intermittent problem: call function dozen times get single failure, odds good ’ll scroll past failure actually occurs. part , ’s always important check code “plugged ”, .e., ’re actually exercising problem think . Every programmer spent hours chasing bug, realize actually calling code wrong data set wrong configuration parameters, using wrong version software entirely. Mistakes like particularly likely happen ’re tired, frustrated, deadline, one reasons late-night (overnight) coding sessions almost never worthwhile.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"takes 20 minutes bug surface, can three experiments hour. means ’ll get less data time ’re likely distracted things wait program fail, means time spending problem less focused. ’s therefore critical make fail fast. well making program fail fast time, want make fail fast space, .e., want localize failure smallest possible region code: smaller gap cause effect, easier connection find. Many programmers therefore use divide conquer strategy find bugs, .e., output function wrong, check whether things OK middle, concentrate either first second half, . N things can interact N! different ways, every line code isn’t run part test means one thing don’t need worry .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Replacing random chunks code unlikely much good. (, got wrong first time, ’ll probably get wrong second third well.) Good programmers therefore change one thing time, reason. either trying gather information (“bug still change order loops?”) test fix (“can make bug go away sorting data processing ?”). Every time make change, however small, re-run tests immediately, things change , harder know ’s responsible (N! interactions ). re-run tests: half fixes made code introduce (re-introduce) bugs, re-running tests tells us whether regressed.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Good scientists keep track ’ve done can reproduce work, don’t waste time repeating experiments running ones whose results won’t interesting. Similarly, debugging works best keep track ’ve done well worked. find asking, “left followed right odd number lines cause crash? right followed left? using even number lines?” ’s time step away computer, take deep breath, start working systematically. Records particularly useful time comes ask help. People likely listen us can explain clearly , ’re better able give information need useful.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"version-control-revisited","dir":"Instructor","previous_headings":"","what":"Version Control Revisited","title":null,"text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"speaking help: can’t find bug 10 minutes, humble ask help. Explaining problem someone else often useful, since hearing ’re thinking helps us spot inconsistencies hidden assumptions. don’t someone nearby share problem description , get rubber duck! Asking help also helps alleviate confirmation bias. just spent hour writing complicated program, want work, ’re likely keep telling , rather searching reason doesn’t. People aren’t emotionally invested code can objective, ’re often able spot simple mistakes overlooked. Part humble learning mistakes. Programmers tend get things wrong : either don’t understand language libraries ’re working , model things work wrong. either case, taking note error occurred checking next time quickly turns making mistake . makes us productive long run. saying goes, week hard work can sometimes save hour thought. train avoid making kinds mistakes, break code modular, testable chunks, turn every assumption (mistake) assertion, actually take us less time produce working programs, .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"debug-with-a-neighbor","dir":"Instructor","previous_headings":"","what":"Debug With a Neighbor","title":null,"text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"not-supposed-to-be-the-same","dir":"Instructor","previous_headings":"","what":"Not Supposed to be the Same","title":null,"text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"suggestions-for-debugging","dir":"Instructor","previous_headings":"","what":"Suggestions for debugging","title":null,"text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":"bugs-found","dir":"Instructor","previous_headings":"","what":"Bugs found","title":null,"text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/11-debugging.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"switching-to-shell-commands","dir":"Instructor","previous_headings":"","what":"Switching to Shell Commands","title":null,"text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"going create file python code , use bash shell run code. Using text editor choice, save following text file called sys_version.py: first line imports library called sys, short “system”. defines values sys.version, describes version Python running. can run script command line like : Create another file called argv_list.py save following text . strange name argv stands “argument values”. Whenever Python runs program, takes values given command line puts list sys.argv program can determine . run program arguments: thing list full path script, always sys.argv[0]. run arguments, however: Python adds arguments magic list. hand, let’s build version readings.py always prints per-patient mean single data file. first step write function outlines implementation, placeholder function actual work. convention function usually called main, though can call whatever want: function gets name script sys.argv[0], ’s ’s always put, name file process sys.argv[1]. ’s simple test: output defined function, haven’t actually called . Let’s add call main: run :","code":"import sys print('version is', sys.version) $ python sys_version.py version is 3.4.3+ (default, Jul 28 2015, 13:17:50) [GCC 4.9.3] import sys print('sys.argv is', sys.argv) $ python argv_list.py sys.argv is ['argv_list.py'] $ python argv_list.py first second third sys.argv is ['argv_list.py', 'first', 'second', 'third'] $ cat ../code/readings_01.py import sys import numpy   def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean) $ python ../code/readings_01.py inflammation-01.csv $ cat ../code/readings_02.py import sys import numpy  def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_02.py inflammation-01.csv 5.45 5.425 6.1 5.9 5.55 6.225 5.975 6.65 6.625 6.525 6.775 5.8 6.225 5.75 5.225 6.3 6.55 5.7 5.85 6.55 5.775 5.825 6.175 6.1 5.8 6.425 6.05 6.025 6.175 6.55 6.175 6.35 6.725 6.125 7.075 5.725 5.925 6.15 6.075 5.75 5.975 5.725 6.3 5.9 6.75 5.925 7.225 6.15 5.95 6.275 5.7 6.1 6.825 5.975 6.725 5.7 6.25 6.4 7.05 5.9"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"running-versus-importing","dir":"Instructor","previous_headings":"","what":"Running Versus Importing","title":null,"text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"the-right-way-to-do-it","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"next step teach program handle multiple files. Since 60 lines output per file lot page , ’ll start using three smaller files, three days data two patients: Using small data files input also allows us check results easily: , example, can see program calculating mean correctly line, whereas really taking faith . yet another rule programming: test simple things first. want program process file separately, need loop executes filename. specify files command line, filenames sys.argv, need careful: sys.argv[0] always name script, rather name file. also need handle unknown number filenames, since program run number files. solution problems loop contents sys.argv[1:]. ‘1’ tells Python start slice location 1, program’s name isn’t included; since ’ve left upper bound, slice runs end list, includes filenames. ’s changed program readings_03.py: action:","code":"$ ls small-*.csv small-01.csv small-02.csv small-03.csv $ cat small-01.csv 0,0,1 0,1,2 $ python ../code/readings_02.py small-01.csv 0.333333333333 1.0 $ cat ../code/readings_03.py import sys import numpy  def main():     script = sys.argv[0]     for filename in sys.argv[1:]:         data = numpy.loadtxt(filename, delimiter=',')         for row_mean in numpy.mean(data, axis=1):             print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_03.py small-01.csv small-02.csv 0.333333333333 1.0 13.6666666667 11.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"the-right-way-to-do-it-1","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"next step teach program pay attention --min, --mean, --max flags. always appear names files, : works: several things wrong : main large read comfortably. specify least two additional arguments command-line, one flag one filename, one, program throw exception run. assumes file list empty, sys.argv[1] considered action, even filename. Silent failures like always hard debug. program check submitted action one three recognized flags. version pulls processing file loop function . also checks action one allowed flags processing, program fails fast: four lines longer predecessor, broken digestible chunks 8 12 lines.","code":"$ cat ../code/readings_04.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]      for filename in filenames:         data = numpy.loadtxt(filename, delimiter=',')          if action == '--min':             values = numpy.amin(data, axis=1)         elif action == '--mean':             values = numpy.mean(data, axis=1)         elif action == '--max':             values = numpy.amax(data, axis=1)          for val in values:             print(val)  if __name__ == '__main__':     main() $ python ../code/readings_04.py --max small-01.csv 1.0 2.0 $ cat ../code/readings_05.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     for filename in filenames:         process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"next thing program read data standard input filenames given can put pipeline, redirect input , . Let’s experiment another script called count_stdin.py: little program reads lines special “file” called sys.stdin, automatically connected program’s standard input. don’t open — Python operating system take care program starts — can almost anything regular file. Let’s try running regular command-line program: common mistake try run something reads standard input like : .e., forget < character redirects file standard input. case, ’s nothing standard input, program waits start loop someone type something keyboard. Since ’s way us , program stuck, halt using Interrupt option Kernel menu Notebook. now need rewrite program loads data sys.stdin filenames provided. Luckily, numpy.loadtxt can handle either filename open file first parameter, don’t actually need change process. main changes: Let’s try : ’s better. fact, ’s done: program now everything set .","code":"$ cat ../code/count_stdin.py import sys  count = 0 for line in sys.stdin:     count += 1  print(count, 'lines in standard input') $ python ../code/count_stdin.py < small-01.csv 2 lines in standard input $ python ../code/count_stdin.py small-01.csv $ cat ../code/readings_06.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ python ../code/readings_06.py --mean < small-01.csv 0.333333333333 1.0 import sys  def main():     assert len(sys.argv) == 4, 'Need exactly 3 arguments'      operator = sys.argv[1]     assert operator in ['--add', '--subtract', '--multiply', '--divide'], \\         'Operator is not one of --add, --subtract, --multiply, or --divide: bailing out'     try:         operand1, operand2 = float(sys.argv[2]), float(sys.argv[3])     except ValueError:         print('cannot convert input to a number: bailing out')         return      do_arithmetic(operand1, operator, operand2)  def do_arithmetic(operand1, operator, operand2):      if operator == 'add':         value = operand1 + operand2     elif operator == 'subtract':         value = operand1 - operand2     elif operator == 'multiply':         value = operand1 * operand2     elif operator == 'divide':         value = operand1 / operand2     print(value)  main() import sys import glob  def main():     \"\"\"prints names of all files with sys.argv as suffix\"\"\"     assert len(sys.argv) >= 2, 'Argument list cannot be empty'     suffix = sys.argv[1] # NB: behaviour is not as you'd expect if sys.argv[1] is *     glob_input = '*.' + suffix # construct the input     glob_output = sorted(glob.glob(glob_input)) # call the glob function     for item in glob_output: # print the output         print(item)     return  main() # this is code/readings_07.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['-n', '-m', '-x'], \\            'Action is not one of -n, -m, or -x: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '-n':         values = numpy.amin(data, axis=1)     elif action == '-m':         values = numpy.mean(data, axis=1)     elif action == '-x':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() # this is code/readings_08.py import sys import numpy  def main():     script = sys.argv[0]     if len(sys.argv) == 1:  # no arguments, so print help message         print(\"Usage: python readings_08.py action filenames\\n\"               \"Action:\\n\"               \"    Must be one of --min, --mean, or --max.\\n\"               \"Filenames:\\n\"               \"    If blank, input is taken from standard input (stdin).\\n\"               \"    Otherwise, each filename in the list of arguments is processed in turn.\")         return      action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], (         'Action is not one of --min, --mean, or --max: ' + action)     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() # this is code/readings_09.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     if action not in ['--min', '--mean', '--max']: # if no action given         action = '--mean'    # set a default action, that being mean         filenames = sys.argv[1:] # start the filenames one place earlier in the argv list     else:         filenames = sys.argv[2:]      if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() import sys import numpy  def main():     script = sys.argv[0]     filenames = sys.argv[1:]     if len(filenames) <=1: #nothing to check         print('Only 1 file specified on input')     else:         nrow0, ncol0 = row_col_count(filenames[0])         print('First file %s: %d rows and %d columns' % (filenames[0], nrow0, ncol0))         for filename in filenames[1:]:             nrow, ncol = row_col_count(filename)             if nrow != nrow0 or ncol != ncol0:                 print('File %s does not check: %d rows and %d columns' % (filename, nrow, ncol))             else:                 print('File %s checks' % filename)         return  def row_col_count(filename):     try:         nrow, ncol = numpy.loadtxt(filename, delimiter=',').shape     except ValueError:         # 'ValueError' error is raised when numpy encounters lines that         # have different number of data elements in them than the rest of the lines,         # or when lines have non-numeric elements         nrow, ncol = (0, 0)     return nrow, ncol  main() import sys  def main():     \"\"\"print each input filename and the number of lines in it,        and print the sum of the number of lines\"\"\"     filenames = sys.argv[1:]     sum_nlines = 0 #initialize counting variable      if len(filenames) == 0: # no filenames, just stdin         sum_nlines = count_file_like(sys.stdin)         print('stdin: %d' % sum_nlines)     else:         for filename in filenames:             nlines = count_file(filename)             print('%s %d' % (filename, nlines))             sum_nlines += nlines         print('total: %d' % sum_nlines)  def count_file(filename):     \"\"\"count the number of lines in a file\"\"\"     f = open(filename, 'r')     nlines = len(f.readlines())     f.close()     return(nlines)  def count_file_like(file_like):     \"\"\"count the number of lines in a file-like object (eg stdin)\"\"\"     n = 0     for line in file_like:         n = n+1     return n  main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"arithmetic-on-the-command-line","dir":"Instructor","previous_headings":"","what":"Arithmetic on the Command Line","title":null,"text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"finding-particular-files","dir":"Instructor","previous_headings":"","what":"Finding Particular Files","title":null,"text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"changing-flags","dir":"Instructor","previous_headings":"","what":"Changing Flags","title":null,"text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"adding-a-help-message","dir":"Instructor","previous_headings":"","what":"Adding a Help Message","title":null,"text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"adding-a-default-action","dir":"Instructor","previous_headings":"","what":"Adding a Default Action","title":null,"text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"a-file-checker","dir":"Instructor","previous_headings":"","what":"A File-Checker","title":null,"text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"counting-lines","dir":"Instructor","previous_headings":"","what":"Counting Lines","title":null,"text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":"generate-an-error-message","dir":"Instructor","previous_headings":"","what":"Generate an Error Message","title":null,"text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/12-cmdline.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/404.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"seem find page looking . tips may help: try going back previous page navigate page using navigation bar left. URL ends /index.html, try removing . head home page lesson came link lesson, please contact lesson maintainers using links foot page.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Carpentries (Software Carpentry, Data Carpentry, Library Carpentry) instructional material made available Creative Commons Attribution license. following human-readable summary (substitute ) full legal text CC 4.0 license. free: Share—copy redistribute material medium format Adapt—remix, transform, build upon material purpose, even commercially. licensor revoke freedoms long follow license terms. following terms: Attribution—must give appropriate credit (mentioning work derived work Copyright (c) Carpentries , practical, linking https://carpentries.org/), provide link license, indicate changes made. may reasonable manner, way suggests licensor endorses use. additional restrictions—may apply legal terms technological measures legally restrict others anything license permits. understanding : Notices: comply license elements material public domain use permitted applicable exception limitation. warranties given. license may give permissions necessary intended use. example, rights publicity, privacy, moral rights may limit use material.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Except otherwise noted, example programs software provided Carpentries made available OSI-approved MIT license. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"“Carpentries”, “Software Carpentry”, “Data Carpentry”, “Library Carpentry” respective logos registered trademarks Community Initiatives.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/additional_material.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"can use %whos command time see variables created modules loaded computer’s memory. IPython command, work IPython terminal Jupyter Notebook. ## Integer Division using Python 3, division always returns floating point number: Unfortunately, wasn’t case Python 2: using Python 2 want keep fractional part division need convert one number floating point: want integer result division Python 3, use double-slash:","code":"%whos Variable    Type       Data/Info -------------------------------- weight_kg   float      100.0 weight_lb   float      143.0 5/9 0.5555555555555556 5/9 0 float(5)/9 0.555555555556 5/float(9) 0.555555555556 5.0/9 0.555555555556 5/9.0 0.555555555556 4//2 2 3//2 1"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Python Fundamentals  basic data types can work Python? can create new variable Python? use function? Can change value associated variable create ? Assign values variables. Python interpreter can used calculator: great interesting. anything useful data, need assign value variable. Python, can assign value variable, using equals sign =. example, can track weight patient weighs 60 kilograms assigning value 60 variable weight_kg: now , whenever use weight_kg, Python substitute value assigned . layperson’s terms, variable name value. Python, variable names: can include letters, digits, underscores start digit case sensitive. means , example: weight0 valid variable name, whereas 0weight weight Weight different variables Python knows various types data. Three common ones : integer numbers floating point numbers, strings. example , variable weight_kg integer value 60. want precisely track weight patient, can use floating point value executing: create string, add single double quotes around text. identify track patient throughout study, can assign person unique identifier storing string: data stored variable names, can make use calculations. may want store patient’s weight pounds well kilograms: might decide add prefix patient identifier: carry common tasks data variables Python, language provides us several built-functions. display information screen, use print function: want make use function, referred calling function, follow name parentheses. parentheses important: leave , function doesn’t actually run! Sometimes include values variables inside parentheses function use. case print, use parentheses tell function value want display. learn functions work create later episodes. can display multiple things using one print call: can also call function inside another function call. example, Python built-function called type tells value’s data type: Moreover, can arithmetic variables right inside print function: command, however, change value weight_kg: change value weight_kg variable, assign weight_kg new value using equals = sign:","code":"3 + 5 * 4 23 weight_kg = 60 weight_kg = 60.3 patient_id = '001' weight_lb = 2.2 * weight_kg patient_id = 'inflam_' + patient_id print(weight_lb) print(patient_id) 132.66 inflam_001 print(patient_id, 'weight in kilograms:', weight_kg) inflam_001 weight in kilograms: 60.3 print(type(60.3)) print(type(patient_id)) <class 'float'> <class 'str'> print('weight in pounds:', 2.2 * weight_kg) weight in pounds: 132.66 print(weight_kg) 60.3 weight_kg = 65.0 print('weight in kilograms is now:', weight_kg) weight in kilograms is now: 65.0 `mass` holds a value of 47.5, `age` does not exist `mass` still holds a value of 47.5, `age` holds a value of 122 `mass` now has a value of 95.0, `age`'s value is still 122 `mass` still has a value of 95.0, `age` now holds 102 Hopper Grace print(type(planet)) print(type(apples)) print(type(distance)) <class 'str'> <class 'int'> <class 'float'>"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Python interpreter can used calculator: great interesting. anything useful data, need assign value variable. Python, can assign value variable, using equals sign =. example, can track weight patient weighs 60 kilograms assigning value 60 variable weight_kg: now , whenever use weight_kg, Python substitute value assigned . layperson’s terms, variable name value. Python, variable names: can include letters, digits, underscores start digit case sensitive. means , example: weight0 valid variable name, whereas 0weight weight Weight different variables","code":"3 + 5 * 4 23 weight_kg = 60"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Python knows various types data. Three common ones : integer numbers floating point numbers, strings. example , variable weight_kg integer value 60. want precisely track weight patient, can use floating point value executing: create string, add single double quotes around text. identify track patient throughout study, can assign person unique identifier storing string:","code":"weight_kg = 60.3 patient_id = '001'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"data stored variable names, can make use calculations. may want store patient’s weight pounds well kilograms: might decide add prefix patient identifier:","code":"weight_lb = 2.2 * weight_kg patient_id = 'inflam_' + patient_id"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"carry common tasks data variables Python, language provides us several built-functions. display information screen, use print function: want make use function, referred calling function, follow name parentheses. parentheses important: leave , function doesn’t actually run! Sometimes include values variables inside parentheses function use. case print, use parentheses tell function value want display. learn functions work create later episodes. can display multiple things using one print call: can also call function inside another function call. example, Python built-function called type tells value’s data type: Moreover, can arithmetic variables right inside print function: command, however, change value weight_kg: change value weight_kg variable, assign weight_kg new value using equals = sign:","code":"print(weight_lb) print(patient_id) 132.66 inflam_001 print(patient_id, 'weight in kilograms:', weight_kg) inflam_001 weight in kilograms: 60.3 print(type(60.3)) print(type(patient_id)) <class 'float'> <class 'str'> print('weight in pounds:', 2.2 * weight_kg) weight in pounds: 132.66 print(weight_kg) 60.3 weight_kg = 65.0 print('weight in kilograms is now:', weight_kg) weight in kilograms is now: 65.0 `mass` holds a value of 47.5, `age` does not exist `mass` still holds a value of 47.5, `age` holds a value of 122 `mass` now has a value of 95.0, `age`'s value is still 122 `mass` still has a value of 95.0, `age` now holds 102 Hopper Grace print(type(planet)) print(type(apples)) print(type(distance)) <class 'str'> <class 'int'> <class 'float'>"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"variables-as-sticky-notes","dir":"Instructor","previous_headings":"","what":"Variables as Sticky Notes","title":null,"text":"variable Python analogous sticky note name written : assigning value variable like putting sticky note particular value. Using analogy, can investigate assigning value one variable change values , seemingly related, variables. example, let’s store subject’s weight pounds variable: Everything line code following ‘#’ symbol comment ignored Python. Comments allow programmers leave explanatory notes programmers future selves. Similar , expression 2.2 * weight_kg evaluated 143.0, value assigned variable weight_lb (.e. sticky note weight_lb placed 143.0). point, variable “stuck” completely distinct unrelated values. Let’s now change weight_kg: Since weight_lb doesn’t “remember” value comes , updated change weight_kg.","code":"# There are 2.2 pounds per kilogram weight_lb = 2.2 * weight_kg print('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb) weight in kilograms: 65.0 and in pounds: 143.0 weight_kg = 100.0 print('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb) weight in kilograms is now: 100.0 and weight in pounds is still: 143.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"check-your-understanding","dir":"Instructor","previous_headings":"","what":"Check Your Understanding","title":null,"text":"values variables mass age following statements? Test answer executing lines.","code":"mass = 47.5 age = 122 mass = mass * 2.0 age = age - 20"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"sorting-out-references","dir":"Instructor","previous_headings":"","what":"Sorting Out References","title":null,"text":"Python allows assign multiple values multiple variables one line separating variables values commas. following program print ?","code":"first, second = 'Grace', 'Hopper' third, fourth = second, first print(third, fourth)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"seeing-data-types","dir":"Instructor","previous_headings":"","what":"Seeing Data Types","title":null,"text":"data types following variables?","code":"planet = 'Earth' apples = 5 distance = 10.5"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Basic data types Python include integers, strings, floating-point numbers. Use variable = value assign value variable order record memory. Variables created demand whenever value assigned . Use print(something) display value something. Use # kind explanation add comments programs. Built-functions always available use.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Analyzing Patient Data  can process tabular data files Python? Explain library libraries used . Import Python library use functions contains. Read tabular data file program. Select individual values subsections data. Perform operations arrays data. Words useful, ’s useful sentences stories build . Similarly, lot powerful, general tools built Python, specialized tools built basic units live libraries can called upon needed. begin processing clinical trial inflammation data, need load Python. can using library called NumPy, stands Numerical Python. general, use library want fancy things lots numbers, especially matrices arrays. tell Python ’d like start using NumPy, need import : Importing library like getting piece lab equipment storage locker setting bench. Libraries provide additional functionality basic Python package, much like new piece equipment adds functionality lab space. Just like lab, importing many libraries can sometimes complicate slow programs - import need program. ’ve imported library, can ask library read data file us: expression numpy.loadtxt(...) function call asks Python run function loadtxt belongs numpy library. dot notation Python used object attribute/property specifier invoking method. object.property give object.property value, object_name.method() invoke object_name method. example, John Smith John belongs Smith family. use dot notation write name smith.john, just loadtxt function belongs numpy library. numpy.loadtxt two parameters: name file want read delimiter separates values line. need character strings (strings short), put quotes. Since haven’t told anything else function’s output, notebook displays . case, output data just loaded. default, rows columns shown (... omit elements displaying big arrays). Note , save space displaying NumPy arrays, Python show us trailing zeros, 1.0 becomes 1.. call numpy.loadtxt read file didn’t save data memory. , need assign array variable. similar manner assign single value variable, can also assign array values variable using syntax. Let’s re-run numpy.loadtxt save returned data: statement doesn’t produce output ’ve assigned output variable data. want check data loaded, can print variable’s value: Now data memory, can manipulate . First, let’s ask type thing data refers : output tells us data currently refers N-dimensional array, functionality provided NumPy library. data correspond arthritis patients’ inflammation. rows individual patients, columns daily inflammation measurements. following command, can see array’s shape: output tells us data array variable contains 60 rows 40 columns. created variable data store arthritis data, create array; also created information array, called members attributes. extra information describes data way adjective describes noun. data.shape attribute data describes dimensions data. use dotted notation attributes variables use functions libraries part--whole relationship. want get single number array, must provide index square brackets variable name, just math referring element matrix. inflammation data two dimensions, need use two indices refer one specific value: expression data[29, 19] accesses element row 30, column 20. expression may surprise , data[0, 0] might. Programming languages like Fortran, MATLAB R start counting 1 ’s human beings done thousands years. Languages C family (including C++, Java, Perl, Python) count 0 represents offset first value array (second value offset one index first value). closer way computers represent arrays (interested historical reasons behind counting indices zero, can read Mike Hoye’s blog post). result, M×N array Python, indices go 0 M-1 first axis 0 N-1 second. takes bit getting used , one way remember rule index many steps take start get item want. index like [30, 20] selects single element array, can select whole sections well. example, can select first ten days (columns) values first four patients (rows) like : slice 0:4 means, “Start index 0 go , including, index 4”. , ----including takes bit getting used , rule difference upper lower bounds number values slice. don’t start slices 0: also don’t include upper lower bound slice. don’t include lower bound, Python uses 0 default; don’t include upper, slice runs end axis, don’t include either (.e., use ‘:’ ), slice includes everything: example selects rows 0 2 columns 36 end array. NumPy several useful functions take array input perform operations values. want find average inflammation patients days, example, can ask NumPy compute data’s mean value: mean function takes array argument. Let’s use three NumPy functions get descriptive values dataset. ’ll also use multiple assignment, convenient Python feature enable us one line. ’ve assigned return value numpy.amax(data) variable maxval, value numpy.amin(data) minval, . analyzing data, though, often want look variations statistical values, maximum inflammation per patient average inflammation per day. One way create new temporary array data want, ask calculation: don’t actually need store row variable . Instead, can combine selection function call: need maximum inflammation patient days (next diagram left) average day (diagram right)? diagram shows, want perform operation across axis: support functionality, array functions allow us specify axis want work . ask average across axis 0 (rows 2D example), get: quick check, can ask array shape : expression (40,) tells us N×1 vector, average inflammation per day patients. average across axis 1 (columns 2D example), get: average inflammation per patient across days. Creates substring index 1 (including) final index, effectively removing first last letters ‘oxygen’ ‘gotcha’ array indexing singleton dimensions dropped default. means [:, 0] one dimensional array, won’t stack desired. preserve singleton dimensions, index can slice array. example, [:, :1] returns two dimensional array one singleton dimension (.e. column vector). alternative way achieve result use Numpy’s delete function remove second column . ’re sure parameters numpy.delete mean, use help files. Since row axis (0) patients, make sense get difference two arbitrary patients. column axis (1) days, difference change inflammation – meaningful concept. shape (60, 39) one fewer difference columns columns data. using numpy.amax() function apply numpy.diff() function, get largest difference days. inflammation values decrease along axis, difference one element next negative. interested magnitude change direction, numpy.absolute() function provide . Notice difference get largest absolute difference readings.","code":"import numpy numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(data) [[ 0.  0.  1. ...,  3.  0.  0.]  [ 0.  1.  2. ...,  1.  0.  1.]  [ 0.  1.  1. ...,  2.  1.  1.]  ...,  [ 0.  1.  1. ...,  1.  1.  1.]  [ 0.  0.  0. ...,  0.  2.  0.]  [ 0.  0.  1. ...,  1.  1.  0.]] print(type(data)) <class 'numpy.ndarray'> print(data.shape) (60, 40) print('first value in data:', data[0, 0]) first value in data: 0.0 print('middle value in data:', data[29, 19]) middle value in data: 16.0 print(data[0:4, 0:10]) [[ 0.  0.  1.  3.  1.  2.  4.  7.  8.  3.]  [ 0.  1.  2.  1.  2.  1.  3.  2.  2.  6.]  [ 0.  1.  1.  3.  3.  2.  6.  2.  5.  9.]  [ 0.  0.  2.  0.  4.  2.  2.  1.  6.  7.]] print(data[5:10, 0:10]) [[ 0.  0.  1.  2.  2.  4.  2.  1.  6.  4.]  [ 0.  0.  2.  2.  4.  2.  2.  5.  5.  8.]  [ 0.  0.  1.  2.  3.  1.  2.  3.  5.  3.]  [ 0.  0.  0.  3.  1.  5.  6.  5.  5.  8.]  [ 0.  1.  1.  2.  1.  3.  5.  3.  5.  8.]] small = data[:3, 36:] print('small is:') print(small) small is: [[ 2.  3.  0.  0.]  [ 1.  1.  0.  1.]  [ 2.  2.  1.  1.]] print(numpy.mean(data)) 6.14875 maxval, minval, stdval = numpy.amax(data), numpy.amin(data), numpy.std(data)  print('maximum inflammation:', maxval) print('minimum inflammation:', minval) print('standard deviation:', stdval) maximum inflammation: 20.0 minimum inflammation: 0.0 standard deviation: 4.61383319712 patient_0 = data[0, :] # 0 on the first axis (rows), everything on the second (columns) print('maximum inflammation for patient 0:', numpy.amax(patient_0)) maximum inflammation for patient 0: 18.0 print('maximum inflammation for patient 2:', numpy.amax(data[2, :])) maximum inflammation for patient 2: 19.0 print(numpy.mean(data, axis=0)) [  0.           0.45         1.11666667   1.75         2.43333333   3.15    3.8          3.88333333   5.23333333   5.51666667   5.95         5.9    8.35         7.73333333   8.36666667   9.5          9.58333333   10.63333333  11.56666667  12.35        13.25        11.96666667   11.03333333  10.16666667  10.           8.66666667   9.15         7.25    7.33333333   6.58333333   6.06666667   5.95         5.11666667   3.6    3.3          3.56666667   2.48333333   1.5          1.13333333    0.56666667] print(numpy.mean(data, axis=0).shape) (40,) print(numpy.mean(data, axis=1)) [ 5.45   5.425  6.1    5.9    5.55   6.225  5.975  6.65   6.625  6.525   6.775  5.8    6.225  5.75   5.225  6.3    6.55   5.7    5.85   6.55   5.775  5.825  6.175  6.1    5.8    6.425  6.05   6.025  6.175  6.55   6.175  6.35   6.725  6.125  7.075  5.725  5.925  6.15   6.075  5.75   5.975  5.725  6.3    5.9    6.75   5.925  7.225  6.15   5.95   6.275  5.7   6.1    6.825  5.975  6.725  5.7    6.25   6.4    7.05   5.9  ] oxyg en oxygen n e element = 'oxygen' print('last three characters:', element[-3:]) element = 'carpentry' print('last three characters:', element[-3:]) element = 'clone' print('last three characters:', element[-3:]) element = 'hi' print('last three characters:', element[-3:]) last three characters: gen last three characters: try last three characters: one last three characters: hi array([], shape=(0, 0), dtype=float64) array([], shape=(0, 40), dtype=float64) D = numpy.hstack((A[:, :1], A[:, -1:])) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] D = numpy.delete(arr=A, obj=1, axis=1) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] numpy.diff(data, axis=1) numpy.amax(numpy.diff(data, axis=1), axis=1) array([  7.,  12.,  11.,  10.,  11.,  13.,  10.,   8.,  10.,  10.,   7.,          7.,  13.,   7.,  10.,  10.,   8.,  10.,   9.,  10.,  13.,   7.,         12.,   9.,  12.,  11.,  10.,  10.,   7.,  10.,  11.,  10.,   8.,         11.,  12.,  10.,   9.,  10.,  13.,  10.,   7.,   7.,  10.,  13.,         12.,   8.,   8.,  10.,  10.,   9.,   8.,  13.,  10.,   7.,  10.,          8.,  12.,  10.,   7.,  12.]) numpy.amax(numpy.absolute(numpy.diff(data, axis=1)), axis=1) array([ 12.,  14.,  11.,  13.,  11.,  13.,  10.,  12.,  10.,  10.,  10.,         12.,  13.,  10.,  11.,  10.,  12.,  13.,   9.,  10.,  13.,   9.,         12.,   9.,  12.,  11.,  10.,  13.,   9.,  13.,  11.,  11.,   8.,         11.,  12.,  13.,   9.,  10.,  13.,  11.,  11.,  13.,  11.,  13.,         13.,  10.,   9.,  10.,  10.,   9.,   9.,  13.,  10.,   9.,  10.,         11.,  13.,  10.,  10.,  12.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"begin processing clinical trial inflammation data, need load Python. can using library called NumPy, stands Numerical Python. general, use library want fancy things lots numbers, especially matrices arrays. tell Python ’d like start using NumPy, need import : Importing library like getting piece lab equipment storage locker setting bench. Libraries provide additional functionality basic Python package, much like new piece equipment adds functionality lab space. Just like lab, importing many libraries can sometimes complicate slow programs - import need program. ’ve imported library, can ask library read data file us: expression numpy.loadtxt(...) function call asks Python run function loadtxt belongs numpy library. dot notation Python used object attribute/property specifier invoking method. object.property give object.property value, object_name.method() invoke object_name method. example, John Smith John belongs Smith family. use dot notation write name smith.john, just loadtxt function belongs numpy library. numpy.loadtxt two parameters: name file want read delimiter separates values line. need character strings (strings short), put quotes. Since haven’t told anything else function’s output, notebook displays . case, output data just loaded. default, rows columns shown (... omit elements displaying big arrays). Note , save space displaying NumPy arrays, Python show us trailing zeros, 1.0 becomes 1.. call numpy.loadtxt read file didn’t save data memory. , need assign array variable. similar manner assign single value variable, can also assign array values variable using syntax. Let’s re-run numpy.loadtxt save returned data: statement doesn’t produce output ’ve assigned output variable data. want check data loaded, can print variable’s value: Now data memory, can manipulate . First, let’s ask type thing data refers : output tells us data currently refers N-dimensional array, functionality provided NumPy library. data correspond arthritis patients’ inflammation. rows individual patients, columns daily inflammation measurements. following command, can see array’s shape: output tells us data array variable contains 60 rows 40 columns. created variable data store arthritis data, create array; also created information array, called members attributes. extra information describes data way adjective describes noun. data.shape attribute data describes dimensions data. use dotted notation attributes variables use functions libraries part--whole relationship. want get single number array, must provide index square brackets variable name, just math referring element matrix. inflammation data two dimensions, need use two indices refer one specific value: expression data[29, 19] accesses element row 30, column 20. expression may surprise , data[0, 0] might. Programming languages like Fortran, MATLAB R start counting 1 ’s human beings done thousands years. Languages C family (including C++, Java, Perl, Python) count 0 represents offset first value array (second value offset one index first value). closer way computers represent arrays (interested historical reasons behind counting indices zero, can read Mike Hoye’s blog post). result, M×N array Python, indices go 0 M-1 first axis 0 N-1 second. takes bit getting used , one way remember rule index many steps take start get item want.","code":"import numpy numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(data) [[ 0.  0.  1. ...,  3.  0.  0.]  [ 0.  1.  2. ...,  1.  0.  1.]  [ 0.  1.  1. ...,  2.  1.  1.]  ...,  [ 0.  1.  1. ...,  1.  1.  1.]  [ 0.  0.  0. ...,  0.  2.  0.]  [ 0.  0.  1. ...,  1.  1.  0.]] print(type(data)) <class 'numpy.ndarray'> print(data.shape) (60, 40) print('first value in data:', data[0, 0]) first value in data: 0.0 print('middle value in data:', data[29, 19]) middle value in data: 16.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"data-type","dir":"Instructor","previous_headings":"","what":"Data Type","title":null,"text":"Numpy array contains one elements type. type function tell variable NumPy array won’t tell type thing inside array. can find type data contained NumPy array. tells us NumPy array’s elements floating-point numbers.","code":"print(data.dtype) float64"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"in-the-corner","dir":"Instructor","previous_headings":"","what":"In the Corner","title":null,"text":"may also surprise Python displays array, shows element index [0, 0] upper left corner rather lower left. consistent way mathematicians draw matrices different Cartesian coordinates. indices (row, column) instead (column, row) reason, can confusing plotting data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"index like [30, 20] selects single element array, can select whole sections well. example, can select first ten days (columns) values first four patients (rows) like : slice 0:4 means, “Start index 0 go , including, index 4”. , ----including takes bit getting used , rule difference upper lower bounds number values slice. don’t start slices 0: also don’t include upper lower bound slice. don’t include lower bound, Python uses 0 default; don’t include upper, slice runs end axis, don’t include either (.e., use ‘:’ ), slice includes everything: example selects rows 0 2 columns 36 end array.","code":"print(data[0:4, 0:10]) [[ 0.  0.  1.  3.  1.  2.  4.  7.  8.  3.]  [ 0.  1.  2.  1.  2.  1.  3.  2.  2.  6.]  [ 0.  1.  1.  3.  3.  2.  6.  2.  5.  9.]  [ 0.  0.  2.  0.  4.  2.  2.  1.  6.  7.]] print(data[5:10, 0:10]) [[ 0.  0.  1.  2.  2.  4.  2.  1.  6.  4.]  [ 0.  0.  2.  2.  4.  2.  2.  5.  5.  8.]  [ 0.  0.  1.  2.  3.  1.  2.  3.  5.  3.]  [ 0.  0.  0.  3.  1.  5.  6.  5.  5.  8.]  [ 0.  1.  1.  2.  1.  3.  5.  3.  5.  8.]] small = data[:3, 36:] print('small is:') print(small) small is: [[ 2.  3.  0.  0.]  [ 1.  1.  0.  1.]  [ 2.  2.  1.  1.]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"NumPy several useful functions take array input perform operations values. want find average inflammation patients days, example, can ask NumPy compute data’s mean value: mean function takes array argument. Let’s use three NumPy functions get descriptive values dataset. ’ll also use multiple assignment, convenient Python feature enable us one line. ’ve assigned return value numpy.amax(data) variable maxval, value numpy.amin(data) minval, . analyzing data, though, often want look variations statistical values, maximum inflammation per patient average inflammation per day. One way create new temporary array data want, ask calculation: don’t actually need store row variable . Instead, can combine selection function call: need maximum inflammation patient days (next diagram left) average day (diagram right)? diagram shows, want perform operation across axis: support functionality, array functions allow us specify axis want work . ask average across axis 0 (rows 2D example), get: quick check, can ask array shape : expression (40,) tells us N×1 vector, average inflammation per day patients. average across axis 1 (columns 2D example), get: average inflammation per patient across days. Creates substring index 1 (including) final index, effectively removing first last letters ‘oxygen’ ‘gotcha’ array indexing singleton dimensions dropped default. means [:, 0] one dimensional array, won’t stack desired. preserve singleton dimensions, index can slice array. example, [:, :1] returns two dimensional array one singleton dimension (.e. column vector). alternative way achieve result use Numpy’s delete function remove second column . ’re sure parameters numpy.delete mean, use help files. Since row axis (0) patients, make sense get difference two arbitrary patients. column axis (1) days, difference change inflammation – meaningful concept. shape (60, 39) one fewer difference columns columns data. using numpy.amax() function apply numpy.diff() function, get largest difference days. inflammation values decrease along axis, difference one element next negative. interested magnitude change direction, numpy.absolute() function provide . Notice difference get largest absolute difference readings.","code":"print(numpy.mean(data)) 6.14875 maxval, minval, stdval = numpy.amax(data), numpy.amin(data), numpy.std(data)  print('maximum inflammation:', maxval) print('minimum inflammation:', minval) print('standard deviation:', stdval) maximum inflammation: 20.0 minimum inflammation: 0.0 standard deviation: 4.61383319712 patient_0 = data[0, :] # 0 on the first axis (rows), everything on the second (columns) print('maximum inflammation for patient 0:', numpy.amax(patient_0)) maximum inflammation for patient 0: 18.0 print('maximum inflammation for patient 2:', numpy.amax(data[2, :])) maximum inflammation for patient 2: 19.0 print(numpy.mean(data, axis=0)) [  0.           0.45         1.11666667   1.75         2.43333333   3.15    3.8          3.88333333   5.23333333   5.51666667   5.95         5.9    8.35         7.73333333   8.36666667   9.5          9.58333333   10.63333333  11.56666667  12.35        13.25        11.96666667   11.03333333  10.16666667  10.           8.66666667   9.15         7.25    7.33333333   6.58333333   6.06666667   5.95         5.11666667   3.6    3.3          3.56666667   2.48333333   1.5          1.13333333    0.56666667] print(numpy.mean(data, axis=0).shape) (40,) print(numpy.mean(data, axis=1)) [ 5.45   5.425  6.1    5.9    5.55   6.225  5.975  6.65   6.625  6.525   6.775  5.8    6.225  5.75   5.225  6.3    6.55   5.7    5.85   6.55   5.775  5.825  6.175  6.1    5.8    6.425  6.05   6.025  6.175  6.55   6.175  6.35   6.725  6.125  7.075  5.725  5.925  6.15   6.075  5.75   5.975  5.725  6.3    5.9    6.75   5.925  7.225  6.15   5.95   6.275  5.7   6.1    6.825  5.975  6.725  5.7    6.25   6.4    7.05   5.9  ] oxyg en oxygen n e element = 'oxygen' print('last three characters:', element[-3:]) element = 'carpentry' print('last three characters:', element[-3:]) element = 'clone' print('last three characters:', element[-3:]) element = 'hi' print('last three characters:', element[-3:]) last three characters: gen last three characters: try last three characters: one last three characters: hi array([], shape=(0, 0), dtype=float64) array([], shape=(0, 40), dtype=float64) D = numpy.hstack((A[:, :1], A[:, -1:])) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] D = numpy.delete(arr=A, obj=1, axis=1) print('D = ') print(D) D = [[1 3]  [4 6]  [7 9]] numpy.diff(data, axis=1) numpy.amax(numpy.diff(data, axis=1), axis=1) array([  7.,  12.,  11.,  10.,  11.,  13.,  10.,   8.,  10.,  10.,   7.,          7.,  13.,   7.,  10.,  10.,   8.,  10.,   9.,  10.,  13.,   7.,         12.,   9.,  12.,  11.,  10.,  10.,   7.,  10.,  11.,  10.,   8.,         11.,  12.,  10.,   9.,  10.,  13.,  10.,   7.,   7.,  10.,  13.,         12.,   8.,   8.,  10.,  10.,   9.,   8.,  13.,  10.,   7.,  10.,          8.,  12.,  10.,   7.,  12.]) numpy.amax(numpy.absolute(numpy.diff(data, axis=1)), axis=1) array([ 12.,  14.,  11.,  13.,  11.,  13.,  10.,  12.,  10.,  10.,  10.,         12.,  13.,  10.,  11.,  10.,  12.,  13.,   9.,  10.,  13.,   9.,         12.,   9.,  12.,  11.,  10.,  13.,   9.,  13.,  11.,  11.,   8.,         11.,  12.,  13.,   9.,  10.,  13.,  11.,  11.,  13.,  11.,  13.,         13.,  10.,   9.,  10.,  10.,   9.,   9.,  13.,  10.,   9.,  10.,         11.,  13.,  10.,  10.,  12.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"not-all-functions-have-input","dir":"Instructor","previous_headings":"","what":"Not All Functions Have Input","title":null,"text":"Generally, function uses inputs produce outputs. However, functions produce outputs without needing input. example, checking current time doesn’t require input. functions don’t take arguments, still need parentheses (()) tell Python go something us.","code":"import time print(time.ctime()) Sat Mar 26 13:07:33 2016"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"mystery-functions-in-ipython","dir":"Instructor","previous_headings":"","what":"Mystery Functions in IPython","title":null,"text":"know functions NumPy use ? working IPython Jupyter Notebook, easy way find . type name something followed dot, can use tab completion (e.g. type numpy. press Tab) see list functions attributes can use. selecting one, can also add question mark (e.g. numpy.cumprod?), IPython return explanation method! help(numpy.cumprod). Similarly, using “plain vanilla” Python interpreter, can type numpy. press Tab key twice listing available. can use help() function see explanation function ’re interested , example: help(numpy.cumprod).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"confusing-function-names","dir":"Instructor","previous_headings":"","what":"Confusing Function Names","title":null,"text":"One might wonder functions called amax amin max min called mean amean. package numpy provide functions max min fully equivalent amax amin, share name standard library functions max min come Python . Referring functions like , numpy.max example, cause problems, ways refer . addition, text editors might highlight (color) functions like standard library function, even though belong NumPy, can confusing lead errors. Since function called mean standard library, function called amean.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings","dir":"Instructor","previous_headings":"","what":"Slicing Strings","title":null,"text":"section array called slice. can take slices character strings well: value element[:4]? element[4:]? element[:]?","code":"element = 'oxygen' print('first three characters:', element[0:3]) print('last three characters:', element[3:6]) first three characters: oxy last three characters: gen"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings-1","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"element[-1]? element[-2]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings-2","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"Given answers, explain element[1:-1] .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-strings-3","dir":"Instructor","previous_headings":"","what":"Slicing Strings (continued)","title":null,"text":"can rewrite slice getting last three characters element, works even assign different string element? Test solution following strings: carpentry, clone, hi.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"thin-slices","dir":"Instructor","previous_headings":"","what":"Thin Slices","title":null,"text":"expression element[3:3] produces empty string, .e., string contains characters. data holds array patient data, data[3:3, 4:4] produce? data[3:3, :]?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"stacking-arrays","dir":"Instructor","previous_headings":"","what":"Stacking Arrays","title":null,"text":"Arrays can concatenated stacked top one another, using NumPy’s vstack hstack functions vertical horizontal stacking, respectively. Write additional code slices first last columns , stacks 3x2 array. Make sure print results verify solution.","code":"import numpy  A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print('A = ') print(A)  B = numpy.hstack([A, A]) print('B = ') print(B)  C = numpy.vstack([A, A]) print('C = ') print(C) A = [[1 2 3]  [4 5 6]  [7 8 9]] B = [[1 2 3 1 2 3]  [4 5 6 4 5 6]  [7 8 9 7 8 9]] C = [[1 2 3]  [4 5 6]  [7 8 9]  [1 2 3]  [4 5 6]  [7 8 9]]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"change-in-inflammation","dir":"Instructor","previous_headings":"","what":"Change In Inflammation","title":null,"text":"patient data longitudinal sense row represents series observations relating one individual. means change inflammation time meaningful concept. Let’s find calculate changes data contained array NumPy. numpy.diff() function takes array returns differences two successive values. Let’s use examine changes day across first week patient 3 inflammation dataset. Calling numpy.diff(patient3_week1) following calculations return 6 difference values new array. Note array differences shorter one element (length 6). calling numpy.diff multi-dimensional array, axis argument may passed function specify axis process. applying numpy.diff 2D inflammation array data, axis specify?","code":"patient3_week1 = data[3, :7] print(patient3_week1) [0. 0. 2. 0. 4. 2. 2.] [ 0 - 0, 2 - 0, 0 - 2, 4 - 0, 2 - 4, 2 - 2 ] numpy.diff(patient3_week1) array([ 0.,  2., -2.,  4., -2.,  0.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"change-in-inflammation-1","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"shape individual data file (60, 40) (60 rows 40 columns), shape array run diff() function ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"change-in-inflammation-2","dir":"Instructor","previous_headings":"","what":"Change In Inflammation (continued)","title":null,"text":"find largest change inflammation patient? matter change inflammation increase decrease?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Import library program using import libraryname. Use numpy library work arrays Python. expression array.shape gives shape array. Use array[x, y] select single element 2D array. Array indices start 0, 1. Use low:high specify slice includes indices low high-1. Use # kind explanation add comments programs. Use numpy.mean(array), numpy.amax(array), numpy.amin(array) calculate simple statistics. Use numpy.mean(array, axis=0) numpy.mean(array, axis=1) calculate statistics across specified axis.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Visualizing Tabular Data  can visualize tabular data Python? can group several plots together? Plot simple graphs data. Plot multiple graphs single figure. mathematician Richard Hamming said, “purpose computing insight, numbers,” best way develop insight often visualize data. Visualization deserves entire lecture , can explore features Python’s matplotlib library . official plotting library, matplotlib de facto standard. First, import pyplot module matplotlib use two functions create display heat map data: row heat map corresponds patient clinical trial dataset, column corresponds day dataset. Blue pixels heat map represent low values, yellow pixels represent high values. can see, general number inflammation flare-ups patients rises falls 40-day period. far good line knowledge clinical trial Dr. Maverick’s claims: patients take medication inflammation flare-ups begin takes around 3 weeks medication take effect begin reducing flare-ups flare-ups appear drop zero end clinical trial. Now let’s take look average inflammation time: , put average inflammation per day across patients variable ave_inflammation, asked matplotlib.pyplot create display line graph values. result reasonably linear rise fall, line Dr. Maverick’s claim medication takes 3 weeks take effect. good data scientist doesn’t just consider average dataset, let’s look two statistics: maximum value rises falls linearly, minimum seems step function. Neither trend seems particularly likely, either ’s mistake calculations something wrong data. insight difficult reach examining numbers without visualization tools.","code":"import matplotlib.pyplot image = matplotlib.pyplot.imshow(data) matplotlib.pyplot.show() ave_inflammation = numpy.mean(data, axis=0) ave_plot = matplotlib.pyplot.plot(ave_inflammation) matplotlib.pyplot.show() max_plot = matplotlib.pyplot.plot(numpy.amax(data, axis=0)) matplotlib.pyplot.show() min_plot = matplotlib.pyplot.plot(numpy.amin(data, axis=0)) matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"mathematician Richard Hamming said, “purpose computing insight, numbers,” best way develop insight often visualize data. Visualization deserves entire lecture , can explore features Python’s matplotlib library . official plotting library, matplotlib de facto standard. First, import pyplot module matplotlib use two functions create display heat map data: row heat map corresponds patient clinical trial dataset, column corresponds day dataset. Blue pixels heat map represent low values, yellow pixels represent high values. can see, general number inflammation flare-ups patients rises falls 40-day period. far good line knowledge clinical trial Dr. Maverick’s claims: patients take medication inflammation flare-ups begin takes around 3 weeks medication take effect begin reducing flare-ups flare-ups appear drop zero end clinical trial. Now let’s take look average inflammation time: , put average inflammation per day across patients variable ave_inflammation, asked matplotlib.pyplot create display line graph values. result reasonably linear rise fall, line Dr. Maverick’s claim medication takes 3 weeks take effect. good data scientist doesn’t just consider average dataset, let’s look two statistics: maximum value rises falls linearly, minimum seems step function. Neither trend seems particularly likely, either ’s mistake calculations something wrong data. insight difficult reach examining numbers without visualization tools.","code":"import matplotlib.pyplot image = matplotlib.pyplot.imshow(data) matplotlib.pyplot.show() ave_inflammation = numpy.mean(data, axis=0) ave_plot = matplotlib.pyplot.plot(ave_inflammation) matplotlib.pyplot.show() max_plot = matplotlib.pyplot.plot(numpy.amax(data, axis=0)) matplotlib.pyplot.show() min_plot = matplotlib.pyplot.plot(numpy.amin(data, axis=0)) matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"episode-prerequisites","dir":"Instructor","previous_headings":"","what":"Episode Prerequisites","title":null,"text":"continuing notebook previous episode, already data variable imported numpy. starting new notebook point, need following two lines:","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"grouping-plots","dir":"Instructor","previous_headings":"","what":"Grouping plots","title":null,"text":"can group similar plots single figure using subplots. script uses number new commands. function matplotlib.pyplot.figure() creates space place plots. parameter figsize tells Python big make space. subplot placed figure using add_subplot method. add_subplot method takes 3 parameters. first denotes many total rows subplots , second parameter refers total number subplot columns, final parameter denotes subplot variable referencing (left--right, top--bottom). subplot stored different variable (axes1, axes2, axes3). subplot created, axes can titled using set_xlabel() command (set_ylabel()). three plots side side: call loadtxt reads data, rest program tells plotting library large want figure , ’re creating three subplots, draw one, want tight layout. (leave call fig.tight_layout(), graphs actually squeezed together closely.) call savefig stores plot graphics file. can convenient way store plots use documents, web pages etc. graphics format automatically determined Matplotlib file name ending specify; PNG ‘inflammation.png’. Matplotlib supports many different graphics formats, including SVG, PDF, JPEG. matplotlib normally sets x y axes limits min max data (depending data range) matplotlib interpolates (draws straight line) points. One way avoid use Matplotlib drawstyle option:","code":"import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.savefig('inflammation.png') matplotlib.pyplot.show() # One method axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0)) axes3.set_ylim(0, 6) # A more automated approach min_data = numpy.amin(data, axis=0) axes3.set_ylabel('min') axes3.plot(min_data) axes3.set_ylim(numpy.amin(min_data), numpy.amax(min_data) * 1.1) import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0), drawstyle='steps-mid')  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0), drawstyle='steps-mid')  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0), drawstyle='steps-mid')  fig.tight_layout()  matplotlib.pyplot.show() std_plot = matplotlib.pyplot.plot(numpy.std(data, axis=0)) matplotlib.pyplot.show() import numpy import matplotlib.pyplot  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  # change figsize (swap width and height) fig = matplotlib.pyplot.figure(figsize=(3.0, 10.0))  # change add_subplot (swap first two parameters) axes1 = fig.add_subplot(3, 1, 1) axes2 = fig.add_subplot(3, 1, 2) axes3 = fig.add_subplot(3, 1, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"importing-libraries-with-shortcuts","dir":"Instructor","previous_headings":"","what":"Importing libraries with shortcuts","title":null,"text":"lesson use import matplotlib.pyplot syntax import pyplot module matplotlib. However, shortcuts import matplotlib.pyplot plt frequently used. Importing pyplot way means initial import, rather writing matplotlib.pyplot.plot(...), can now write plt.plot(...). Another common convention use shortcut import numpy np importing NumPy library. can write np.loadtxt(...) instead numpy.loadtxt(...), example. people prefer shortcuts quicker type results shorter lines code - especially libraries long names! frequently see Python code online using pyplot function plt, NumPy function np, ’s ’ve used shortcut. makes difference approach choose take, must consistent use import matplotlib.pyplot plt matplotlib.pyplot.plot(...) work, must use plt.plot(...) instead. , working people important agree libraries imported.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"plot-scaling","dir":"Instructor","previous_headings":"","what":"Plot Scaling","title":null,"text":"plots stop just short upper end graph?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"plot-scaling-1","dir":"Instructor","previous_headings":"","what":"Plot Scaling (continued)","title":null,"text":"want change , can use set_ylim(min, max) method ‘axes’, example: Update plotting code automatically set appropriate scale. (Hint: can make use max min methods help.)","code":"axes3.set_ylim(0, 6)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"drawing-straight-lines","dir":"Instructor","previous_headings":"","what":"Drawing Straight Lines","title":null,"text":"center right subplots , expect lines look like step functions non-integer value realistic minimum maximum values. However, can see lines always vertical horizontal, particular step function subplot right looks slanted. ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"make-your-own-plot","dir":"Instructor","previous_headings":"","what":"Make Your Own Plot","title":null,"text":"Create plot showing standard deviation (numpy.std) inflammation data day across patients.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"moving-plots-around","dir":"Instructor","previous_headings":"","what":"Moving Plots Around","title":null,"text":"Modify program display three plots top one another instead side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use pyplot module matplotlib library creating simple visualizations.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Storing Multiple Values Lists  can store many values together? Explain list . Create index lists simple values. Change values individual elements Append values existing list Reorder slice list elements Create manipulate nested lists previous episode, analyzed single file clinical trial inflammation data. However, finding peculiar potentially suspicious trends trial data ask Dr. Maverick performed clinical trials. Surprisingly, say provide us 11 CSV files 11 clinical trials undertaken since initial trial. goal now process inflammation data , means still eleven files go! natural first step collect names files process. Python, list way store multiple values together. episode, learn store multiple values list well work lists. Unlike NumPy arrays, lists built language load library use . create list putting values inside square brackets separating values commas: can access elements list using indices – numbered positions elements list. positions numbered starting 0, first element index 0. Yes, can use negative numbers indices Python. , index -1 gives us last element list, -2 second last, . , odds[3] odds[-1] point element . one important difference lists strings: can change values list, change individual characters string. example: works, : . many ways change contents lists besides assigning new values individual elements: modifying place, useful remember Python treats lists slightly counter-intuitive way. saw earlier, modified mild_salsa list item -place, make list, (attempt ) copy modify list, can cause sorts trouble. also applies modifying list using functions: Python stores list memory, can use multiple names refer list. want copy (simple) list, can use list function, modify list mean : Subsets lists strings can accessed specifying ranges values brackets, similar accessed ranges positions NumPy array. commonly referred “slicing” list/string. Use negative indices count elements end container (list string): obtain every character need provide slice step size 2: can also leave beginning end slice take whole string provide step argument go every second element: want take slice beginning sequence, can omit first index range: similarly, can omit ending index range take slice end sequence: multiplication operator * used list replicates elements list concatenates together: ’s equivalent :","code":"odds = [1, 3, 5, 7] print('odds are:', odds) odds are: [1, 3, 5, 7] print('first element:', odds[0]) print('last element:', odds[3]) print('\"-1\" element:', odds[-1]) first element: 1 last element: 7 \"-1\" element: 7 names = ['Curie', 'Darwing', 'Turing']  # typo in Darwin's name print('names is originally:', names) names[1] = 'Darwin'  # correct the name print('final value of names:', names) names is originally: ['Curie', 'Darwing', 'Turing'] final value of names: ['Curie', 'Darwin', 'Turing'] name = 'Darwin' name[0] = 'd' --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-8-220df48aeb2e> in <module>()       1 name = 'Darwin' ----> 2 name[0] = 'd'  TypeError: 'str' object does not support item assignment odds.append(11) print('odds after adding a value:', odds) odds after adding a value: [1, 3, 5, 7, 11] removed_element = odds.pop(0) print('odds after removing the first element:', odds) print('removed_element:', removed_element) odds after removing the first element: [3, 5, 7, 11] removed_element: 1 odds.reverse() print('odds after reversing:', odds) odds after reversing: [11, 7, 5, 3] odds = [3, 5, 7] primes = odds primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7, 2] odds = [3, 5, 7] primes = list(odds) primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7] binomial_name = 'Drosophila melanogaster' group = binomial_name[0:10] print('group:', group)  species = binomial_name[11:23] print('species:', species)  chromosomes = ['X', 'Y', '2', '3', '4'] autosomes = chromosomes[2:5] print('autosomes:', autosomes)  last = chromosomes[-1] print('last:', last) group: Drosophila species: melanogaster autosomes: ['2', '3', '4'] last: 4 string_for_slicing[-4:] list_for_slicing[-4:] beatles[0:35:2] beatles[::2] date = 'Monday 4 January 2016' day = date[0:6] print('Using 0 to begin range:', day) day = date[:6] print('Omitting beginning index:', day) Using 0 to begin range: Monday Omitting beginning index: Monday months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] sond = months[8:12] print('With known last position:', sond) sond = months[8:len(months)] print('Using len() to get last entry:', sond) sond = months[8:] print('Omitting ending index:', sond) With known last position: ['sep', 'oct', 'nov', 'dec'] Using len() to get last entry: ['sep', 'oct', 'nov', 'dec'] Omitting ending index: ['sep', 'oct', 'nov', 'dec'] [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] counts + counts"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Unlike NumPy arrays, lists built language load library use . create list putting values inside square brackets separating values commas: can access elements list using indices – numbered positions elements list. positions numbered starting 0, first element index 0. Yes, can use negative numbers indices Python. , index -1 gives us last element list, -2 second last, . , odds[3] odds[-1] point element . one important difference lists strings: can change values list, change individual characters string. example: works, : . many ways change contents lists besides assigning new values individual elements: modifying place, useful remember Python treats lists slightly counter-intuitive way. saw earlier, modified mild_salsa list item -place, make list, (attempt ) copy modify list, can cause sorts trouble. also applies modifying list using functions: Python stores list memory, can use multiple names refer list. want copy (simple) list, can use list function, modify list mean : Subsets lists strings can accessed specifying ranges values brackets, similar accessed ranges positions NumPy array. commonly referred “slicing” list/string. Use negative indices count elements end container (list string): obtain every character need provide slice step size 2: can also leave beginning end slice take whole string provide step argument go every second element: want take slice beginning sequence, can omit first index range: similarly, can omit ending index range take slice end sequence: multiplication operator * used list replicates elements list concatenates together: ’s equivalent :","code":"odds = [1, 3, 5, 7] print('odds are:', odds) odds are: [1, 3, 5, 7] print('first element:', odds[0]) print('last element:', odds[3]) print('\"-1\" element:', odds[-1]) first element: 1 last element: 7 \"-1\" element: 7 names = ['Curie', 'Darwing', 'Turing']  # typo in Darwin's name print('names is originally:', names) names[1] = 'Darwin'  # correct the name print('final value of names:', names) names is originally: ['Curie', 'Darwing', 'Turing'] final value of names: ['Curie', 'Darwin', 'Turing'] name = 'Darwin' name[0] = 'd' --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-8-220df48aeb2e> in <module>()       1 name = 'Darwin' ----> 2 name[0] = 'd'  TypeError: 'str' object does not support item assignment odds.append(11) print('odds after adding a value:', odds) odds after adding a value: [1, 3, 5, 7, 11] removed_element = odds.pop(0) print('odds after removing the first element:', odds) print('removed_element:', removed_element) odds after removing the first element: [3, 5, 7, 11] removed_element: 1 odds.reverse() print('odds after reversing:', odds) odds after reversing: [11, 7, 5, 3] odds = [3, 5, 7] primes = odds primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7, 2] odds = [3, 5, 7] primes = list(odds) primes.append(2) print('primes:', primes) print('odds:', odds) primes: [3, 5, 7, 2] odds: [3, 5, 7] binomial_name = 'Drosophila melanogaster' group = binomial_name[0:10] print('group:', group)  species = binomial_name[11:23] print('species:', species)  chromosomes = ['X', 'Y', '2', '3', '4'] autosomes = chromosomes[2:5] print('autosomes:', autosomes)  last = chromosomes[-1] print('last:', last) group: Drosophila species: melanogaster autosomes: ['2', '3', '4'] last: 4 string_for_slicing[-4:] list_for_slicing[-4:] beatles[0:35:2] beatles[::2] date = 'Monday 4 January 2016' day = date[0:6] print('Using 0 to begin range:', day) day = date[:6] print('Omitting beginning index:', day) Using 0 to begin range: Monday Omitting beginning index: Monday months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'] sond = months[8:12] print('With known last position:', sond) sond = months[8:len(months)] print('Using len() to get last entry:', sond) sond = months[8:] print('Omitting ending index:', sond) With known last position: ['sep', 'oct', 'nov', 'dec'] Using len() to get last entry: ['sep', 'oct', 'nov', 'dec'] Omitting ending index: ['sep', 'oct', 'nov', 'dec'] [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] counts + counts"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"ch-ch-ch-ch-changes","dir":"Instructor","previous_headings":"","what":"Ch-Ch-Ch-Ch-Changes","title":null,"text":"Data can modified place called mutable, data modified called immutable. Strings numbers immutable. mean variables string number values constants, want change value string number variable, can replace old value completely new value. Lists arrays, hand, mutable: can modify created. can change individual elements, append new elements, reorder whole list. operations, like sorting, can choose whether use function modifies data -place function returns modified copy leaves original unchanged. careful modifying data -place. two variables refer list, modify list value, change variables! want variables mutable values independent, must make copy value assign . pitfalls like , code modifies data place can difficult understand. However, often far efficient modify large data structure place create modified copy every small change. consider aspects writing code.","code":"mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = mild_salsa        # <-- mild_salsa and hot_salsa point to the *same* list data in memory hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes'] mild_salsa = ['peppers', 'onions', 'cilantro', 'tomatoes'] hot_salsa = list(mild_salsa)        # <-- makes a *copy* of the list hot_salsa[0] = 'hot peppers' print('Ingredients in mild salsa:', mild_salsa) print('Ingredients in hot salsa:', hot_salsa) Ingredients in mild salsa: ['peppers', 'onions', 'cilantro', 'tomatoes'] Ingredients in hot salsa: ['hot peppers', 'onions', 'cilantro', 'tomatoes']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"nested-lists","dir":"Instructor","previous_headings":"","what":"Nested Lists","title":null,"text":"Since list can contain Python variables, can even contain lists. example, represent products shelves small grocery shop nested list called veg: store contents shelf nested list, write way: visual examples indexing list lists veg works. First, can reference row shelf separate list. example, veg[2] represents bottom row, list baskets row. Index operations using image work like : reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":"veg = [['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'lettuce', 'peppers', 'zucchini'],      ['lettuce', 'cilantro', 'peppers', 'zucchini']] print(veg[2]) ['lettuce', 'cilantro', 'peppers', 'zucchini'] print(veg[0]) ['lettuce', 'lettuce', 'peppers', 'zucchini'] print(veg[0][0]) 'lettuce' print(veg[1][2]) 'peppers'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"heterogeneous-lists","dir":"Instructor","previous_headings":"","what":"Heterogeneous Lists","title":null,"text":"Lists Python can contain elements different types. Example:","code":"sample_ages = [10, 12.5, 'Unknown']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"slicing-from-the-end","dir":"Instructor","previous_headings":"","what":"Slicing From the End","title":null,"text":"Use slicing access last four characters string entries list. solution work regardless whether knew beforehand length string list (e.g. wanted apply solution set lists different lengths)? , try change approach make robust. Hint: Remember indices can negative well positive","code":"string_for_slicing = 'Observation date: 02-Feb-2013' list_for_slicing = [['fluorine', 'F'],                     ['chlorine', 'Cl'],                     ['bromine', 'Br'],                     ['iodine', 'I'],                     ['astatine', 'At']] '2013' [['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"non-continuous-slices","dir":"Instructor","previous_headings":"","what":"Non-Continuous Slices","title":null,"text":"far ’ve seen use slicing take single blocks successive entries sequence. want take subset entries aren’t next sequence? can achieve providing third argument range within brackets, called step size. example shows can take every third entry list: Notice slice taken begins first entry range, followed entries taken equally-spaced intervals (steps) thereafter. wanted begin subset third entry, need specify starting point sliced range: Use step size argument create new string contains every character string “octopus’s garden shade”. Start creating variable hold string: slice beatles produce following output (.e., first character, third character, every character end string)?","code":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[0:12:3] print('subset', subset) subset [2, 7, 17, 29] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] subset = primes[2:12:3] print('subset', subset) subset [5, 13, 23, 37] beatles = \"In an octopus's garden in the shade\" I notpssgre ntesae"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"overloading","dir":"Instructor","previous_headings":"","what":"Overloading","title":null,"text":"+ usually means addition, used strings lists, means “concatenate”. Given , think multiplication operator * lists? particular, output following code? [2, 4, 6, 8, 10, 2, 4, 6, 8, 10] [4, 8, 12, 16, 20] [[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]] [2, 4, 6, 8, 10, 4, 8, 12, 16, 20] technical term operator overloading: single operator, like + *, can different things depending ’s applied .","code":"counts = [2, 4, 6, 8, 10] repeats = counts * 2 print(repeats)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"[value1, value2, value3, ...] creates list. Lists can contain Python object, including lists (.e., list lists). Lists indexed sliced square brackets (e.g., list[0] list[2:9]), way strings arrays. Lists mutable (.e., values can changed place). Strings immutable (.e., characters changed).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Repeating Actions Loops  can operations many different values? Explain loop . Correctly write loops repeat simple calculations. Trace changes loop variable loop runs. Trace changes variables updated loop. episode visualizing data, wrote Python code plots values interest first inflammation dataset (inflammation-01.csv), revealed suspicious features . dozen data sets right now potentially way Dr. Maverick can keep surprisingly fast clinical trial rate. want create plots data sets single statement. , ’ll teach computer repeat things. example task might want repeat accessing numbers list, printing number line . Python, list basically ordered collection elements, every element unique number associated — index. means can access elements list using indices. example, can get first number list odds, using odds[0]. One way print number use four print statements: bad approach three reasons: scalable. Imagine need print list hundreds elements. might easier type manually. Difficult maintain. want decorate printed element asterisk character, change four lines code. might problem small lists, definitely problem longer ones. Fragile. use list elements initially envisioned, display part list’s elements. shorter list, hand, cause error trying display elements list exist. ’s better approach: loop shorter — certainly shorter something prints every number hundred-number list — robust well: improved version uses loop repeat operation — case, printing — thing sequence. general form loop : Using odds example , loop might look like : number (num) variable odds looped printed one number another. numbers diagram denote loop cycle number printed (1 first loop cycle, 6 final loop cycle). can call loop variable anything like, must colon end line starting loop, must indent anything want run inside loop. Unlike many languages, command signify end loop body (e.g. end ); everything indented statement belongs loop. ’s another loop repeatedly updates variable: ’s worth tracing execution little program step step. Since three names names, statement line 4 executed three times. first time around, length zero (value assigned line 1) value Curie. statement adds 1 old value length, producing 1, updates length refer new value. next time around, value Darwin length 1, length updated 2. one update, length 3; since nothing left names Python process, loop finishes print function line 5 tells us final answer. Note loop variable variable used record progress loop. still exists loop , can re-use variables previously defined loop variables well: Note also finding length object common operation Python actually built-function called len: len much faster function write , much easier read two-line loop; also give us length many things haven’t met yet, always use can. body loop executed 6 times.","code":"odds = [1, 3, 5, 7] print(odds[0]) print(odds[1]) print(odds[2]) print(odds[3]) 1 3 5 7 odds = [1, 3, 5] print(odds[0]) print(odds[1]) print(odds[2]) print(odds[3]) 1 3 5 --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-3-7974b6cdaf14> in <module>()       3 print(odds[1])       4 print(odds[2]) ----> 5 print(odds[3])  IndexError: list index out of range odds = [1, 3, 5, 7] for num in odds:     print(num) 1 3 5 7 odds = [1, 3, 5, 7, 9, 11] for num in odds:     print(num) 1 3 5 7 9 11 for variable in collection:     # do things using variable, such as print length = 0 names = ['Curie', 'Darwin', 'Turing'] for value in names:     length = length + 1 print('There are', length, 'names in the list.') There are 3 names in the list. name = 'Rosalind' for name in ['Curie', 'Darwin', 'Turing']:     print(name) print('after the loop, name is', name) Curie Darwin Turing after the loop, name is Turing print(len([0, 1, 2, 3])) 4 for number in range(1, 4):     print(number) result = 1 for number in range(0, 3):     result = result * 5 print(result) numbers = [124, 402, 36] summed = 0 for num in numbers:     summed = summed + num print(summed) y = 0 for idx, coef in enumerate(coefs):     y = y + coef * x**idx"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s in a name?","title":null,"text":"example , loop variable given name num mnemonic; short ‘number’. can choose name want variables. might just easily chosen name banana loop variable, long use name invoke variable inside loop: good idea choose variable names meaningful, otherwise difficult understand loop .","code":"odds = [1, 3, 5, 7, 9, 11] for banana in odds:     print(banana) 1 3 5 7 9 11"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"from-1-to-n","dir":"Instructor","previous_headings":"","what":"From 1 to N","title":null,"text":"Python built-function called range generates sequence numbers. range can accept 1, 2, 3 parameters. one parameter given, range generates sequence length, starting zero incrementing 1. example, range(3) produces numbers 0, 1, 2. two parameters given, range starts first ends just second, incrementing one. example, range(2, 5) produces 2, 3, 4. range given 3 parameters, starts first one, ends just second one, increments third one. example, range(3, 10, 2) produces 3, 5, 7, 9. Using range, write loop prints first 3 natural numbers:","code":"1 2 3"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"understanding-the-loops","dir":"Instructor","previous_headings":"","what":"Understanding the loops","title":null,"text":"Given following loop: many times body loop executed? 3 times 4 times 5 times 6 times","code":"word = 'oxygen' for letter in word:     print(letter)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"computing-powers-with-loops","dir":"Instructor","previous_headings":"","what":"Computing Powers With Loops","title":null,"text":"Exponentiation built Python: Write loop calculates result 5 ** 3 using multiplication (without exponentiation).","code":"print(5 ** 3) 125"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"summing-a-list","dir":"Instructor","previous_headings":"","what":"Summing a list","title":null,"text":"Write loop calculates sum elements list adding element printing final value, [124, 402, 36] prints 562","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"computing-the-value-of-a-polynomial","dir":"Instructor","previous_headings":"","what":"Computing the Value of a Polynomial","title":null,"text":"built-function enumerate takes sequence (e.g. list) generates new sequence length. element new sequence pair composed index (0, 1, 2,…) value original sequence: code loops a_list, assigning index idx value val. Suppose encoded polynomial list coefficients following way: first element constant term, second element coefficient linear term, third coefficient quadratic term, etc. Write loop using enumerate(coefs) computes value y polynomial, given x coefs.","code":"for idx, val in enumerate(a_list):     # Do something using idx and val x = 5 coefs = [2, 4, 3] y = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2 print(y) 97"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use variable sequence process elements sequence one time. body loop must indented. Use len(thing) determine length something contains values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Analyzing Data Multiple Files  can operations many different files? Use library function get list filenames match wildcard pattern. Write loop process multiple files. final piece processing inflammation data, need way get list files data directory whose names start inflammation- end .csv. following library help us achieve : glob library contains function, also called glob, finds files directories whose names match pattern. provide patterns strings: character * matches zero characters, ? matches one character. can use get names CSV files current directory: examples show, glob.glob’s result list file directory paths arbitrary order. means can loop something filename turn. case, “something” want generate set plots file inflammation dataset. want start analyzing just first three files alphabetical order, can use sorted built-function generate new sorted list glob.glob output: plots generated second clinical trial file look similar plots first file: average plots show similar “noisy” rises falls; maxima plots show exactly linear rise fall; minima plots show similar staircase structures. third dataset shows much noisier average maxima plots far less suspicious first two datasets, however minima plot shows third dataset minima consistently zero across every day trial. produce heat map third data file see following: can see zero values sporadically distributed across patients days clinical trial, suggesting potential issues data collection throughout trial. addition, can see last patient study didn’t inflammation flare-ups throughout trial, suggesting may even suffer arthritis! spending time investigating heat map statistical plots, well exercises plot differences datasets generate composite patient statistics, gain insight twelve clinical trial datasets. datasets appear fall two categories: seemingly “ideal” datasets agree excellently Dr. Maverick’s claims, display suspicious maxima minima (inflammation-01.csv inflammation-02.csv) “noisy” datasets somewhat agree Dr. Maverick’s claims, show concerning data collection issues sporadic missing values even unsuitable candidate making clinical trial. fact, appears three “noisy” datasets (inflammation-03.csv, inflammation-08.csv, inflammation-11.csv) identical last value. Armed information, confront Dr. Maverick suspicious data duplicated files. Dr. Maverick admitted fabricating clinical data drug trial. discovering initial trial several issues, including unreliable data recording poor participant selection. order prove efficacy drug, created fake data. asked additional data, attempted generate fake datasets, also included original poor-quality dataset several times order make trials seem realistic. Congratulations! ’ve investigated inflammation data proven datasets synthetically generated. shame throw away synthetic datasets taught us much already, ’ll forgive imaginary Dr. Maverick continue use data learn program.","code":"import glob print(glob.glob('inflammation*.csv')) ['inflammation-05.csv', 'inflammation-11.csv', 'inflammation-12.csv', 'inflammation-08.csv', 'inflammation-03.csv', 'inflammation-06.csv', 'inflammation-09.csv', 'inflammation-07.csv', 'inflammation-10.csv', 'inflammation-02.csv', 'inflammation-04.csv', 'inflammation-01.csv'] import glob import numpy import matplotlib.pyplot  filenames = sorted(glob.glob('inflammation*.csv')) filenames = filenames[0:3] for filename in filenames:     print(filename)      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() inflammation-01.csv inflammation-02.csv inflammation-03.csv import glob import numpy import matplotlib.pyplot  filenames = sorted(glob.glob('inflammation*.csv'))  data0 = numpy.loadtxt(fname=filenames[0], delimiter=',') data1 = numpy.loadtxt(fname=filenames[1], delimiter=',')  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  matplotlib.pyplot.ylabel('Difference in average') matplotlib.pyplot.plot(numpy.mean(data0, axis=0) - numpy.mean(data1, axis=0))  fig.tight_layout() matplotlib.pyplot.show() import glob import numpy import matplotlib.pyplot  filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40))  for filename in filenames:     data = numpy.loadtxt(fname = filename, delimiter=',')     composite_data = composite_data + data  composite_data = composite_data / len(filenames)  fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))  axes1 = fig.add_subplot(1, 3, 1) axes2 = fig.add_subplot(1, 3, 2) axes3 = fig.add_subplot(1, 3, 3)  axes1.set_ylabel('average') axes1.plot(numpy.mean(composite_data, axis=0))  axes2.set_ylabel('max') axes2.plot(numpy.amax(composite_data, axis=0))  axes3.set_ylabel('min') axes3.plot(numpy.amin(composite_data, axis=0))  fig.tight_layout()  matplotlib.pyplot.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"plotting-differences","dir":"Instructor","previous_headings":"","what":"Plotting Differences","title":null,"text":"Plot difference average inflammations reported first second datasets (stored inflammation-01.csv inflammation-02.csv, correspondingly), .e., difference leftmost plots first two figures.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"generate-composite-statistics","dir":"Instructor","previous_headings":"","what":"Generate Composite Statistics","title":null,"text":"Use files generate dataset containing values averaged patients completing code inside loop given : use pyplot generate average, max, min patients.","code":"filenames = glob.glob('inflammation*.csv') composite_data = numpy.zeros((60, 40)) for filename in filenames:     # sum each new file's data into composite_data as it's read     # # and then divide the composite_data by number of samples composite_data = composite_data / len(filenames)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use glob.glob(pattern) create list files whose names match pattern. Use * pattern match zero characters, ? match single character.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Making Choices  can programs different things based data values? Write conditional statements including , elif, else branches. Correctly evaluate expressions containing . last lesson, discovered something suspicious going inflammation data drawing plots. can use Python automatically recognize different features saw, take different action ? lesson, ’ll learn write code runs certain conditions true. can ask Python take different actions, depending condition, statement: following example lead syntax error Python prompt, seems expect exactly one top-level statement per invocation. Removing print('done') example fix problem. IPython executes example single prompt without throwing error. second line code uses keyword tell Python want make choice. test follows statement true, body (.e., set lines indented underneath ) executed, “greater” printed. test false, body else executed instead, “greater” printed. one ever executed continuing program execution print “done”: Conditional statements don’t include else. isn’t one, Python simply nothing test false: can also chain several tests together using elif, short “else ”. following Python code uses elif print sign number. Note test equality use double equals sign == rather single equals sign = used assign values. can also combine tests using . true parts true: true least one part true: Now ’ve seen conditionals work, can use check suspicious features saw inflammation data. use functions provided numpy module . Therefore, ’re working new Python session, make sure load module data : first couple plots, saw maximum daily inflammation exhibits strange behavior raises one unit day. Wouldn’t good idea detect behavior report suspicious? Let’s ! However, instead checking every single day study, let’s merely check maximum inflammation beginning (day 0) middle (day 20) study equal corresponding day numbers. also saw different problem third dataset; minima per day zero (looks like healthy person snuck study). can also check elif condition: neither conditions true, can use else give -clear: Let’s test : way, asked Python something different depending condition data. printed messages cases, also imagine using else catch-messages printed something wrong, freeing us manually examine every plot features ’ve seen . C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met. built-function abs returns absolute value number: works Booleans True False string representations can printed. pass means “don’t anything”. particular case, ’s actually needed, since num == 0 neither sum needs change, illustrates use elif pass.","code":"num = 37 if num > 100:     print('greater') else:     print('not greater') print('done') not greater done num = 53 print('before conditional...') if num > 100:     print(num, 'is greater than 100') print('...after conditional') before conditional... ...after conditional num = -3  if num > 0:     print(num, 'is positive') elif num == 0:     print(num, 'is zero') else:     print(num, 'is negative') -3 is negative if (1 > 0) and (-1 >= 0):     print('both parts are true') else:     print('at least one part is false') at least one part is false if (1 < 0) or (1 >= 0):     print('at least one test is true') at least one test is true import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Suspicious looking maxima! data = numpy.loadtxt(fname='inflammation-03.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Minima add up to zero! print(abs(-12)) 12 a = 5 b = 5.1  if abs(a - b) <= 0.1 * abs(b):     print('True') else:     print('False') print(abs(a - b) <= 0.1 * abs(b)) positive_sum = 0 negative_sum = 0 test_list = [3, 4, 6, 1, -1, -5, 0, 7, -8] for num in test_list:     if num > 0:         positive_sum += num     elif num == 0:         pass     else:         negative_sum += num print(positive_sum, negative_sum) for filename in filenames:     if filename.startswith('inflammation-'):         large_files.append(filename)     elif filename.startswith('small-'):         small_files.append(filename)     else:         other_files.append(filename)  print('large_files:', large_files) print('small_files:', small_files) print('other_files:', other_files) vowels = 'aeiouAEIOU' sentence = 'Mary had a little lamb.' count = 0 for char in sentence:     if char in vowels:         count += 1  print('The number of vowels in this string is ' + str(count))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"headingInstructor1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"can ask Python take different actions, depending condition, statement: following example lead syntax error Python prompt, seems expect exactly one top-level statement per invocation. Removing print('done') example fix problem. IPython executes example single prompt without throwing error. second line code uses keyword tell Python want make choice. test follows statement true, body (.e., set lines indented underneath ) executed, “greater” printed. test false, body else executed instead, “greater” printed. one ever executed continuing program execution print “done”: Conditional statements don’t include else. isn’t one, Python simply nothing test false: can also chain several tests together using elif, short “else ”. following Python code uses elif print sign number. Note test equality use double equals sign == rather single equals sign = used assign values. can also combine tests using . true parts true: true least one part true:","code":"num = 37 if num > 100:     print('greater') else:     print('not greater') print('done') not greater done num = 53 print('before conditional...') if num > 100:     print(num, 'is greater than 100') print('...after conditional') before conditional... ...after conditional num = -3  if num > 0:     print(num, 'is positive') elif num == 0:     print(num, 'is zero') else:     print(num, 'is negative') -3 is negative if (1 > 0) and (-1 >= 0):     print('both parts are true') else:     print('at least one part is false') at least one part is false if (1 < 0) or (1 >= 0):     print('at least one test is true') at least one test is true"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"comparing-in-python","dir":"Instructor","previous_headings":"","what":"Comparing in Python","title":null,"text":"Along > == operators already used comparing values conditionals, options know : >: greater <: less ==: equal !=: equal >=: greater equal <=: less equal ","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"true-and-false","dir":"Instructor","previous_headings":"","what":"True and False","title":null,"text":"True False special words Python called booleans, represent truth values. statement 1 < 0 returns value False, -1 < 0 returns value True.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen conditionals work, can use check suspicious features saw inflammation data. use functions provided numpy module . Therefore, ’re working new Python session, make sure load module data : first couple plots, saw maximum daily inflammation exhibits strange behavior raises one unit day. Wouldn’t good idea detect behavior report suspicious? Let’s ! However, instead checking every single day study, let’s merely check maximum inflammation beginning (day 0) middle (day 20) study equal corresponding day numbers. also saw different problem third dataset; minima per day zero (looks like healthy person snuck study). can also check elif condition: neither conditions true, can use else give -clear: Let’s test : way, asked Python something different depending condition data. printed messages cases, also imagine using else catch-messages printed something wrong, freeing us manually examine every plot features ’ve seen . C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met. built-function abs returns absolute value number: works Booleans True False string representations can printed. pass means “don’t anything”. particular case, ’s actually needed, since num == 0 neither sum needs change, illustrates use elif pass.","code":"import numpy data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Suspicious looking maxima! data = numpy.loadtxt(fname='inflammation-03.csv', delimiter=',')  max_inflammation_0 = numpy.amax(data, axis=0)[0] max_inflammation_20 = numpy.amax(data, axis=0)[20]  if max_inflammation_0 == 0 and max_inflammation_20 == 20:     print('Suspicious looking maxima!') elif numpy.sum(numpy.amin(data, axis=0)) == 0:     print('Minima add up to zero!') else:     print('Seems OK!') Minima add up to zero! print(abs(-12)) 12 a = 5 b = 5.1  if abs(a - b) <= 0.1 * abs(b):     print('True') else:     print('False') print(abs(a - b) <= 0.1 * abs(b)) positive_sum = 0 negative_sum = 0 test_list = [3, 4, 6, 1, -1, -5, 0, 7, -8] for num in test_list:     if num > 0:         positive_sum += num     elif num == 0:         pass     else:         negative_sum += num print(positive_sum, negative_sum) for filename in filenames:     if filename.startswith('inflammation-'):         large_files.append(filename)     elif filename.startswith('small-'):         small_files.append(filename)     else:         other_files.append(filename)  print('large_files:', large_files) print('small_files:', small_files) print('other_files:', other_files) vowels = 'aeiouAEIOU' sentence = 'Mary had a little lamb.' count = 0 for char in sentence:     if char in vowels:         count += 1  print('The number of vowels in this string is ' + str(count))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"how-many-paths","dir":"Instructor","previous_headings":"","what":"How Many Paths?","title":null,"text":"Consider code: following printed run code? pick answer? B C B C","code":"if 4 > 5:     print('A') elif 4 == 5:     print('B') elif 4 < 5:     print('C')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"what-is-truth","dir":"Instructor","previous_headings":"","what":"What Is Truth?","title":null,"text":"True False booleans values Python true false. fact, value can used elif. reading running code , explain rule values considered true considered false.","code":"if '':     print('empty string is true') if 'word':     print('word is true') if []:     print('empty list is true') if [1, 2, 3]:     print('non-empty list is true') if 0:     print('zero is true') if 1:     print('one is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"thats-not-not-what-i-meant","dir":"Instructor","previous_headings":"","what":"That’s Not Not What I Meant","title":null,"text":"Sometimes useful check whether condition true. Boolean operator can explicitly. reading running code , write statements use test rule formulated previous challenge.","code":"if not '':     print('empty string is not true') if not 'word':     print('word is not true') if not not True:     print('not not True is true')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"close-enough","dir":"Instructor","previous_headings":"","what":"Close Enough","title":null,"text":"Write conditions print True variable within 10% variable b False otherwise. Compare implementation partner’s: get answer possible pairs numbers?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"in-place-operators","dir":"Instructor","previous_headings":"","what":"In-Place Operators","title":null,"text":"Python (languages C family) provides -place operators work like : Write code sums positive negative numbers list separately, using -place operators. think result less readable writing without -place operators?","code":"x = 1  # original value x += 1 # add one to x, assigning result back to x x *= 3 # multiply x by 3 print(x) 6"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"sorting-a-list-into-buckets","dir":"Instructor","previous_headings":"","what":"Sorting a List Into Buckets","title":null,"text":"data folder, large data sets stored files whose names start “inflammation-” small data sets – files whose names start “small-”. also files care point. ’d like break files three lists called large_files, small_files, other_files, respectively. Add code template . Note string method startswith returns True string called starts string passed argument, : Use following Python code starting point: solution : loop names files figure group filename belongs append filename list end three lists :","code":"'String'.startswith('Str') True 'String'.startswith('str') False filenames = ['inflammation-01.csv',          'myscript.py',          'inflammation-02.csv',          'small-01.csv',          'small-02.csv'] large_files = [] small_files = [] other_files = [] large_files = ['inflammation-01.csv', 'inflammation-02.csv'] small_files = ['small-01.csv', 'small-02.csv'] other_files = ['myscript.py']"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"counting-vowels","dir":"Instructor","previous_headings":"","what":"Counting Vowels","title":null,"text":"Write loop counts number vowels character string. Test individual words full sentences. done, compare solution neighbor’s. make decisions handle letter ‘y’ (people think vowel, )?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Use condition start conditional statement, elif condition provide additional tests, else provide default. bodies branches conditional statements must indented. Use == test equality. X Y true X Y true. X Y true either X Y, , true. Zero, empty string, empty list considered false; numbers, strings, lists considered true. True False represent truth values.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Creating Functions  can define new functions? ’s difference defining calling function? happens call function? Define function takes parameters. Return value function. Test debug function. Set default values function parameters. Explain divide programs small, single-purpose functions. point, ’ve seen code can Python make decisions sees data. want convert data, like taking temperature Fahrenheit converting Celsius. write something like converting single number second number just copy line rename variables trouble soon couple times. Cutting pasting going make code get long repetitive, quickly. ’d like way package code easier reuse, shorthand way re-executing longer pieces code. Python can use ‘functions’. Let’s start defining function fahr_to_celsius converts temperatures Fahrenheit Celsius: function definition opens keyword def followed name function (fahr_to_celsius) parenthesized list parameter names (temp). body function — statements executed runs — indented definition line. body concludes return keyword followed return value. call function, values pass assigned variables can use inside function. Inside function, use return statement send result back whoever asked . Let’s try running function. command call function, using “32” input return function value. fact, calling function different calling function: ’ve successfully called function defined, access value returned. Now ’ve seen turn Fahrenheit Celsius, can also write function turn Celsius Kelvin: converting Fahrenheit Kelvin? write formula, don’t need . Instead, can compose two functions already created: first taste larger programs built: define basic operations, combine ever-larger chunks get effect want. Real-life functions usually larger ones shown — typically half dozen dozen lines — shouldn’t ever much longer , next person reads won’t able understand ’s going . composing temperature conversion functions, created variables inside functions, temp, temp_c, temp_f, temp_k. refer variables local variables longer exist function done executing. try access values outside function, encounter error: want reuse temperature Kelvin calculated fahr_to_kelvin, can store result function call variable: variable temp_kelvin, defined outside function, said global. Inside function, one can read value global variables: Now know wrap bits code functions, can make inflammation analysis easier read easier reuse. First, let’s make visualize function generates plots: another function called detect_problems checks systematics noticed: Wait! Didn’t forget specify functions return? Well, didn’t. Python, functions required include return statement can used sole purpose grouping together pieces code conceptually one thing. cases, function names usually describe , e.g. visualize, detect_problems. Notice rather jumbling code together one giant loop, can now read reuse ideas separately. can reproduce previous analysis much simpler loop: giving functions human-readable names, can easily read understand happening loop. Even better, later date want use either pieces code , can single line. start putting things functions can re-use , need start testing functions working correctly. see , let’s write function offset dataset ’s mean value shifts user-defined value: test actual data, since don’t know values , hard tell result correct. Instead, let’s use NumPy create matrix 0’s offset values mean value 3: looks right, let’s try offset_mean real data: ’s hard tell default output whether result correct, tests can run reassure us: seems almost right: original mean 6.1, lower bound zero now -6.1. mean offset data isn’t quite zero, ’s pretty close. can even go check standard deviation hasn’t changed: values look , probably wouldn’t notice different sixth decimal place. Let’s instead: Everything looks good, probably get back analysis. one task first, though: write documentation function remind later ’s use . usual way put documentation software add comments like : ’s better way, though. first thing function string isn’t assigned variable, string attached function documentation: better can now ask Python’s built-help system show us documentation function: string like called docstring. don’t need use triple quotes write one, , can break string across multiple lines: passed parameters functions two ways: directly, type(data), name, numpy.loadtxt(fname='something.csv', delimiter=','). fact, can pass filename loadtxt without fname=: still need say delimiter=: understand ’s going , make functions easier use, let’s re-define offset_mean function like : key change second parameter now written target_mean_value=0.0 instead just target_mean_value. call function two arguments, works : can also now call just one parameter, case target_mean_value automatically assigned default value 0.0: handy: usually want function work one way, occasionally need something else, can allow people pass parameter need provide default make normal case easier. example shows Python matches values parameters: example shows, parameters matched left right, haven’t given value explicitly get default value. can override behavior naming value pass : hand, let’s look help numpy.loadtxt: ’s lot information , important part first couple lines: tells us loadtxt one parameter called fname doesn’t default value, eight others . call function like : filename assigned fname (want), delimiter string ',' assigned dtype rather delimiter, dtype second parameter list. However ',' isn’t known dtype code produced error message tried run . call loadtxt don’t provide fname= filename ’s first item list, want ',' assigned variable delimiter, provide delimiter= second parameter since delimiter second parameter list. Consider two functions: functions s std_dev computationally equivalent (calculate sample standard deviation), human reader, look different. probably found std_dev much easier read understand s. example illustrates, documentation programmer’s coding style combine determine easy others read understand programmer’s code. Choosing meaningful variable names using blank spaces break code logical “chunks” helpful techniques producing readable code. useful sharing code others, also original programmer. need revisit code wrote months ago haven’t thought since , appreciate value readable code! Python first execute function add = 7 b = 3, , therefore, print 10. However, function add line starts return (return “statement”), , default, return nothing , Python world, called None. Therefore, assigned None last line (print()) print None. result, see: k 0 k inside function f2k doesn’t know k defined outside function. f2k function called, creates local variable k. function return values alter k outside local copy. Therefore original value k remains unchanged. Beware local k created f2k internal statements affect new value . k read, simply retrieve global k value. Attempting define numbers function results 4. SyntaxError. defined parameters two four given default values. one three given default values, required included arguments function called must placed parameters default values function definition. given call func displays : -1 b: 2 c: 6. -1 assigned first parameter , 2 assigned next parameter b, c passed value, uses default value 6.","code":"fahrenheit_val = 99 celsius_val = ((fahrenheit_val - 32) * (5/9)) fahrenheit_val = 99 celsius_val = ((fahrenheit_val - 32) * (5/9))  fahrenheit_val2 = 43 celsius_val2 = ((fahrenheit_val2 - 32) * (5/9)) def explicit_fahr_to_celsius(temp):     # Assign the converted value to a variable     converted = ((temp - 32) * (5/9))     # Return the value of the new variable     return converted      def fahr_to_celsius(temp):     # Return converted value more efficiently using the return     # function without creating a new variable. This code does     # the same thing as the previous function but it is more explicit     # in explaining how the return command works.     return ((temp - 32) * (5/9)) fahr_to_celsius(32) print('freezing point of water:', fahr_to_celsius(32), 'C') print('boiling point of water:', fahr_to_celsius(212), 'C') freezing point of water: 0.0 C boiling point of water: 100.0 C def celsius_to_kelvin(temp_c):     return temp_c + 273.15  print('freezing point of water in Kelvin:', celsius_to_kelvin(0.)) freezing point of water in Kelvin: 273.15 def fahr_to_kelvin(temp_f):     temp_c = fahr_to_celsius(temp_f)     temp_k = celsius_to_kelvin(temp_c)     return temp_k  print('boiling point of water in Kelvin:', fahr_to_kelvin(212.0)) boiling point of water in Kelvin: 373.15 print('Again, temperature in Kelvin was:', temp_k) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-1-eed2471d229b> in <module> ----> 1 print('Again, temperature in Kelvin was:', temp_k)  NameError: name 'temp_k' is not defined temp_kelvin = fahr_to_kelvin(212.0) print('temperature in Kelvin was:', temp_kelvin) temperature in Kelvin was: 373.15 def print_temperatures():     print('temperature in Fahrenheit was:', temp_fahr)     print('temperature in Kelvin was:', temp_kelvin)  temp_fahr = 212.0 temp_kelvin = fahr_to_kelvin(temp_fahr)  print_temperatures() temperature in Fahrenheit was: 212.0 temperature in Kelvin was: 373.15 def visualize(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() def detect_problems(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      if numpy.amax(data, axis=0)[0] == 0 and numpy.amax(data, axis=0)[20] == 20:         print('Suspicious looking maxima!')     elif numpy.sum(numpy.amin(data, axis=0)) == 0:         print('Minima add up to zero!')     else:         print('Seems OK!') filenames = sorted(glob.glob('inflammation*.csv'))  for filename in filenames[:3]:     print(filename)     visualize(filename)     detect_problems(filename) def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value z = numpy.zeros((2, 2)) print(offset_mean(z, 3)) [[ 3.  3.]  [ 3.  3.]] data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(offset_mean(data, 0)) [[-6.14875 -6.14875 -5.14875 ... -3.14875 -6.14875 -6.14875]  [-6.14875 -5.14875 -4.14875 ... -5.14875 -6.14875 -5.14875]  [-6.14875 -5.14875 -5.14875 ... -4.14875 -5.14875 -5.14875]  ...  [-6.14875 -5.14875 -5.14875 ... -5.14875 -5.14875 -5.14875]  [-6.14875 -6.14875 -6.14875 ... -6.14875 -4.14875 -6.14875]  [-6.14875 -6.14875 -5.14875 ... -5.14875 -5.14875 -6.14875]] print('original min, mean, and max are:', numpy.amin(data), numpy.mean(data), numpy.amax(data)) offset_data = offset_mean(data, 0) print('min, mean, and max of offset data are:',       numpy.amin(offset_data),       numpy.mean(offset_data),       numpy.amax(offset_data)) original min, mean, and max are: 0.0 6.14875 20.0 min, mean, and max of offset data are: -6.14875 2.842170943040401e-16 13.85125 print('std dev before and after:', numpy.std(data), numpy.std(offset_data)) std dev before and after: 4.613833197118566 4.613833197118566 print('difference in standard deviations before and after:',       numpy.std(data) - numpy.std(offset_data)) difference in standard deviations before and after: 0.0 # offset_mean(data, target_mean_value): # return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.\"\"\"     return (data - numpy.mean(data)) + target_mean_value help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value  help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.]) numpy.loadtxt('inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) numpy.loadtxt('inflammation-01.csv', ',') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/lib/npyio.py\", line 1041, in loa dtxt     dtype = np.dtype(dtype)   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/core/_internal.py\", line 199, in _commastring     newitem = (dtype, eval(repeats))   File \"<string>\", line 1     ,     ^ SyntaxError: unexpected EOF while parsing def offset_mean(data, target_mean_value=0.0):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value, (0 by default).      Examples     --------     >>> offset_mean([1, 2, 3])     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value test_data = numpy.zeros((2, 2)) print(offset_mean(test_data, 3)) [[ 3.  3.]  [ 3.  3.]] more_data = 5 + numpy.zeros((2, 2)) print('data before mean offset:') print(more_data) print('offset data:') print(offset_mean(more_data)) data before mean offset: [[ 5.  5.]  [ 5.  5.]] offset data: [[ 0.  0.]  [ 0.  0.]] def display(a=1, b=2, c=3):     print('a:', a, 'b:', b, 'c:', c)  print('no parameters:') display() print('one parameter:') display(55) print('two parameters:') display(55, 66) no parameters: a: 1 b: 2 c: 3 one parameter: a: 55 b: 2 c: 3 two parameters: a: 55 b: 66 c: 3 print('only setting the value of c') display(c=77) only setting the value of c a: 1 b: 2 c: 77 help(numpy.loadtxt) Help on function loadtxt in module numpy.lib.npyio:  loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes')     Load data from a text file.      Each row in the text file must have the same number of values.      Parameters     ---------- ... loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes') numpy.loadtxt('inflammation-01.csv', ',') def s(p):     a = 0     for v in p:         a += v     m = a / len(p)     d = 0     for v in p:         d += (v - m) * (v - m)     return numpy.sqrt(d / (len(p) - 1))  def std_dev(sample):     sample_sum = 0     for value in sample:         sample_sum += value      sample_mean = sample_sum / len(sample)      sum_squared_devs = 0     for value in sample:         sum_squared_devs += (value - sample_mean) * (value - sample_mean)      return numpy.sqrt(sum_squared_devs / (len(sample) - 1)) def fence(original, wrapper):     return wrapper + original + wrapper 10 None def outer(input_string):     return input_string[0] + input_string[-1] def rescale(input_array):     L = numpy.amin(input_array)     H = numpy.amax(input_array)     output_array = (input_array - L) / (H - L)     return output_array \"\"\"Takes an array as input, and returns a corresponding array scaled so that 0 corresponds to the minimum and 1 to the maximum value of the input array.  Examples: >>> rescale(numpy.arange(10.0)) array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ]) >>> rescale(numpy.linspace(0, 100, 5)) array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]) \"\"\" def rescale(input_array, low_val=0.0, high_val=1.0):     \"\"\"rescales input array values to lie between low_val and high_val\"\"\"     L = numpy.amin(input_array)     H = numpy.amax(input_array)     intermed_array = (input_array - L) / (H - L)     output_array = intermed_array * (high_val - low_val) + low_val     return output_array 259.81666666666666 278.15 273.15 0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Now ’ve seen turn Fahrenheit Celsius, can also write function turn Celsius Kelvin: converting Fahrenheit Kelvin? write formula, don’t need . Instead, can compose two functions already created: first taste larger programs built: define basic operations, combine ever-larger chunks get effect want. Real-life functions usually larger ones shown — typically half dozen dozen lines — shouldn’t ever much longer , next person reads won’t able understand ’s going .","code":"def celsius_to_kelvin(temp_c):     return temp_c + 273.15  print('freezing point of water in Kelvin:', celsius_to_kelvin(0.)) freezing point of water in Kelvin: 273.15 def fahr_to_kelvin(temp_f):     temp_c = fahr_to_celsius(temp_f)     temp_k = celsius_to_kelvin(temp_c)     return temp_k  print('boiling point of water in Kelvin:', fahr_to_kelvin(212.0)) boiling point of water in Kelvin: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"composing temperature conversion functions, created variables inside functions, temp, temp_c, temp_f, temp_k. refer variables local variables longer exist function done executing. try access values outside function, encounter error: want reuse temperature Kelvin calculated fahr_to_kelvin, can store result function call variable: variable temp_kelvin, defined outside function, said global. Inside function, one can read value global variables:","code":"print('Again, temperature in Kelvin was:', temp_k) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-1-eed2471d229b> in <module> ----> 1 print('Again, temperature in Kelvin was:', temp_k)  NameError: name 'temp_k' is not defined temp_kelvin = fahr_to_kelvin(212.0) print('temperature in Kelvin was:', temp_kelvin) temperature in Kelvin was: 373.15 def print_temperatures():     print('temperature in Fahrenheit was:', temp_fahr)     print('temperature in Kelvin was:', temp_kelvin)  temp_fahr = 212.0 temp_kelvin = fahr_to_kelvin(temp_fahr)  print_temperatures() temperature in Fahrenheit was: 212.0 temperature in Kelvin was: 373.15"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Now know wrap bits code functions, can make inflammation analysis easier read easier reuse. First, let’s make visualize function generates plots: another function called detect_problems checks systematics noticed: Wait! Didn’t forget specify functions return? Well, didn’t. Python, functions required include return statement can used sole purpose grouping together pieces code conceptually one thing. cases, function names usually describe , e.g. visualize, detect_problems. Notice rather jumbling code together one giant loop, can now read reuse ideas separately. can reproduce previous analysis much simpler loop: giving functions human-readable names, can easily read understand happening loop. Even better, later date want use either pieces code , can single line.","code":"def visualize(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      fig = matplotlib.pyplot.figure(figsize=(10.0, 3.0))      axes1 = fig.add_subplot(1, 3, 1)     axes2 = fig.add_subplot(1, 3, 2)     axes3 = fig.add_subplot(1, 3, 3)      axes1.set_ylabel('average')     axes1.plot(numpy.mean(data, axis=0))      axes2.set_ylabel('max')     axes2.plot(numpy.amax(data, axis=0))      axes3.set_ylabel('min')     axes3.plot(numpy.amin(data, axis=0))      fig.tight_layout()     matplotlib.pyplot.show() def detect_problems(filename):      data = numpy.loadtxt(fname=filename, delimiter=',')      if numpy.amax(data, axis=0)[0] == 0 and numpy.amax(data, axis=0)[20] == 20:         print('Suspicious looking maxima!')     elif numpy.sum(numpy.amin(data, axis=0)) == 0:         print('Minima add up to zero!')     else:         print('Seems OK!') filenames = sorted(glob.glob('inflammation*.csv'))  for filename in filenames[:3]:     print(filename)     visualize(filename)     detect_problems(filename)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"start putting things functions can re-use , need start testing functions working correctly. see , let’s write function offset dataset ’s mean value shifts user-defined value: test actual data, since don’t know values , hard tell result correct. Instead, let’s use NumPy create matrix 0’s offset values mean value 3: looks right, let’s try offset_mean real data: ’s hard tell default output whether result correct, tests can run reassure us: seems almost right: original mean 6.1, lower bound zero now -6.1. mean offset data isn’t quite zero, ’s pretty close. can even go check standard deviation hasn’t changed: values look , probably wouldn’t notice different sixth decimal place. Let’s instead: Everything looks good, probably get back analysis. one task first, though: write documentation function remind later ’s use . usual way put documentation software add comments like : ’s better way, though. first thing function string isn’t assigned variable, string attached function documentation: better can now ask Python’s built-help system show us documentation function: string like called docstring. don’t need use triple quotes write one, , can break string across multiple lines:","code":"def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value z = numpy.zeros((2, 2)) print(offset_mean(z, 3)) [[ 3.  3.]  [ 3.  3.]] data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print(offset_mean(data, 0)) [[-6.14875 -6.14875 -5.14875 ... -3.14875 -6.14875 -6.14875]  [-6.14875 -5.14875 -4.14875 ... -5.14875 -6.14875 -5.14875]  [-6.14875 -5.14875 -5.14875 ... -4.14875 -5.14875 -5.14875]  ...  [-6.14875 -5.14875 -5.14875 ... -5.14875 -5.14875 -5.14875]  [-6.14875 -6.14875 -6.14875 ... -6.14875 -4.14875 -6.14875]  [-6.14875 -6.14875 -5.14875 ... -5.14875 -5.14875 -6.14875]] print('original min, mean, and max are:', numpy.amin(data), numpy.mean(data), numpy.amax(data)) offset_data = offset_mean(data, 0) print('min, mean, and max of offset data are:',       numpy.amin(offset_data),       numpy.mean(offset_data),       numpy.amax(offset_data)) original min, mean, and max are: 0.0 6.14875 20.0 min, mean, and max of offset data are: -6.14875 2.842170943040401e-16 13.85125 print('std dev before and after:', numpy.std(data), numpy.std(offset_data)) std dev before and after: 4.613833197118566 4.613833197118566 print('difference in standard deviations before and after:',       numpy.std(data) - numpy.std(offset_data)) difference in standard deviations before and after: 0.0 # offset_mean(data, target_mean_value): # return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     return (data - numpy.mean(data)) + target_mean_value def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.\"\"\"     return (data - numpy.mean(data)) + target_mean_value help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data with its mean offset to match the desired value. def offset_mean(data, target_mean_value):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value  help(offset_mean) Help on function offset_mean in module __main__:  offset_mean(data, target_mean_value)     Return a new array containing the original data        with its mean offset to match the desired value.      Examples     --------     >>> offset_mean([1, 2, 3], 0)     array([-1.,  0.,  1.])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"passed parameters functions two ways: directly, type(data), name, numpy.loadtxt(fname='something.csv', delimiter=','). fact, can pass filename loadtxt without fname=: still need say delimiter=: understand ’s going , make functions easier use, let’s re-define offset_mean function like : key change second parameter now written target_mean_value=0.0 instead just target_mean_value. call function two arguments, works : can also now call just one parameter, case target_mean_value automatically assigned default value 0.0: handy: usually want function work one way, occasionally need something else, can allow people pass parameter need provide default make normal case easier. example shows Python matches values parameters: example shows, parameters matched left right, haven’t given value explicitly get default value. can override behavior naming value pass : hand, let’s look help numpy.loadtxt: ’s lot information , important part first couple lines: tells us loadtxt one parameter called fname doesn’t default value, eight others . call function like : filename assigned fname (want), delimiter string ',' assigned dtype rather delimiter, dtype second parameter list. However ',' isn’t known dtype code produced error message tried run . call loadtxt don’t provide fname= filename ’s first item list, want ',' assigned variable delimiter, provide delimiter= second parameter since delimiter second parameter list.","code":"numpy.loadtxt('inflammation-01.csv', delimiter=',') array([[ 0.,  0.,  1., ...,  3.,  0.,  0.],        [ 0.,  1.,  2., ...,  1.,  0.,  1.],        [ 0.,  1.,  1., ...,  2.,  1.,  1.],        ...,        [ 0.,  1.,  1., ...,  1.,  1.,  1.],        [ 0.,  0.,  0., ...,  0.,  2.,  0.],        [ 0.,  0.,  1., ...,  1.,  1.,  0.]]) numpy.loadtxt('inflammation-01.csv', ',') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/lib/npyio.py\", line 1041, in loa dtxt     dtype = np.dtype(dtype)   File \"/Users/username/anaconda3/lib/python3.6/site-packages/numpy/core/_internal.py\", line 199, in _commastring     newitem = (dtype, eval(repeats))   File \"<string>\", line 1     ,     ^ SyntaxError: unexpected EOF while parsing def offset_mean(data, target_mean_value=0.0):     \"\"\"Return a new array containing the original data        with its mean offset to match the desired value, (0 by default).      Examples     --------     >>> offset_mean([1, 2, 3])     array([-1.,  0.,  1.])     \"\"\"     return (data - numpy.mean(data)) + target_mean_value test_data = numpy.zeros((2, 2)) print(offset_mean(test_data, 3)) [[ 3.  3.]  [ 3.  3.]] more_data = 5 + numpy.zeros((2, 2)) print('data before mean offset:') print(more_data) print('offset data:') print(offset_mean(more_data)) data before mean offset: [[ 5.  5.]  [ 5.  5.]] offset data: [[ 0.  0.]  [ 0.  0.]] def display(a=1, b=2, c=3):     print('a:', a, 'b:', b, 'c:', c)  print('no parameters:') display() print('one parameter:') display(55) print('two parameters:') display(55, 66) no parameters: a: 1 b: 2 c: 3 one parameter: a: 55 b: 2 c: 3 two parameters: a: 55 b: 66 c: 3 print('only setting the value of c') display(c=77) only setting the value of c a: 1 b: 2 c: 77 help(numpy.loadtxt) Help on function loadtxt in module numpy.lib.npyio:  loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes')     Load data from a text file.      Each row in the text file must have the same number of values.      Parameters     ---------- ... loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, use cols=None, unpack=False, ndmin=0, encoding='bytes') numpy.loadtxt('inflammation-01.csv', ',')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Consider two functions: functions s std_dev computationally equivalent (calculate sample standard deviation), human reader, look different. probably found std_dev much easier read understand s. example illustrates, documentation programmer’s coding style combine determine easy others read understand programmer’s code. Choosing meaningful variable names using blank spaces break code logical “chunks” helpful techniques producing readable code. useful sharing code others, also original programmer. need revisit code wrote months ago haven’t thought since , appreciate value readable code! Python first execute function add = 7 b = 3, , therefore, print 10. However, function add line starts return (return “statement”), , default, return nothing , Python world, called None. Therefore, assigned None last line (print()) print None. result, see: k 0 k inside function f2k doesn’t know k defined outside function. f2k function called, creates local variable k. function return values alter k outside local copy. Therefore original value k remains unchanged. Beware local k created f2k internal statements affect new value . k read, simply retrieve global k value. Attempting define numbers function results 4. SyntaxError. defined parameters two four given default values. one three given default values, required included arguments function called must placed parameters default values function definition. given call func displays : -1 b: 2 c: 6. -1 assigned first parameter , 2 assigned next parameter b, c passed value, uses default value 6.","code":"def s(p):     a = 0     for v in p:         a += v     m = a / len(p)     d = 0     for v in p:         d += (v - m) * (v - m)     return numpy.sqrt(d / (len(p) - 1))  def std_dev(sample):     sample_sum = 0     for value in sample:         sample_sum += value      sample_mean = sample_sum / len(sample)      sum_squared_devs = 0     for value in sample:         sum_squared_devs += (value - sample_mean) * (value - sample_mean)      return numpy.sqrt(sum_squared_devs / (len(sample) - 1)) def fence(original, wrapper):     return wrapper + original + wrapper 10 None def outer(input_string):     return input_string[0] + input_string[-1] def rescale(input_array):     L = numpy.amin(input_array)     H = numpy.amax(input_array)     output_array = (input_array - L) / (H - L)     return output_array \"\"\"Takes an array as input, and returns a corresponding array scaled so that 0 corresponds to the minimum and 1 to the maximum value of the input array.  Examples: >>> rescale(numpy.arange(10.0)) array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ]) >>> rescale(numpy.linspace(0, 100, 5)) array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]) \"\"\" def rescale(input_array, low_val=0.0, high_val=1.0):     \"\"\"rescales input array values to lie between low_val and high_val\"\"\"     L = numpy.amin(input_array)     H = numpy.amax(input_array)     intermed_array = (input_array - L) / (H - L)     output_array = intermed_array * (high_val - low_val) + low_val     return output_array 259.81666666666666 278.15 273.15 0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"combining-strings","dir":"Instructor","previous_headings":"","what":"Combining Strings","title":null,"text":"“Adding” two strings produces concatenation: '' + 'b' 'ab'. Write function called fence takes two parameters called original wrapper returns new string wrapper character beginning end original. call function look like :","code":"print(fence('name', '*')) *name*"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"return-versus-print","dir":"Instructor","previous_headings":"","what":"Return versus print","title":null,"text":"Note return print interchangeable. print Python function prints data screen. enables us, users, see data. return statement, hand, makes data visible program. Let’s look following function: Question: see execute following commands?","code":"def add(a, b):     print(a + b) A = add(7, 3) print(A)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"selecting-characters-from-strings","dir":"Instructor","previous_headings":"","what":"Selecting Characters From Strings","title":null,"text":"variable s refers string, s[0] string’s first character s[-1] last. Write function called outer returns string made just first last characters input. call function look like :","code":"print(outer('helium')) hm"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"rescaling-an-array","dir":"Instructor","previous_headings":"","what":"Rescaling an Array","title":null,"text":"Write function rescale takes array input returns corresponding array values scaled lie range 0.0 1.0. (Hint: L H lowest highest values original array, replacement value v (v-L) / (H-L).)","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"testing-and-documenting-your-function","dir":"Instructor","previous_headings":"","what":"Testing and Documenting Your Function","title":null,"text":"Run commands help(numpy.arange) help(numpy.linspace) see use functions generate regularly-spaced values, use values test rescale function. ’ve successfully tested function, add docstring explains .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"defining-defaults-1","dir":"Instructor","previous_headings":"","what":"Defining Defaults","title":null,"text":"Rewrite rescale function scales data lie 0.0 1.0 default, allow caller specify lower upper bounds want. Compare implementation neighbor’s: two functions always behave way?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"variables-inside-and-outside-functions","dir":"Instructor","previous_headings":"","what":"Variables Inside and Outside Functions","title":null,"text":"following piece code display run — ?","code":"f = 0 k = 0  def f2k(f):     k = ((f - 32) * (5.0 / 9.0)) + 273.15     return k  print(f2k(8)) print(f2k(41)) print(f2k(32))  print(k)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"mixing-default-and-non-default-parameters","dir":"Instructor","previous_headings":"","what":"Mixing Default and Non-Default Parameters","title":null,"text":"Given following code: expect printed? actually printed? rule think Python following? 1234 one2three4 1239 SyntaxError Given , following piece code display run? : b: 3 c: 6 : -1 b: 3 c: 6 : -1 b: 2 c: 6 : b: -1 c: 2","code":"def numbers(one, two=2, three, four=4):     n = str(one) + str(two) + str(three) + str(four)     return n  print(numbers(1, three=3)) def func(a, b=3, c=6):     print('a: ', a, 'b: ', b, 'c:', c)  func(-1, 2)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"readable-code","dir":"Instructor","previous_headings":"","what":"Readable Code","title":null,"text":"Revise function wrote one previous exercises try make code readable. , collaborate one neighbors critique ’s functions discuss function implementations improved make readable.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Define function using def function_name(parameter). body function must indented. Call function using function_name(value). Numbers stored integers floating-point numbers. Variables defined within function can seen used within body function. Variables created outside function called global variables. Within function, can access global variables. Variables created within function override global variables names match. Use help(thing) view help something. Put docstrings functions provide help function. Specify default values parameters defining function using name=value parameter list. Parameters can passed matching based name, position, omitting (case default value used). Put code whose parameters change frequently function, call different parameter values customize behavior.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Errors Exceptions  Python report errors? can handle errors Python programs? able read traceback, determine error took place type . able describe types situations syntax errors, indentation errors, name errors, index errors, missing file errors occur. Every programmer encounters errors, just beginning, programming years. Encountering errors exceptions can frustrating times, can make coding feel like hopeless endeavour. However, understanding different types errors likely encounter can help lot. know get certain types errors, become much easier fix. Errors Python specific form, called traceback. Let’s examine one: particular traceback two levels. can determine number levels looking number arrows left hand side. case: first shows code cell , arrow pointing Line 11 (favorite_ice_cream()). second shows code function favorite_ice_cream, arrow pointing Line 9 (print(ice_creams[3])). last level actual place error occurred. level(s) show function program executed get next level . , case, program first performed function call function favorite_ice_cream. Inside function, program encountered error Line 6, tried run code print(ice_creams[3]). error program actually encounter? last line traceback, Python helpfully tells us category type error (case, IndexError) detailed error message (case, says “list index range”). encounter error don’t know means, still important read traceback closely. way, fix error, encounter new one, can tell error changed. Additionally, sometimes knowing error occurred enough fix , even don’t entirely understand message. encounter error don’t recognize, try looking official documentation errors. However, note may always able find error , possible create custom errors. case, hopefully custom error message informative enough help figure went wrong. 3 levels print_message 13 IndexError list index range can infer 7 right index use messages. forget colon end line, accidentally add one space many indenting statement, forget parenthesis, encounter syntax error. means Python couldn’t figure read program. similar forgetting punctuation English: example, text difficult read punctuation also capitalization hard figure sentence ends also figure sentence begins extent might ambiguous sentence break People can typically figure meant text punctuation, people much smarter computers. Python doesn’t know read program, give inform error. example: , Python tells us SyntaxError line 1, even puts little arrow place issue. case problem function definition missing colon end. Actually, function two issues syntax. fix problem colon, see also IndentationError, means lines function definition indentation: SyntaxError IndentationError indicate problem syntax program, IndentationError specific: always means problem code indented. Another common type error called NameError, occurs try use variable exist. example: Variable name errors come informative error messages, usually form “name ‘the_variable_name’ defined”. error message occur? ’s harder question answer, depends code supposed . However, common reasons might undefined variable. first meant use string, forgot put quotes around : second reason might trying use variable yet exist. following example, count defined (e.g., count = 0) loop: Finally, third possibility made typo writing code. Let’s say fixed error adding line Count = 0 loop. Frustratingly, actually fix error. Remember variables case-sensitive, variable count different Count. still get error, still defined count: Next errors containers (like lists strings) items within . try access item list string exist, get error. makes sense: asked someone day like get coffee, answered “caturday”, might bit annoyed. Python gets similarly annoyed try ask item doesn’t exist: , Python telling us IndexError code, meaning tried access list index exist. last type error ’ll cover today associated reading writing files: FileNotFoundError. try read file exist, receive FileNotFoundError telling . attempt write file opened read-, Python 3 returns UnsupportedOperationError. generally, problems input output manifest OSErrors, may show specific subclass; can see list Python docs. unique UNIX errno, can see error message. One reason receiving error specified incorrect path file. example, currently folder called myproject, file myproject/writing/myfile.txt, try open myfile.txt, fail. correct path writing/myfile.txt. also possible file name path contains typo. related issue can occur use “read” flag instead “write” flag. Python give error try open file writing file exist. However, meant open file reading, accidentally opened writing, try read , get UnsupportedOperation error telling file opened reading: common errors files, though many others exist. get error ’ve never seen , searching Internet error type often reveals common reasons might get error. SyntaxError missing (): end first line, IndentationError mismatch second third lines. fixed version : 3 NameErrors number misspelled, message defined, quotes. Fixed version: IndexError; last entry seasons[3], seasons[4] doesn’t make sense. fixed version :","code":"# This code has an intentional error. You can type it directly or # use it for reference to understand the error message below. def favorite_ice_cream():     ice_creams = [         'chocolate',         'vanilla',         'strawberry'     ]     print(ice_creams[3])  favorite_ice_cream() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-1-70bd89baa4df> in <module>()       9     print(ice_creams[3])       10 ----> 11 favorite_ice_cream()  <ipython-input-1-70bd89baa4df> in favorite_ice_cream()       7         'strawberry'       8     ] ----> 9     print(ice_creams[3])       10       11 favorite_ice_cream()  IndexError: list index out of range def some_function()     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-3-6bb841ea1423>\", line 1     def some_function()                        ^ SyntaxError: invalid syntax def some_function():     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-4-ae290e7659cb>\", line 4     return msg     ^ IndentationError: unexpected indent print(a) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-7-9d7b17ad5387> in <module>() ----> 1 print(a)  NameError: name 'a' is not defined print(hello) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-8-9553ee03b645> in <module>() ----> 1 print(hello)  NameError: name 'hello' is not defined for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-9-dd6a12d7ca5c> in <module>()       1 for number in range(10): ----> 2     count = count + number       3 print('The count is:', count)  NameError: name 'count' is not defined Count = 0 for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-10-d77d40059aea> in <module>()       1 Count = 0       2 for number in range(10): ----> 3     count = count + number       4 print('The count is:', count)  NameError: name 'count' is not defined letters = ['a', 'b', 'c'] print('Letter #1 is', letters[0]) print('Letter #2 is', letters[1]) print('Letter #3 is', letters[2]) print('Letter #4 is', letters[3]) Letter #1 is a Letter #2 is b Letter #3 is c --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-11-d817f55b7d6c> in <module>()       3 print('Letter #2 is', letters[1])       4 print('Letter #3 is', letters[2]) ----> 5 print('Letter #4 is', letters[3])  IndexError: list index out of range file_handle = open('myfile.txt', 'r') --------------------------------------------------------------------------- FileNotFoundError                         Traceback (most recent call last) <ipython-input-14-f6e1ac4aee96> in <module>() ----> 1 file_handle = open('myfile.txt', 'r')  FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt' file_handle = open('myfile.txt', 'w') file_handle.read() --------------------------------------------------------------------------- UnsupportedOperation                      Traceback (most recent call last) <ipython-input-15-b846479bc61f> in <module>()       1 file_handle = open('myfile.txt', 'w') ----> 2 file_handle.read()  UnsupportedOperation: not readable def another_function():     print('Syntax errors are annoying.')     print('But at least Python tells us about them!')     print('So they are usually not too hard to fix.') message = '' for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (number % 3) == 0:         message = message + 'a'     else:         message = message + 'b' print(message) seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[-1])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"long-tracebacks","dir":"Instructor","previous_headings":"","what":"Long Tracebacks","title":null,"text":"Sometimes, might see traceback long -- sometimes might even 20 levels deep! can make seem like something horrible happened, length error message reflect severity, rather, indicates program called many functions encountered error. time, actual place error occurred bottom-level, can skip traceback bottom.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"reading-error-messages","dir":"Instructor","previous_headings":"","what":"Reading Error Messages","title":null,"text":"Read Python code resulting traceback , answer following questions: many levels traceback ? function name error occurred? line number function error occur? type error? error message?","code":"# This code has an intentional error. Do not type it directly; # use it for reference to understand the error message below. def print_message(day):     messages = [         'Hello, world!',         'Today is Tuesday!',         'It is the middle of the week.',         'Today is Donnerstag in German!',         'Last day of the week!',         'Hooray for the weekend!',         'Aw, the weekend is almost over.'     ]     print(messages[day])  def print_sunday_message():     print_message(7)  print_sunday_message() --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-7-3ad455d81842> in <module>      16     print_message(7)      17 ---> 18 print_sunday_message()      19  <ipython-input-7-3ad455d81842> in print_sunday_message()      14      15 def print_sunday_message(): ---> 16     print_message(7)      17      18 print_sunday_message()  <ipython-input-7-3ad455d81842> in print_message(day)      11         'Aw, the weekend is almost over.'      12     ] ---> 13     print(messages[day])      14      15 def print_sunday_message():  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"better-errors-on-newer-pythons","dir":"Instructor","previous_headings":"","what":"Better errors on newer Pythons","title":null,"text":"Newer versions Python improved error printouts. debugging errors, often helpful use latest Python version, even support older versions Python.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"forget colon end line, accidentally add one space many indenting statement, forget parenthesis, encounter syntax error. means Python couldn’t figure read program. similar forgetting punctuation English: example, text difficult read punctuation also capitalization hard figure sentence ends also figure sentence begins extent might ambiguous sentence break People can typically figure meant text punctuation, people much smarter computers. Python doesn’t know read program, give inform error. example: , Python tells us SyntaxError line 1, even puts little arrow place issue. case problem function definition missing colon end. Actually, function two issues syntax. fix problem colon, see also IndentationError, means lines function definition indentation: SyntaxError IndentationError indicate problem syntax program, IndentationError specific: always means problem code indented.","code":"def some_function()     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-3-6bb841ea1423>\", line 1     def some_function()                        ^ SyntaxError: invalid syntax def some_function():     msg = 'hello, world!'     print(msg)      return msg File \"<ipython-input-4-ae290e7659cb>\", line 4     return msg     ^ IndentationError: unexpected indent"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"tabs-and-spaces","dir":"Instructor","previous_headings":"","what":"Tabs and Spaces","title":null,"text":"indentation errors harder spot others. particular, mixing spaces tabs can difficult spot whitespace. example , first two lines body function some_function indented tabs, third line — spaces. ’re working Jupyter notebook, sure copy paste example rather trying type manually Jupyter automatically replaces tabs spaces. Visually impossible spot error. Fortunately, Python allow mix tabs spaces.","code":"def some_function(): \tmsg = 'hello, world!' \tprint(msg)         return msg File \"<ipython-input-5-653b36fbcd41>\", line 4     return msg               ^ TabError: inconsistent use of tabs and spaces in indentation"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Another common type error called NameError, occurs try use variable exist. example: Variable name errors come informative error messages, usually form “name ‘the_variable_name’ defined”. error message occur? ’s harder question answer, depends code supposed . However, common reasons might undefined variable. first meant use string, forgot put quotes around : second reason might trying use variable yet exist. following example, count defined (e.g., count = 0) loop: Finally, third possibility made typo writing code. Let’s say fixed error adding line Count = 0 loop. Frustratingly, actually fix error. Remember variables case-sensitive, variable count different Count. still get error, still defined count:","code":"print(a) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-7-9d7b17ad5387> in <module>() ----> 1 print(a)  NameError: name 'a' is not defined print(hello) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-8-9553ee03b645> in <module>() ----> 1 print(hello)  NameError: name 'hello' is not defined for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-9-dd6a12d7ca5c> in <module>()       1 for number in range(10): ----> 2     count = count + number       3 print('The count is:', count)  NameError: name 'count' is not defined Count = 0 for number in range(10):     count = count + number print('The count is:', count) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-10-d77d40059aea> in <module>()       1 Count = 0       2 for number in range(10): ----> 3     count = count + number       4 print('The count is:', count)  NameError: name 'count' is not defined"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Next errors containers (like lists strings) items within . try access item list string exist, get error. makes sense: asked someone day like get coffee, answered “caturday”, might bit annoyed. Python gets similarly annoyed try ask item doesn’t exist: , Python telling us IndexError code, meaning tried access list index exist.","code":"letters = ['a', 'b', 'c'] print('Letter #1 is', letters[0]) print('Letter #2 is', letters[1]) print('Letter #3 is', letters[2]) print('Letter #4 is', letters[3]) Letter #1 is a Letter #2 is b Letter #3 is c --------------------------------------------------------------------------- IndexError                                Traceback (most recent call last) <ipython-input-11-d817f55b7d6c> in <module>()       3 print('Letter #2 is', letters[1])       4 print('Letter #3 is', letters[2]) ----> 5 print('Letter #4 is', letters[3])  IndexError: list index out of range"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"last type error ’ll cover today associated reading writing files: FileNotFoundError. try read file exist, receive FileNotFoundError telling . attempt write file opened read-, Python 3 returns UnsupportedOperationError. generally, problems input output manifest OSErrors, may show specific subclass; can see list Python docs. unique UNIX errno, can see error message. One reason receiving error specified incorrect path file. example, currently folder called myproject, file myproject/writing/myfile.txt, try open myfile.txt, fail. correct path writing/myfile.txt. also possible file name path contains typo. related issue can occur use “read” flag instead “write” flag. Python give error try open file writing file exist. However, meant open file reading, accidentally opened writing, try read , get UnsupportedOperation error telling file opened reading: common errors files, though many others exist. get error ’ve never seen , searching Internet error type often reveals common reasons might get error. SyntaxError missing (): end first line, IndentationError mismatch second third lines. fixed version : 3 NameErrors number misspelled, message defined, quotes. Fixed version: IndexError; last entry seasons[3], seasons[4] doesn’t make sense. fixed version :","code":"file_handle = open('myfile.txt', 'r') --------------------------------------------------------------------------- FileNotFoundError                         Traceback (most recent call last) <ipython-input-14-f6e1ac4aee96> in <module>() ----> 1 file_handle = open('myfile.txt', 'r')  FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt' file_handle = open('myfile.txt', 'w') file_handle.read() --------------------------------------------------------------------------- UnsupportedOperation                      Traceback (most recent call last) <ipython-input-15-b846479bc61f> in <module>()       1 file_handle = open('myfile.txt', 'w') ----> 2 file_handle.read()  UnsupportedOperation: not readable def another_function():     print('Syntax errors are annoying.')     print('But at least Python tells us about them!')     print('So they are usually not too hard to fix.') message = '' for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (number % 3) == 0:         message = message + 'a'     else:         message = message + 'b' print(message) seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[-1])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"identifying-syntax-errors","dir":"Instructor","previous_headings":"","what":"Identifying Syntax Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. SyntaxError IndentationError? Fix error. Repeat steps 2 3, fixed errors.","code":"def another_function   print('Syntax errors are annoying.')    print('But at least Python tells us about them!')   print('So they are usually not too hard to fix.')"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"identifying-variable-name-errors","dir":"Instructor","previous_headings":"","what":"Identifying Variable Name Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type NameError think ? words, string quotes, misspelled variable, variable defined ? Fix error. Repeat steps 2 3, fixed errors.","code":"for number in range(10):     # use a if the number is a multiple of 3, otherwise use b     if (Number % 3) == 0:         message = message + a     else:         message = message + 'b' print(message)"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"identifying-index-errors","dir":"Instructor","previous_headings":"","what":"Identifying Index Errors","title":null,"text":"Read code , (without running ) try identify errors . Run code, read error message. type error ? Fix error.","code":"seasons = ['Spring', 'Summer', 'Fall', 'Winter'] print('My favorite season is ', seasons[4])"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Tracebacks can look intimidating, give us lot useful information went wrong program, including error occurred type error . error ‘grammar’ syntax program called SyntaxError. issue code indented, called IndentationError. NameError occur trying use variable exist. Possible causes variable definition missing, variable reference differs definition spelling capitalization, code contains string missing quotes around . Containers like lists strings generate errors try access items exist. type error called IndexError. Trying read file exist give FileNotFoundError. Trying read file open writing, writing file open reading, give IOError.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Defensive Programming  can make programs reliable? Explain assertion . Add assertions check program’s state correct. Correctly add precondition postcondition assertions functions. Explain test-driven development , use creating new functions. Explain variables initialized using actual data values rather arbitrary constants. previous lessons introduced basic tools programming: variables lists, file /O, loops, conditionals, functions. haven’t done show us tell whether program getting right answer, tell ’s still getting right answer make changes . achieve , need : Write programs check operation. Write run tests widely-used functions. Make sure know “correct” actually means. good news , things speed programming, slow . real carpentry — kind done lumber — time saved measuring carefully cutting piece wood much greater time measuring takes. first step toward getting right answers programs assume mistakes happen guard . called defensive programming, common way add assertions code checks runs. assertion simply statement something must true certain point program. Python sees one, evaluates assertion’s condition. ’s true, Python nothing, ’s false, Python halts program immediately prints error message one provided. example, piece code halts soon loop encounters value isn’t positive: Programs like Firefox browser full assertions: 10-20% code contain check 80–90% working correctly. Broadly speaking, assertions fall three categories: precondition something must true start function order work correctly. postcondition something function guarantees true finishes. invariant something always true particular point inside piece code. example, suppose representing rectangles using tuple four coordinates (x0, y0, x1, y1), representing lower left upper right corners rectangle. order calculations, need normalize rectangle lower left corner origin longest side 1.0 units long. function , checks input correctly formatted result makes sense: preconditions lines 6, 8, 9 catch invalid inputs: post-conditions lines 20 21 help us catch bugs telling us calculations might incorrect. example, normalize rectangle taller wide everything seems OK: normalize one ’s wider tall, assertion triggered: Re-reading function, realize line 14 divide dy dx rather dx dy. Jupyter notebook, can display line numbers typing Ctrl+M followed L. left assertion end function, created returned something right shape valid answer, wasn’t. Detecting debugging almost certainly taken time long run writing assertion. assertions aren’t just catching errors: also help people understand programs. assertion gives person reading program chance check (consciously otherwise) understanding matches code . good programmers follow two rules adding assertions code. first , fail early, fail often. greater distance error occurs ’s noticed, harder error debug, good code catches mistakes early possible. second rule , turn bugs assertions tests. Whenever fix bug, write assertion catches mistake make . made mistake piece code, odds good made mistakes nearby, make mistake (related one) next time change . Writing assertions check haven’t regressed (.e., haven’t re-introduced old problem) can save lot time long run, helps warn people reading code (including future self) bit tricky. assertion checks something true particular point program. next step check overall behavior piece code, .e., make sure produces right output ’s given particular input. example, suppose need find two time series overlap. range time series represented pair numbers, time interval started ended. output largest range include: novice programmers solve problem like : Write function range_overlap. Call interactively two three different inputs. produces wrong answer, fix function re-run test. clearly works — , thousands scientists right now — ’s better way: Write short function test. Write range_overlap function pass tests. range_overlap produces wrong answers, fix re-run test functions. Writing tests writing function exercise called test-driven development (TDD). advocates believe produces better code faster : people write tests writing thing tested, subject confirmation bias, .e., subconsciously write tests show code correct, rather find errors. Writing tests helps programmers figure function actually supposed . start defining empty function range_overlap: three test statements range_overlap: error actually reassuring: haven’t implemented logic range_overlap yet, tests passed, indicate ’ve written entirely ineffective test. bonus writing tests, ’ve implicitly defined input output look like: expect list pairs input, produce single pair output. Something important missing, though. don’t tests case ranges don’t overlap : range_overlap case: fail error message, produce special value like (0.0, 0.0) signal ’s overlap, something else? actual implementation function one things; writing tests first helps us figure best ’re emotionally invested whatever happened write realized issue. case? two segments touch endpoints overlap ? Mathematicians usually say “yes”, engineers usually say “”. best answer “whatever useful rest program”, , actual implementation range_overlap going something, whatever consistent ’s overlap . Since ’re planning use range function returns X axis time series chart, decide : every overlap non-zero width, return special value None ’s overlap. None built Python, means “nothing ”. (languages often call equivalent value null nil). decision made, can finish writing last two tests: , get error haven’t written function, ’re now ready : Take moment think calculate left endpoint overlap maximum input left endpoints, overlap right endpoint minimum input right endpoints. ’d now like re-run tests, ’re scattered across three different cells. make running easier, let’s put function: can now test range_overlap single function call: first test supposed produce None fails, know something wrong function. don’t know whether tests passed failed Python halted program soon spotted first error. Still, information better none, trace behavior function input, realize ’re initializing max_left min_right 0.0 1.0 respectively, regardless input values. violates another important rule programming: always initialize data. first assertion checks input sequence values empty. empty sequence [] make fail. second assertion checks value list can turned integer. Input [1, 2, 'c', 3] make fail. third assertion checks total list greater 0. Input [-10, 2, 3] make fail.","code":"numbers = [1.5, 2.3, 0.7, -0.001, 4.4] total = 0.0 for num in numbers:     assert num > 0.0, 'Data should only contain positive values'     total += num print('total is:', total) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-19-33d87ea29ae4> in <module>()       2 total = 0.0       3 for num in numbers: ----> 4     assert num > 0.0, 'Data should only contain positive values'       5     total += num       6 print('total is:', total)  AssertionError: Data should only contain positive values def normalize_rectangle(rect):     \"\"\"Normalizes a rectangle so that it is at the origin and 1.0 units long on its longest axis.     Input should be of the format (x0, y0, x1, y1).     (x0, y0) and (x1, y1) define the lower left and upper right corners     of the rectangle, respectively.\"\"\"     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'     x0, y0, x1, y1 = rect     assert x0 < x1, 'Invalid X coordinates'     assert y0 < y1, 'Invalid Y coordinates'      dx = x1 - x0     dy = y1 - y0     if dx > dy:         scaled = dx / dy         upper_x, upper_y = 1.0, scaled     else:         scaled = dx / dy         upper_x, upper_y = scaled, 1.0      assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid'     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      return (0, 0, upper_x, upper_y) print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-2-1b9cd8e18a1f> in <module> ----> 1 print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       4     (x0, y0) and (x1, y1) define the lower left and upper right corners       5     of the rectangle, respectively.\"\"\" ----> 6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect       8     assert x0 < x1, 'Invalid X coordinates'  AssertionError: Rectangles must contain 4 coordinates print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-3-325036405532> in <module> ----> 1 print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect ----> 8     assert x0 < x1, 'Invalid X coordinates'       9     assert y0 < y1, 'Invalid Y coordinates'      10  AssertionError: Invalid X coordinates print(normalize_rectangle( (0.0, 0.0, 1.0, 5.0) )) (0, 0, 0.2, 1.0) print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) )) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-5-8d4a48f1d068> in <module> ----> 1 print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)      19      20     assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid' ---> 21     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      22      23     return (0, 0, upper_x, upper_y)  AssertionError: Calculated upper Y coordinate invalid def range_overlap(ranges):     pass assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0) assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0) assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-25-d8be150fbef6> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       2 assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)       3 assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)  AssertionError: assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-26-d877ef460ba2> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       2 assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None  AssertionError: def range_overlap(ranges):     \"\"\"Return common overlap among a set of [left, right] ranges.\"\"\"     max_left = 0.0     min_right = 1.0     for (left, right) in ranges:         max_left = max(max_left, left)         min_right = min(min_right, right)     return (max_left, min_right) def test_range_overlap():     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)     assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([]) == None test_range_overlap() --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-29-cf9215c96457> in <module>() ----> 1 test_range_overlap()  <ipython-input-28-5d4cd6fd41d9> in test_range_overlap()       1 def test_range_overlap(): ----> 2     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       3     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None       4     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       5     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)  AssertionError: # a possible pre-condition: assert len(input_array) > 0, 'Array length must be non-zero' # a possible post-condition: assert numpy.amin(input_array) <= average <= numpy.amax(input_array), 'Average should be between min and max of input values (inclusive)'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"first step toward getting right answers programs assume mistakes happen guard . called defensive programming, common way add assertions code checks runs. assertion simply statement something must true certain point program. Python sees one, evaluates assertion’s condition. ’s true, Python nothing, ’s false, Python halts program immediately prints error message one provided. example, piece code halts soon loop encounters value isn’t positive: Programs like Firefox browser full assertions: 10-20% code contain check 80–90% working correctly. Broadly speaking, assertions fall three categories: precondition something must true start function order work correctly. postcondition something function guarantees true finishes. invariant something always true particular point inside piece code. example, suppose representing rectangles using tuple four coordinates (x0, y0, x1, y1), representing lower left upper right corners rectangle. order calculations, need normalize rectangle lower left corner origin longest side 1.0 units long. function , checks input correctly formatted result makes sense: preconditions lines 6, 8, 9 catch invalid inputs: post-conditions lines 20 21 help us catch bugs telling us calculations might incorrect. example, normalize rectangle taller wide everything seems OK: normalize one ’s wider tall, assertion triggered: Re-reading function, realize line 14 divide dy dx rather dx dy. Jupyter notebook, can display line numbers typing Ctrl+M followed L. left assertion end function, created returned something right shape valid answer, wasn’t. Detecting debugging almost certainly taken time long run writing assertion. assertions aren’t just catching errors: also help people understand programs. assertion gives person reading program chance check (consciously otherwise) understanding matches code . good programmers follow two rules adding assertions code. first , fail early, fail often. greater distance error occurs ’s noticed, harder error debug, good code catches mistakes early possible. second rule , turn bugs assertions tests. Whenever fix bug, write assertion catches mistake make . made mistake piece code, odds good made mistakes nearby, make mistake (related one) next time change . Writing assertions check haven’t regressed (.e., haven’t re-introduced old problem) can save lot time long run, helps warn people reading code (including future self) bit tricky.","code":"numbers = [1.5, 2.3, 0.7, -0.001, 4.4] total = 0.0 for num in numbers:     assert num > 0.0, 'Data should only contain positive values'     total += num print('total is:', total) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-19-33d87ea29ae4> in <module>()       2 total = 0.0       3 for num in numbers: ----> 4     assert num > 0.0, 'Data should only contain positive values'       5     total += num       6 print('total is:', total)  AssertionError: Data should only contain positive values def normalize_rectangle(rect):     \"\"\"Normalizes a rectangle so that it is at the origin and 1.0 units long on its longest axis.     Input should be of the format (x0, y0, x1, y1).     (x0, y0) and (x1, y1) define the lower left and upper right corners     of the rectangle, respectively.\"\"\"     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'     x0, y0, x1, y1 = rect     assert x0 < x1, 'Invalid X coordinates'     assert y0 < y1, 'Invalid Y coordinates'      dx = x1 - x0     dy = y1 - y0     if dx > dy:         scaled = dx / dy         upper_x, upper_y = 1.0, scaled     else:         scaled = dx / dy         upper_x, upper_y = scaled, 1.0      assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid'     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      return (0, 0, upper_x, upper_y) print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-2-1b9cd8e18a1f> in <module> ----> 1 print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       4     (x0, y0) and (x1, y1) define the lower left and upper right corners       5     of the rectangle, respectively.\"\"\" ----> 6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect       8     assert x0 < x1, 'Invalid X coordinates'  AssertionError: Rectangles must contain 4 coordinates print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-3-325036405532> in <module> ----> 1 print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)       6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'       7     x0, y0, x1, y1 = rect ----> 8     assert x0 < x1, 'Invalid X coordinates'       9     assert y0 < y1, 'Invalid Y coordinates'      10  AssertionError: Invalid X coordinates print(normalize_rectangle( (0.0, 0.0, 1.0, 5.0) )) (0, 0, 0.2, 1.0) print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) )) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-5-8d4a48f1d068> in <module> ----> 1 print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))  <ipython-input-1-c94cf5b065b9> in normalize_rectangle(rect)      19      20     assert 0 < upper_x <= 1.0, 'Calculated upper X coordinate invalid' ---> 21     assert 0 < upper_y <= 1.0, 'Calculated upper Y coordinate invalid'      22      23     return (0, 0, upper_x, upper_y)  AssertionError: Calculated upper Y coordinate invalid"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"assertion checks something true particular point program. next step check overall behavior piece code, .e., make sure produces right output ’s given particular input. example, suppose need find two time series overlap. range time series represented pair numbers, time interval started ended. output largest range include: novice programmers solve problem like : Write function range_overlap. Call interactively two three different inputs. produces wrong answer, fix function re-run test. clearly works — , thousands scientists right now — ’s better way: Write short function test. Write range_overlap function pass tests. range_overlap produces wrong answers, fix re-run test functions. Writing tests writing function exercise called test-driven development (TDD). advocates believe produces better code faster : people write tests writing thing tested, subject confirmation bias, .e., subconsciously write tests show code correct, rather find errors. Writing tests helps programmers figure function actually supposed . start defining empty function range_overlap: three test statements range_overlap: error actually reassuring: haven’t implemented logic range_overlap yet, tests passed, indicate ’ve written entirely ineffective test. bonus writing tests, ’ve implicitly defined input output look like: expect list pairs input, produce single pair output. Something important missing, though. don’t tests case ranges don’t overlap : range_overlap case: fail error message, produce special value like (0.0, 0.0) signal ’s overlap, something else? actual implementation function one things; writing tests first helps us figure best ’re emotionally invested whatever happened write realized issue. case? two segments touch endpoints overlap ? Mathematicians usually say “yes”, engineers usually say “”. best answer “whatever useful rest program”, , actual implementation range_overlap going something, whatever consistent ’s overlap . Since ’re planning use range function returns X axis time series chart, decide : every overlap non-zero width, return special value None ’s overlap. None built Python, means “nothing ”. (languages often call equivalent value null nil). decision made, can finish writing last two tests: , get error haven’t written function, ’re now ready : Take moment think calculate left endpoint overlap maximum input left endpoints, overlap right endpoint minimum input right endpoints. ’d now like re-run tests, ’re scattered across three different cells. make running easier, let’s put function: can now test range_overlap single function call: first test supposed produce None fails, know something wrong function. don’t know whether tests passed failed Python halted program soon spotted first error. Still, information better none, trace behavior function input, realize ’re initializing max_left min_right 0.0 1.0 respectively, regardless input values. violates another important rule programming: always initialize data. first assertion checks input sequence values empty. empty sequence [] make fail. second assertion checks value list can turned integer. Input [1, 2, 'c', 3] make fail. third assertion checks total list greater 0. Input [-10, 2, 3] make fail.","code":"def range_overlap(ranges):     pass assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0) assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0) assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0) --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-25-d8be150fbef6> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       2 assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)       3 assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)  AssertionError: assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == ??? assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-26-d877ef460ba2> in <module>() ----> 1 assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       2 assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None  AssertionError: def range_overlap(ranges):     \"\"\"Return common overlap among a set of [left, right] ranges.\"\"\"     max_left = 0.0     min_right = 1.0     for (left, right) in ranges:         max_left = max(max_left, left)         min_right = min(min_right, right)     return (max_left, min_right) def test_range_overlap():     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)     assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)     assert range_overlap([]) == None test_range_overlap() --------------------------------------------------------------------------- AssertionError                            Traceback (most recent call last) <ipython-input-29-cf9215c96457> in <module>() ----> 1 test_range_overlap()  <ipython-input-28-5d4cd6fd41d9> in test_range_overlap()       1 def test_range_overlap(): ----> 2     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None       3     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None       4     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)       5     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)  AssertionError: # a possible pre-condition: assert len(input_array) > 0, 'Array length must be non-zero' # a possible post-condition: assert numpy.amin(input_array) <= average <= numpy.amax(input_array), 'Average should be between min and max of input values (inclusive)'"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"pre--and-post-conditions","dir":"Instructor","previous_headings":"","what":"Pre- and Post-Conditions","title":null,"text":"Suppose writing function called average calculates average numbers NumPy array. pre-conditions post-conditions write ? Compare answer neighbor’s: can think function pass tests /vice versa?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"testing-assertions","dir":"Instructor","previous_headings":"","what":"Testing Assertions","title":null,"text":"Given sequence number cars, function get_total_cars returns total number cars. Explain words assertions function check, one, give example input make assertion fail.","code":"get_total_cars([1, 2, 3, 4]) 10 get_total_cars(['a', 'b', 'c']) ValueError: invalid literal for int() with base 10: 'a' def get_total_cars(values):     assert len(values) > 0     for element in values:         assert int(element)     values = [int(element) for element in values]     total = sum(values)     assert total > 0     return total"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Program defensively, .e., assume errors going arise, write code detect . Put assertions programs check state run, help readers understand programs supposed work. Use preconditions check inputs function safe use. Use postconditions check output function safe use. Write tests writing code order help determine exactly code supposed .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Debugging  can debug program? Debug code containing error systematically. Identify ways making code less error-prone easily tested. testing uncovered problems, next step fix . Many novices making --less random changes code seems produce right answer, ’s inefficient (result usually correct one case ’re testing). experienced programmer , systematically debug, follow variation rules explained . first step debugging something know ’s supposed . “program doesn’t work” isn’t good enough: order diagnose fix problems, need able tell correct output incorrect. can write test case failing case — .e., can assert inputs, function produce result — ’re ready start debugging. can’t, need figure ’re going know ’ve fixed things. writing test cases scientific software frequently harder writing test cases commercial applications, knew output scientific code supposed , wouldn’t running software: ’d writing results moving next program. practice, scientists tend following: Test simplified data. statistics real data set, try calculating statistics single record, two identical records, two records whose values one step apart, case can calculate right answer hand. Test simplified case. program supposed simulate magnetic eddies rapidly-rotating blobs supercooled helium, first test blob helium isn’t rotating, isn’t subjected external electromagnetic fields. Similarly, ’re looking effects climate change speciation, first test hold temperature, precipitation, factors constant. Compare oracle. test oracle something whose results trusted, experimental data, older program, human expert. use test oracles determine new program produces correct results. test oracle, store output particular cases can compare new results often like without re-running program. Check conservation laws. Mass, energy, quantities conserved physical systems, programs well. Similarly, analyzing patient data, number records either stay decrease move one analysis next (since might throw away outliers records missing values). “new” patients start appearing nowhere move pipeline, ’s probably sign something wrong. Visualize. Data analysts frequently use simple visualizations check science ’re correctness code (just opening lesson tutorial). used debugging last resort, though, since ’s hard compare two visualizations automatically. can debug something fails, second step always find test case makes fail every time. “every time” part important things frustrating debugging intermittent problem: call function dozen times get single failure, odds good ’ll scroll past failure actually occurs. part , ’s always important check code “plugged ”, .e., ’re actually exercising problem think . Every programmer spent hours chasing bug, realize actually calling code wrong data set wrong configuration parameters, using wrong version software entirely. Mistakes like particularly likely happen ’re tired, frustrated, deadline, one reasons late-night (overnight) coding sessions almost never worthwhile. takes 20 minutes bug surface, can three experiments hour. means ’ll get less data time ’re likely distracted things wait program fail, means time spending problem less focused. ’s therefore critical make fail fast. well making program fail fast time, want make fail fast space, .e., want localize failure smallest possible region code: smaller gap cause effect, easier connection find. Many programmers therefore use divide conquer strategy find bugs, .e., output function wrong, check whether things OK middle, concentrate either first second half, . N things can interact N! different ways, every line code isn’t run part test means one thing don’t need worry . Replacing random chunks code unlikely much good. (, got wrong first time, ’ll probably get wrong second third well.) Good programmers therefore change one thing time, reason. either trying gather information (“bug still change order loops?”) test fix (“can make bug go away sorting data processing ?”). Every time make change, however small, re-run tests immediately, things change , harder know ’s responsible (N! interactions ). re-run tests: half fixes made code introduce (re-introduce) bugs, re-running tests tells us whether regressed. Good scientists keep track ’ve done can reproduce work, don’t waste time repeating experiments running ones whose results won’t interesting. Similarly, debugging works best keep track ’ve done well worked. find asking, “left followed right odd number lines cause crash? right followed left? using even number lines?” ’s time step away computer, take deep breath, start working systematically. Records particularly useful time comes ask help. People likely listen us can explain clearly , ’re better able give information need useful. speaking help: can’t find bug 10 minutes, humble ask help. Explaining problem someone else often useful, since hearing ’re thinking helps us spot inconsistencies hidden assumptions. don’t someone nearby share problem description , get rubber duck! Asking help also helps alleviate confirmation bias. just spent hour writing complicated program, want work, ’re likely keep telling , rather searching reason doesn’t. People aren’t emotionally invested code can objective, ’re often able spot simple mistakes overlooked. Part humble learning mistakes. Programmers tend get things wrong : either don’t understand language libraries ’re working , model things work wrong. either case, taking note error occurred checking next time quickly turns making mistake . makes us productive long run. saying goes, week hard work can sometimes save hour thought. train avoid making kinds mistakes, break code modular, testable chunks, turn every assumption (mistake) assertion, actually take us less time produce working programs, .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"first step debugging something know ’s supposed . “program doesn’t work” isn’t good enough: order diagnose fix problems, need able tell correct output incorrect. can write test case failing case — .e., can assert inputs, function produce result — ’re ready start debugging. can’t, need figure ’re going know ’ve fixed things. writing test cases scientific software frequently harder writing test cases commercial applications, knew output scientific code supposed , wouldn’t running software: ’d writing results moving next program. practice, scientists tend following: Test simplified data. statistics real data set, try calculating statistics single record, two identical records, two records whose values one step apart, case can calculate right answer hand. Test simplified case. program supposed simulate magnetic eddies rapidly-rotating blobs supercooled helium, first test blob helium isn’t rotating, isn’t subjected external electromagnetic fields. Similarly, ’re looking effects climate change speciation, first test hold temperature, precipitation, factors constant. Compare oracle. test oracle something whose results trusted, experimental data, older program, human expert. use test oracles determine new program produces correct results. test oracle, store output particular cases can compare new results often like without re-running program. Check conservation laws. Mass, energy, quantities conserved physical systems, programs well. Similarly, analyzing patient data, number records either stay decrease move one analysis next (since might throw away outliers records missing values). “new” patients start appearing nowhere move pipeline, ’s probably sign something wrong. Visualize. Data analysts frequently use simple visualizations check science ’re correctness code (just opening lesson tutorial). used debugging last resort, though, since ’s hard compare two visualizations automatically.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"can debug something fails, second step always find test case makes fail every time. “every time” part important things frustrating debugging intermittent problem: call function dozen times get single failure, odds good ’ll scroll past failure actually occurs. part , ’s always important check code “plugged ”, .e., ’re actually exercising problem think . Every programmer spent hours chasing bug, realize actually calling code wrong data set wrong configuration parameters, using wrong version software entirely. Mistakes like particularly likely happen ’re tired, frustrated, deadline, one reasons late-night (overnight) coding sessions almost never worthwhile.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"takes 20 minutes bug surface, can three experiments hour. means ’ll get less data time ’re likely distracted things wait program fail, means time spending problem less focused. ’s therefore critical make fail fast. well making program fail fast time, want make fail fast space, .e., want localize failure smallest possible region code: smaller gap cause effect, easier connection find. Many programmers therefore use divide conquer strategy find bugs, .e., output function wrong, check whether things OK middle, concentrate either first second half, . N things can interact N! different ways, every line code isn’t run part test means one thing don’t need worry .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Replacing random chunks code unlikely much good. (, got wrong first time, ’ll probably get wrong second third well.) Good programmers therefore change one thing time, reason. either trying gather information (“bug still change order loops?”) test fix (“can make bug go away sorting data processing ?”). Every time make change, however small, re-run tests immediately, things change , harder know ’s responsible (N! interactions ). re-run tests: half fixes made code introduce (re-introduce) bugs, re-running tests tells us whether regressed.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Good scientists keep track ’ve done can reproduce work, don’t waste time repeating experiments running ones whose results won’t interesting. Similarly, debugging works best keep track ’ve done well worked. find asking, “left followed right odd number lines cause crash? right followed left? using even number lines?” ’s time step away computer, take deep breath, start working systematically. Records particularly useful time comes ask help. People likely listen us can explain clearly , ’re better able give information need useful.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"version-control-revisited","dir":"Instructor","previous_headings":"","what":"Version Control Revisited","title":null,"text":"Version control often used reset software known state debugging, explore recent changes code might responsible bugs. particular, version control systems (e.g. git, Mercurial) : blame command shows last changed line file; bisect command helps finding commit introduced issue.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"speaking help: can’t find bug 10 minutes, humble ask help. Explaining problem someone else often useful, since hearing ’re thinking helps us spot inconsistencies hidden assumptions. don’t someone nearby share problem description , get rubber duck! Asking help also helps alleviate confirmation bias. just spent hour writing complicated program, want work, ’re likely keep telling , rather searching reason doesn’t. People aren’t emotionally invested code can objective, ’re often able spot simple mistakes overlooked. Part humble learning mistakes. Programmers tend get things wrong : either don’t understand language libraries ’re working , model things work wrong. either case, taking note error occurred checking next time quickly turns making mistake . makes us productive long run. saying goes, week hard work can sometimes save hour thought. train avoid making kinds mistakes, break code modular, testable chunks, turn every assumption (mistake) assertion, actually take us less time produce working programs, .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"debug-with-a-neighbor","dir":"Instructor","previous_headings":"","what":"Debug With a Neighbor","title":null,"text":"Take function written today, introduce tricky bug. function still run, give wrong output. Switch seats neighbor attempt debug bug introduced function. principles discussed find helpful?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"not-supposed-to-be-the-same","dir":"Instructor","previous_headings":"","what":"Not Supposed to be the Same","title":null,"text":"assisting researcher Python code computes Body Mass Index (BMI) patients. researcher concerned patients seemingly unusual identical BMIs, despite different physiques. BMI calculated weight kilograms divided square height metres. Use debugging principles exercise locate problems code. suggestions give researcher ensuring later changes make work correctly? bugs spot?","code":"patients = [[70, 1.8], [80, 1.9], [150, 1.7]]  def calculate_bmi(weight, height):     return weight / (height ** 2)  for patient in patients:     weight, height = patients[0]     bmi = calculate_bmi(height, weight)     print(\"Patient's BMI is:\", bmi) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"suggestions-for-debugging","dir":"Instructor","previous_headings":"","what":"Suggestions for debugging","title":null,"text":"Add printing statement calculate_bmi function, like print('weight:', weight, 'height:', height), make clear BMI based . Change print(\"Patient's BMI : %f\" % bmi) print(\"Patient's BMI (weight: %f, height: %f) : %f\" % (weight, height, bmi)), order able distinguish bugs function bugs loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"bugs-found","dir":"Instructor","previous_headings":"","what":"Bugs found","title":null,"text":"loop utilised correctly. height weight always set first patient’s data iteration loop. height/weight variables reversed function call calculate_bmi(...), correct BMIs 21.604938, 22.160665 51.903114.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Know code supposed trying debug . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Command-Line Programs  can write Python programs work like Unix command-line tools? Use values command-line arguments program. Handle flags files separately command-line program. Read data standard input program can used pipeline. Jupyter Notebook interactive tools great prototyping code exploring data, sooner later want use program pipeline run shell script process thousands data files. order efficient way, need make programs work like Unix command-line tools. example, may want program reads dataset prints average inflammation per patient. program exactly want - prints average inflammation per patient given file. might also want look minimum first four lines maximum inflammations several files one another: scripts following: filename given command line, read data standard input. one filenames given, read data report statistics file separately. Use --min, --mean, --max flag determine statistic print. make work, need know handle command-line arguments program, understand handle standard input. ’ll tackle questions turn . going create file python code , use bash shell run code. Using text editor choice, save following text file called sys_version.py: first line imports library called sys, short “system”. defines values sys.version, describes version Python running. can run script command line like : Create another file called argv_list.py save following text . strange name argv stands “argument values”. Whenever Python runs program, takes values given command line puts list sys.argv program can determine . run program arguments: thing list full path script, always sys.argv[0]. run arguments, however: Python adds arguments magic list. hand, let’s build version readings.py always prints per-patient mean single data file. first step write function outlines implementation, placeholder function actual work. convention function usually called main, though can call whatever want: function gets name script sys.argv[0], ’s ’s always put, name file process sys.argv[1]. ’s simple test: output defined function, haven’t actually called . Let’s add call main: run : next step teach program handle multiple files. Since 60 lines output per file lot page , ’ll start using three smaller files, three days data two patients: Using small data files input also allows us check results easily: , example, can see program calculating mean correctly line, whereas really taking faith . yet another rule programming: test simple things first. want program process file separately, need loop executes filename. specify files command line, filenames sys.argv, need careful: sys.argv[0] always name script, rather name file. also need handle unknown number filenames, since program run number files. solution problems loop contents sys.argv[1:]. ‘1’ tells Python start slice location 1, program’s name isn’t included; since ’ve left upper bound, slice runs end list, includes filenames. ’s changed program readings_03.py: action: next step teach program pay attention --min, --mean, --max flags. always appear names files, : works: several things wrong : main large read comfortably. specify least two additional arguments command-line, one flag one filename, one, program throw exception run. assumes file list empty, sys.argv[1] considered action, even filename. Silent failures like always hard debug. program check submitted action one three recognized flags. version pulls processing file loop function . also checks action one allowed flags processing, program fails fast: four lines longer predecessor, broken digestible chunks 8 12 lines. next thing program read data standard input filenames given can put pipeline, redirect input , . Let’s experiment another script called count_stdin.py: little program reads lines special “file” called sys.stdin, automatically connected program’s standard input. don’t open — Python operating system take care program starts — can almost anything regular file. Let’s try running regular command-line program: common mistake try run something reads standard input like : .e., forget < character redirects file standard input. case, ’s nothing standard input, program waits start loop someone type something keyboard. Since ’s way us , program stuck, halt using Interrupt option Kernel menu Notebook. now need rewrite program loads data sys.stdin filenames provided. Luckily, numpy.loadtxt can handle either filename open file first parameter, don’t actually need change process. main changes: Let’s try : ’s better. fact, ’s done: program now everything set .","code":"$ python ../code/readings_04.py --mean inflammation-01.csv 5.45 5.425 6.1 ... 6.4 7.05 5.9 $ head -4 inflammation-01.csv | python ../code/readings_06.py --min $ python ../code/readings_04.py --max inflammation-*.csv import sys print('version is', sys.version) $ python sys_version.py version is 3.4.3+ (default, Jul 28 2015, 13:17:50) [GCC 4.9.3] import sys print('sys.argv is', sys.argv) $ python argv_list.py sys.argv is ['argv_list.py'] $ python argv_list.py first second third sys.argv is ['argv_list.py', 'first', 'second', 'third'] $ cat ../code/readings_01.py import sys import numpy   def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean) $ python ../code/readings_01.py inflammation-01.csv $ cat ../code/readings_02.py import sys import numpy  def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_02.py inflammation-01.csv 5.45 5.425 6.1 5.9 5.55 6.225 5.975 6.65 6.625 6.525 6.775 5.8 6.225 5.75 5.225 6.3 6.55 5.7 5.85 6.55 5.775 5.825 6.175 6.1 5.8 6.425 6.05 6.025 6.175 6.55 6.175 6.35 6.725 6.125 7.075 5.725 5.925 6.15 6.075 5.75 5.975 5.725 6.3 5.9 6.75 5.925 7.225 6.15 5.95 6.275 5.7 6.1 6.825 5.975 6.725 5.7 6.25 6.4 7.05 5.9 $ ls small-*.csv small-01.csv small-02.csv small-03.csv $ cat small-01.csv 0,0,1 0,1,2 $ python ../code/readings_02.py small-01.csv 0.333333333333 1.0 $ cat ../code/readings_03.py import sys import numpy  def main():     script = sys.argv[0]     for filename in sys.argv[1:]:         data = numpy.loadtxt(filename, delimiter=',')         for row_mean in numpy.mean(data, axis=1):             print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_03.py small-01.csv small-02.csv 0.333333333333 1.0 13.6666666667 11.0 $ cat ../code/readings_04.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]      for filename in filenames:         data = numpy.loadtxt(filename, delimiter=',')          if action == '--min':             values = numpy.amin(data, axis=1)         elif action == '--mean':             values = numpy.mean(data, axis=1)         elif action == '--max':             values = numpy.amax(data, axis=1)          for val in values:             print(val)  if __name__ == '__main__':     main() $ python ../code/readings_04.py --max small-01.csv 1.0 2.0 $ cat ../code/readings_05.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     for filename in filenames:         process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ cat ../code/count_stdin.py import sys  count = 0 for line in sys.stdin:     count += 1  print(count, 'lines in standard input') $ python ../code/count_stdin.py < small-01.csv 2 lines in standard input $ python ../code/count_stdin.py small-01.csv $ cat ../code/readings_06.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ python ../code/readings_06.py --mean < small-01.csv 0.333333333333 1.0 import sys  def main():     assert len(sys.argv) == 4, 'Need exactly 3 arguments'      operator = sys.argv[1]     assert operator in ['--add', '--subtract', '--multiply', '--divide'], \\         'Operator is not one of --add, --subtract, --multiply, or --divide: bailing out'     try:         operand1, operand2 = float(sys.argv[2]), float(sys.argv[3])     except ValueError:         print('cannot convert input to a number: bailing out')         return      do_arithmetic(operand1, operator, operand2)  def do_arithmetic(operand1, operator, operand2):      if operator == 'add':         value = operand1 + operand2     elif operator == 'subtract':         value = operand1 - operand2     elif operator == 'multiply':         value = operand1 * operand2     elif operator == 'divide':         value = operand1 / operand2     print(value)  main() import sys import glob  def main():     \"\"\"prints names of all files with sys.argv as suffix\"\"\"     assert len(sys.argv) >= 2, 'Argument list cannot be empty'     suffix = sys.argv[1] # NB: behaviour is not as you'd expect if sys.argv[1] is *     glob_input = '*.' + suffix # construct the input     glob_output = sorted(glob.glob(glob_input)) # call the glob function     for item in glob_output: # print the output         print(item)     return  main() # this is code/readings_07.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['-n', '-m', '-x'], \\            'Action is not one of -n, -m, or -x: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '-n':         values = numpy.amin(data, axis=1)     elif action == '-m':         values = numpy.mean(data, axis=1)     elif action == '-x':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() # this is code/readings_08.py import sys import numpy  def main():     script = sys.argv[0]     if len(sys.argv) == 1:  # no arguments, so print help message         print(\"Usage: python readings_08.py action filenames\\n\"               \"Action:\\n\"               \"    Must be one of --min, --mean, or --max.\\n\"               \"Filenames:\\n\"               \"    If blank, input is taken from standard input (stdin).\\n\"               \"    Otherwise, each filename in the list of arguments is processed in turn.\")         return      action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], (         'Action is not one of --min, --mean, or --max: ' + action)     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() # this is code/readings_09.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     if action not in ['--min', '--mean', '--max']: # if no action given         action = '--mean'    # set a default action, that being mean         filenames = sys.argv[1:] # start the filenames one place earlier in the argv list     else:         filenames = sys.argv[2:]      if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() import sys import numpy  def main():     script = sys.argv[0]     filenames = sys.argv[1:]     if len(filenames) <=1: #nothing to check         print('Only 1 file specified on input')     else:         nrow0, ncol0 = row_col_count(filenames[0])         print('First file %s: %d rows and %d columns' % (filenames[0], nrow0, ncol0))         for filename in filenames[1:]:             nrow, ncol = row_col_count(filename)             if nrow != nrow0 or ncol != ncol0:                 print('File %s does not check: %d rows and %d columns' % (filename, nrow, ncol))             else:                 print('File %s checks' % filename)         return  def row_col_count(filename):     try:         nrow, ncol = numpy.loadtxt(filename, delimiter=',').shape     except ValueError:         # 'ValueError' error is raised when numpy encounters lines that         # have different number of data elements in them than the rest of the lines,         # or when lines have non-numeric elements         nrow, ncol = (0, 0)     return nrow, ncol  main() import sys  def main():     \"\"\"print each input filename and the number of lines in it,        and print the sum of the number of lines\"\"\"     filenames = sys.argv[1:]     sum_nlines = 0 #initialize counting variable      if len(filenames) == 0: # no filenames, just stdin         sum_nlines = count_file_like(sys.stdin)         print('stdin: %d' % sum_nlines)     else:         for filename in filenames:             nlines = count_file(filename)             print('%s %d' % (filename, nlines))             sum_nlines += nlines         print('total: %d' % sum_nlines)  def count_file(filename):     \"\"\"count the number of lines in a file\"\"\"     f = open(filename, 'r')     nlines = len(f.readlines())     f.close()     return(nlines)  def count_file_like(file_like):     \"\"\"count the number of lines in a file-like object (eg stdin)\"\"\"     n = 0     for line in file_like:         n = n+1     return n  main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"switching-to-shell-commands","dir":"Instructor","previous_headings":"","what":"Switching to Shell Commands","title":null,"text":"lesson switching typing commands Python interpreter typing commands shell terminal window (bash). see $ front command tells run command shell rather Python interpreter.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"going create file python code , use bash shell run code. Using text editor choice, save following text file called sys_version.py: first line imports library called sys, short “system”. defines values sys.version, describes version Python running. can run script command line like : Create another file called argv_list.py save following text . strange name argv stands “argument values”. Whenever Python runs program, takes values given command line puts list sys.argv program can determine . run program arguments: thing list full path script, always sys.argv[0]. run arguments, however: Python adds arguments magic list. hand, let’s build version readings.py always prints per-patient mean single data file. first step write function outlines implementation, placeholder function actual work. convention function usually called main, though can call whatever want: function gets name script sys.argv[0], ’s ’s always put, name file process sys.argv[1]. ’s simple test: output defined function, haven’t actually called . Let’s add call main: run :","code":"import sys print('version is', sys.version) $ python sys_version.py version is 3.4.3+ (default, Jul 28 2015, 13:17:50) [GCC 4.9.3] import sys print('sys.argv is', sys.argv) $ python argv_list.py sys.argv is ['argv_list.py'] $ python argv_list.py first second third sys.argv is ['argv_list.py', 'first', 'second', 'third'] $ cat ../code/readings_01.py import sys import numpy   def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean) $ python ../code/readings_01.py inflammation-01.csv $ cat ../code/readings_02.py import sys import numpy  def main():     script = sys.argv[0]     filename = sys.argv[1]     data = numpy.loadtxt(filename, delimiter=',')     for row_mean in numpy.mean(data, axis=1):         print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_02.py inflammation-01.csv 5.45 5.425 6.1 5.9 5.55 6.225 5.975 6.65 6.625 6.525 6.775 5.8 6.225 5.75 5.225 6.3 6.55 5.7 5.85 6.55 5.775 5.825 6.175 6.1 5.8 6.425 6.05 6.025 6.175 6.55 6.175 6.35 6.725 6.125 7.075 5.725 5.925 6.15 6.075 5.75 5.975 5.725 6.3 5.9 6.75 5.925 7.225 6.15 5.95 6.275 5.7 6.1 6.825 5.975 6.725 5.7 6.25 6.4 7.05 5.9"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"running-versus-importing","dir":"Instructor","previous_headings":"","what":"Running Versus Importing","title":null,"text":"Running Python script bash similar importing file Python. biggest difference don’t expect anything happen import file, whereas running script, expect see output printed console. order Python script work expected imported run script, typically put part script produces output following statement: import Python file, __name__ name file (e.g., importing readings.py, __name__ 'readings'). However, running script bash, __name__ always set '__main__' script can determine file imported run script.","code":"if __name__ == '__main__':     main()  # Or whatever function produces output"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"the-right-way-to-do-it","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"programs can take complex parameters multiple filenames, shouldn’t handle sys.argv directly. Instead, use Python’s argparse library, handles common cases systematic way, also makes easy us provide sensible error messages users. cover module lesson can go Tshepang Lekhonkhobe’s Argparse tutorial part Python’s Official Documentation. can also use argh library, wrapper around argparse library simplifies usage (see argh documentation information).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"next step teach program handle multiple files. Since 60 lines output per file lot page , ’ll start using three smaller files, three days data two patients: Using small data files input also allows us check results easily: , example, can see program calculating mean correctly line, whereas really taking faith . yet another rule programming: test simple things first. want program process file separately, need loop executes filename. specify files command line, filenames sys.argv, need careful: sys.argv[0] always name script, rather name file. also need handle unknown number filenames, since program run number files. solution problems loop contents sys.argv[1:]. ‘1’ tells Python start slice location 1, program’s name isn’t included; since ’ve left upper bound, slice runs end list, includes filenames. ’s changed program readings_03.py: action:","code":"$ ls small-*.csv small-01.csv small-02.csv small-03.csv $ cat small-01.csv 0,0,1 0,1,2 $ python ../code/readings_02.py small-01.csv 0.333333333333 1.0 $ cat ../code/readings_03.py import sys import numpy  def main():     script = sys.argv[0]     for filename in sys.argv[1:]:         data = numpy.loadtxt(filename, delimiter=',')         for row_mean in numpy.mean(data, axis=1):             print(row_mean)  if __name__ == '__main__':     main() $ python ../code/readings_03.py small-01.csv small-02.csv 0.333333333333 1.0 13.6666666667 11.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"the-right-way-to-do-it-1","dir":"Instructor","previous_headings":"","what":"The Right Way to Do It","title":null,"text":"point, created three versions script called readings_01.py, readings_02.py, readings_03.py. wouldn’t real life: instead, one file called readings.py committed version control every time got enhancement working. teaching, though, need successive versions side side.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"next step teach program pay attention --min, --mean, --max flags. always appear names files, : works: several things wrong : main large read comfortably. specify least two additional arguments command-line, one flag one filename, one, program throw exception run. assumes file list empty, sys.argv[1] considered action, even filename. Silent failures like always hard debug. program check submitted action one three recognized flags. version pulls processing file loop function . also checks action one allowed flags processing, program fails fast: four lines longer predecessor, broken digestible chunks 8 12 lines.","code":"$ cat ../code/readings_04.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]      for filename in filenames:         data = numpy.loadtxt(filename, delimiter=',')          if action == '--min':             values = numpy.amin(data, axis=1)         elif action == '--mean':             values = numpy.mean(data, axis=1)         elif action == '--max':             values = numpy.amax(data, axis=1)          for val in values:             print(val)  if __name__ == '__main__':     main() $ python ../code/readings_04.py --max small-01.csv 1.0 2.0 $ cat ../code/readings_05.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     for filename in filenames:         process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"next thing program read data standard input filenames given can put pipeline, redirect input , . Let’s experiment another script called count_stdin.py: little program reads lines special “file” called sys.stdin, automatically connected program’s standard input. don’t open — Python operating system take care program starts — can almost anything regular file. Let’s try running regular command-line program: common mistake try run something reads standard input like : .e., forget < character redirects file standard input. case, ’s nothing standard input, program waits start loop someone type something keyboard. Since ’s way us , program stuck, halt using Interrupt option Kernel menu Notebook. now need rewrite program loads data sys.stdin filenames provided. Luckily, numpy.loadtxt can handle either filename open file first parameter, don’t actually need change process. main changes: Let’s try : ’s better. fact, ’s done: program now everything set .","code":"$ cat ../code/count_stdin.py import sys  count = 0 for line in sys.stdin:     count += 1  print(count, 'lines in standard input') $ python ../code/count_stdin.py < small-01.csv 2 lines in standard input $ python ../code/count_stdin.py small-01.csv $ cat ../code/readings_06.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], \\            'Action is not one of --min, --mean, or --max: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() $ python ../code/readings_06.py --mean < small-01.csv 0.333333333333 1.0 import sys  def main():     assert len(sys.argv) == 4, 'Need exactly 3 arguments'      operator = sys.argv[1]     assert operator in ['--add', '--subtract', '--multiply', '--divide'], \\         'Operator is not one of --add, --subtract, --multiply, or --divide: bailing out'     try:         operand1, operand2 = float(sys.argv[2]), float(sys.argv[3])     except ValueError:         print('cannot convert input to a number: bailing out')         return      do_arithmetic(operand1, operator, operand2)  def do_arithmetic(operand1, operator, operand2):      if operator == 'add':         value = operand1 + operand2     elif operator == 'subtract':         value = operand1 - operand2     elif operator == 'multiply':         value = operand1 * operand2     elif operator == 'divide':         value = operand1 / operand2     print(value)  main() import sys import glob  def main():     \"\"\"prints names of all files with sys.argv as suffix\"\"\"     assert len(sys.argv) >= 2, 'Argument list cannot be empty'     suffix = sys.argv[1] # NB: behaviour is not as you'd expect if sys.argv[1] is *     glob_input = '*.' + suffix # construct the input     glob_output = sorted(glob.glob(glob_input)) # call the glob function     for item in glob_output: # print the output         print(item)     return  main() # this is code/readings_07.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['-n', '-m', '-x'], \\            'Action is not one of -n, -m, or -x: ' + action     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '-n':         values = numpy.amin(data, axis=1)     elif action == '-m':         values = numpy.mean(data, axis=1)     elif action == '-x':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() # this is code/readings_08.py import sys import numpy  def main():     script = sys.argv[0]     if len(sys.argv) == 1:  # no arguments, so print help message         print(\"Usage: python readings_08.py action filenames\\n\"               \"Action:\\n\"               \"    Must be one of --min, --mean, or --max.\\n\"               \"Filenames:\\n\"               \"    If blank, input is taken from standard input (stdin).\\n\"               \"    Otherwise, each filename in the list of arguments is processed in turn.\")         return      action = sys.argv[1]     filenames = sys.argv[2:]     assert action in ['--min', '--mean', '--max'], (         'Action is not one of --min, --mean, or --max: ' + action)     if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  if __name__ == '__main__':     main() # this is code/readings_09.py import sys import numpy  def main():     script = sys.argv[0]     action = sys.argv[1]     if action not in ['--min', '--mean', '--max']: # if no action given         action = '--mean'    # set a default action, that being mean         filenames = sys.argv[1:] # start the filenames one place earlier in the argv list     else:         filenames = sys.argv[2:]      if len(filenames) == 0:         process(sys.stdin, action)     else:         for filename in filenames:             process(filename, action)  def process(filename, action):     data = numpy.loadtxt(filename, delimiter=',')      if action == '--min':         values = numpy.amin(data, axis=1)     elif action == '--mean':         values = numpy.mean(data, axis=1)     elif action == '--max':         values = numpy.amax(data, axis=1)      for val in values:         print(val)  main() import sys import numpy  def main():     script = sys.argv[0]     filenames = sys.argv[1:]     if len(filenames) <=1: #nothing to check         print('Only 1 file specified on input')     else:         nrow0, ncol0 = row_col_count(filenames[0])         print('First file %s: %d rows and %d columns' % (filenames[0], nrow0, ncol0))         for filename in filenames[1:]:             nrow, ncol = row_col_count(filename)             if nrow != nrow0 or ncol != ncol0:                 print('File %s does not check: %d rows and %d columns' % (filename, nrow, ncol))             else:                 print('File %s checks' % filename)         return  def row_col_count(filename):     try:         nrow, ncol = numpy.loadtxt(filename, delimiter=',').shape     except ValueError:         # 'ValueError' error is raised when numpy encounters lines that         # have different number of data elements in them than the rest of the lines,         # or when lines have non-numeric elements         nrow, ncol = (0, 0)     return nrow, ncol  main() import sys  def main():     \"\"\"print each input filename and the number of lines in it,        and print the sum of the number of lines\"\"\"     filenames = sys.argv[1:]     sum_nlines = 0 #initialize counting variable      if len(filenames) == 0: # no filenames, just stdin         sum_nlines = count_file_like(sys.stdin)         print('stdin: %d' % sum_nlines)     else:         for filename in filenames:             nlines = count_file(filename)             print('%s %d' % (filename, nlines))             sum_nlines += nlines         print('total: %d' % sum_nlines)  def count_file(filename):     \"\"\"count the number of lines in a file\"\"\"     f = open(filename, 'r')     nlines = len(f.readlines())     f.close()     return(nlines)  def count_file_like(file_like):     \"\"\"count the number of lines in a file-like object (eg stdin)\"\"\"     n = 0     for line in file_like:         n = n+1     return n  main()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"arithmetic-on-the-command-line","dir":"Instructor","previous_headings":"","what":"Arithmetic on the Command Line","title":null,"text":"Write Python program adds, subtracts, multiplies, divides two numbers provided command line:","code":"$ python arith.py --add 1 2 3.0 $ python arith.py --subtract 3 4 -1.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"finding-particular-files","dir":"Instructor","previous_headings":"","what":"Finding Particular Files","title":null,"text":"Using glob module introduced earlier, write simple version ls shows files current directory particular suffix. call script look like :","code":"$ python my_ls.py py left.py right.py zero.py"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"changing-flags","dir":"Instructor","previous_headings":"","what":"Changing Flags","title":null,"text":"Rewrite readings.py uses -n, -m, -x instead --min, --mean, --max respectively. code easier read? program easier understand?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"adding-a-help-message","dir":"Instructor","previous_headings":"","what":"Adding a Help Message","title":null,"text":"Separately, modify readings.py parameters given (.e., action specified filenames given), prints message explaining used.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"adding-a-default-action","dir":"Instructor","previous_headings":"","what":"Adding a Default Action","title":null,"text":"Separately, modify readings.py action given displays means data.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"a-file-checker","dir":"Instructor","previous_headings":"","what":"A File-Checker","title":null,"text":"Write program called check.py takes names one inflammation data files arguments checks files number rows columns. best way test program?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"counting-lines","dir":"Instructor","previous_headings":"","what":"Counting Lines","title":null,"text":"Write program called line_count.py works like Unix wc command: filenames given, reports number lines standard input. one filenames given, reports number lines , followed total number lines.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":"generate-an-error-message","dir":"Instructor","previous_headings":"","what":"Generate an Error Message","title":null,"text":"Write program called check_arguments.py prints usage exits program arguments provided. (Hint: can use sys.exit() exit program.)","code":"$ python check_arguments.py usage: python check_argument.py filename.txt $ python check_arguments.py filename.txt Thanks for specifying arguments!"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"sys library connects Python program system running . list sys.argv contains command-line arguments program run . Avoid silent failures. pseudo-file sys.stdin connects program’s standard input.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Fail early, fail often. Always initialize data. Know ’s supposed . Make fail every time. Make fail fast. Change one thing time, reason. Keep track ’ve done. humble. Test simple things first. remember, week hard work can sometimes save hour thought.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Let’s take closer look happens call fahr_to_celsius(32.0). make things clearer, ’ll start putting initial value 32.0 variable store final result one well: diagram shows memory looks like first line executed: call fahr_to_celsius, Python doesn’t create variable temp right away. Instead, creates something called stack frame keep track variables defined fahr_to_kelvin. Initially, stack frame holds value temp: call fahr_to_kelvin inside fahr_to_celsius, Python creates another stack frame hold fahr_to_kelvin’s variables: now two variables play called temp: parameter fahr_to_celsius, parameter fahr_to_kelvin. two variables name part program ambiguous, Python (every modern programming language) creates new stack frame function call keep function’s variables separate defined functions. call fahr_to_kelvin returns value, Python throws away fahr_to_kelvin’s stack frame creates new variable stack frame fahr_to_celsius hold temperature Kelvin: calls kelvin_to_celsius, means creates stack frame hold function’s variables: , Python throws away stack frame kelvin_to_celsius done creates variable result stack frame fahr_to_celsius: Finally, fahr_to_celsius done, Python throws away stack frame puts result new variable called final lives stack frame started : final stack frame always ; holds variables defined outside functions code. doesn’t hold variables various stack frames. try get value temp functions finished running, Python tells us ’s thing: go trouble? Well, ’s function called span calculates difference minimum maximum values array: Notice span assigns value variable called diff. might well use variable name hold data: don’t expect diff value 20.0 function call, name diff refer thing inside span main body program. yes, probably choose different name diff main program case, don’t want read every line NumPy see variable names functions use calling functions, just case change values variables. big idea encapsulation, ’s key writing correct, comprehensible programs. function’s job turn several operations one can think single function call instead dozen hundred statements time want something. works functions don’t interfere ; , pay attention details , quickly overloads short-term memory.","code":"original = 32.0 final = fahr_to_celsius(original) print('final value of temp after all function calls:', temp) --------------------------------------------------------------------------- NameError                                 Traceback (most recent call last) <ipython-input-12-ffd9b4dbd5f1> in <module>() ----> 1 print('final value of temp after all function calls:', temp)  NameError: name 'temp' is not defined final value of temp after all function calls: import numpy  def span(a):     diff = numpy.amax(a) - numpy.amin(a)     return diff  data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print('span of data:', span(data)) span of data: 20.0 diff = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',') print('span of data:', span(diff)) span of data: 20.0"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"following-the-call-stack","dir":"Instructor","previous_headings":"","what":"Following the Call Stack","title":null,"text":"previously wrote functions called fence outer. Draw diagram showing call stack changes run following:","code":"print(outer(fence('carbon', '+')))"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Let’s start creating simple heat maps using library called ipythonblocks. first step create “image”: Unlike import statements seen earlier, one doesn’t load entire ipythonblocks library. Instead, just loads ImageGrid library, since ’s thing need (now). ImageGrid loaded, can use create simple grid colored cells: Just like NumPy array, ImageGrid properties hold information : obvious thing grid like color cells, order , need know computers represent color. common schemes RGB, short “red, green, blue”. RGB additive color model: every shade combination red, green, blue intensities. can think three values axes cube: RGB color example multi-part value: like Cartesian coordinate, one thing several parts. can represent value Python using tuple, write using parentheses instead square brackets used list: can select elements tuples using indexing, just lists arrays: Unlike lists arrays, though, tuples changed created — technical terms, immutable: tuple represents RGB color, red, green, blue components can take values 0 255. upper bound may seem odd, ’s largest number can represented 8-bit byte (.e., 28-1). makes easy computers manipulate colors, providing fine enough gradations fool human eyes, time. Let’s see RGB colors actually look like: Simple color values like (0,255,0) easy enough decipher bit practice, color (214,90,127)? help us, ipythonblocks provides function called show_color: also provides table standard colors:","code":"from ipythonblocks import ImageGrid grid = ImageGrid(5, 3) grid.show() print('grid width:', grid.width) print('grid height:', grid.height) print('grid lines on:', grid.lines_on) grid width: 5 grid height: 3 grid lines on: True position = (12.3, 45.6) print('position is:', position) color = (10, 20, 30) print('color is:', color) position is: (12.3, 45.6) color is: (10, 20, 30) print('first element of color is:', color[0]) first element of color is: 10 color[0] = 40 print('first element of color after change:', color[0]) --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-11-9c3dd30a4e52> in <module>() ----> 1 color[0] = 40 2 print('first element of color after change:', color[0])  TypeError: 'tuple' object does not support item assignment row = ImageGrid(8, 1) row[0, 0] = (0, 0, 0)   # no color => black row[1, 0] = (255, 255, 255) # all colors => white row[2, 0] = (255, 0, 0) # all red row[3, 0] = (0, 255, 0) # all green row[4, 0] = (0, 0, 255) # all blue row[5, 0] = (255, 255, 0) # red and green row[6, 0] = (255, 0, 255) # red and blue row[7, 0] = (0, 255, 255) # green and blue row.show() from ipythonblocks import show_color show_color(214, 90, 127) from ipythonblocks import colors c = ImageGrid(3, 2) c[0, 0] = colors['Fuchsia'] c[0, 1] = colors['Salmon'] c[1, 0] = colors['Orchid'] c[1, 1] = colors['Lavender'] c[2, 0] = colors['LimeGreen'] c[2, 1] = colors['HotPink'] c.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"making-a-colorbar","dir":"Instructor","previous_headings":"","what":"Making a Colorbar","title":null,"text":"Fill ____ code create bar changes color dark blue black.","code":"bar = ImageGrid(10, 1) for x in range(10):     bar[x, 0] = (0, 0, ____) bar.show()"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"why-rgb","dir":"Instructor","previous_headings":"","what":"Why RGB?","title":null,"text":"computers use red, green, blue primary colors?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"nested-loops","dir":"Instructor","previous_headings":"","what":"Nested Loops","title":null,"text":"changing nesting loops code — .e., wrapping Y-axis loop around X-axis loop — change final image? ?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"where-to-change-data","dir":"Instructor","previous_headings":"","what":"Where to Change Data","title":null,"text":"transpose data outside heat map function? function perform transpose?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/discuss.html","id":"return-versus-display","dir":"Instructor","previous_headings":"","what":"Return Versus Display","title":null,"text":"heat map function return grid rather displaying immediately? think good bad design choice?","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"swapping-the-contents-of-variables-5-min","dir":"Instructor","previous_headings":"","what":"Swapping the contents of variables (5 min)","title":null,"text":"Explain overall effect code : Compare : always thing? find easier read?","code":"left = 'L' right = 'R'  temp = left left = right right = temp left, right = right, left"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"turn-a-string-into-a-list","dir":"Instructor","previous_headings":"","what":"Turn a String into a List","title":null,"text":"Use -loop convert string “hello” list letters: Hint: can create empty list like :","code":"[\"h\", \"e\", \"l\", \"l\", \"o\"] my_list = []"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"reverse-a-string","dir":"Instructor","previous_headings":"","what":"Reverse a String","title":null,"text":"Knowing two strings can concatenated using + operator, write loop takes string produces new string characters reverse order, 'Newton' becomes 'notweN'.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/extra_exercises.html","id":"fixing-and-testing","dir":"Instructor","previous_headings":"","what":"Fixing and Testing","title":null,"text":": “Defensive Programming” Fix range_overlap. Re-run test_range_overlap change make.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"01-intro-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Value 65.0 weight_kg label stuck ’ Image 1 1: ‘Value 65.0 weight_kg label stuck , value 143.0 weight_lb label stuck ’ Image 1 1: ‘Value 100.0 label weight_kg stuck , value 143.0 label weight_lbstuck ’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"02-numpy-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘'data' 3 3 numpy array containing row 0: ['', 'B', 'C'], row 1: ['D', 'E', 'F'], androw 2: ['G', 'H', '']. Starting upper left hand corner, data[0, 0] = '', data[0, 1] = 'B',data[0, 2] = 'C', data[1, 0] = 'D', data[1, 1] = 'E', data[1, 2] = 'F', data[2, 0] = 'G',data[2, 1] = 'H', data[2, 2] = '', bottom right hand corner.’ Image 1 1: ‘Per-patient maximum inflammation computed row-wise across columns usingnumpy.amax(data, axis=1). Per-day average inflammation computed column-wise across rows usingnumpy.mean(data, axis=0).’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"03-matplotlib-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Heat map representing data variable. cell colored value along color gradientfrom blue yellow.’ Image 1 1: ‘line graph showing average inflammation across patients 40-day period.’ Image 1 1: ‘line graph showing maximum inflammation across patients 40-day period.’ Image 1 1: ‘line graph showing minimum inflammation across patients 40-day period.’ Image 1 1: ‘Three line graphs showing daily average, maximum minimum inflammation 40-day period.’ Image 1 1: ‘Three line graphs, step lines connecting points, showing daily average, maximumand minimum inflammation 40-day period.’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"04-lists-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘veg represented shelf full produce. three rows vegetableson shelf, row contains three baskets vegetables. can labeleach basket according type vegetable contains, top rowcontains (left right) lettuce, lettuce, peppers.’ Image 1 1: ‘veg now shown list three rows, veg[0] representing top row ofthree baskets, veg[1] representing second row, veg[2] representing bottom row.’ Image 1 1: ‘veg now shown two-dimensional grid, basket labeled according toits index nested list. first index row number secondindex basket number, veg[1][3] represents basket far rightside second row (basket 4 row 2): zucchini’ reference specific basket specific shelf, use two indexes. first index represents row (top bottom) second index represents specific basket (left right).","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"05-loop-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Line graphs showing average, maximum minimum inflammation across patients 40-dayperiod.’ Image 1 1: ‘Loop variable 'num' assigned value element list odds turn andthen printed’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"06-files-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Output first iteration loop. Three line graphs showing daily average, maximum minimum inflammation 40-day period patients first dataset.’ Image 1 1: ‘Output second iteration loop. Three line graphs showing daily average, maximum minimum inflammation 40-day period patients seconddataset.’ Image 1 1: ‘Output third iteration loop. Three line graphs showing daily average, maximum minimum inflammation 40-day period patients thirddataset.’ Image 1 1: ‘Heat map third inflammation dataset. Note sporadic zero values throughoutthe entire dataset, last patient zero values 40 day study.’","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"07-cond-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘flowchart diagram -else construct tests variable num greater 100’ Image 1 2: ‘flowchart diagram conditional section multiple elif conditions possible outcomes.’ Image 2 2: ‘flowchart diagram conditional section multiple statements possible outcomes.’ C gets printed first two conditions, 4 > 5 4 == 5, true, 4 < 5 true. case one conditions can true time, scenarios multiple elif conditions met. scenarios action associated first true elif condition occur, starting top conditional section.  contrasts case multiple statements, every action can occur long condition met.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"08-func-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Labeled parts Python function definition’","code":""},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/images.html","id":"10-defensive-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Graph showing three number lines , bottom, interval overlap.’","code":""},{"path":[]},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"scenario-a-miracle-arthritis-inflammation-cure","dir":"Instructor","previous_headings":"","what":"Scenario: A Miracle Arthritis Inflammation Cure","title":null,"text":"imaginary colleague “Dr. Maverick” invented new miracle drug promises cure arthritis inflammation flare-ups 3 weeks since initially taking medication! Naturally, wish see clinical trial data, months asking data finally provided us CSV spreadsheet containing clinical trial data. CSV file contains number inflammation flare-ups per day 60 patients initial clinical trial, trial lasting 40 days. row corresponds patient, column corresponds day trial. patient first inflammation flare-take medication wait weeks take effect reduce flare-ups. see effective treatment like : Calculate average inflammation per day across patients. Plot result discuss share colleagues.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"data-format","dir":"Instructor","previous_headings":"","what":"Data Format","title":null,"text":"data sets stored comma-separated values (CSV) format: row holds information single patient, columns represent successive days. first three rows first file look like : number represents number inflammation bouts particular patient experienced given day. example, value “6” row 3 column 7 data set means third patient experiencing inflammation six times seventh day clinical study. order analyze data report colleagues, ’ll learn little bit programming.","code":"0,0,1,3,1,2,4,7,8,3,3,3,10,5,7,4,7,7,12,18,6,13,11,11,7,7,4,6,8,8,4,4,5,7,3,4,2,3,0,0 0,1,2,1,2,1,3,2,2,6,10,11,5,9,4,4,7,16,8,6,18,4,12,5,12,7,11,5,11,3,3,5,4,4,5,5,1,1,0,1 0,1,1,3,3,2,6,2,5,9,5,7,4,5,4,15,5,11,9,10,19,14,12,17,7,12,11,7,4,2,10,5,4,2,2,3,2,2,1,1"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"prerequisites","dir":"Instructor","previous_headings":"","what":"Prerequisites","title":null,"text":"need understand concepts files directories start Python interpreter tackling lesson. lesson sometimes references Jupyter Notebook although can use Python interpreter mentioned Setup. commands lesson pertain officially supported Python version, currently Python 3.8+. Newer versions usually better error printouts, using newer Python versions recommend possible.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"getting-started","dir":"Instructor","previous_headings":"","what":"Getting Started","title":null,"text":"get started, follow directions Setup page download data install Python interpreter.","code":""},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"headingSpoiler1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"lesson designed run personal computer. software data used lesson freely available online, instructions obtain provided . lesson, using Python 3 popular scientific libraries. Although one can install plain-vanilla Python required libraries hand, recommend installing Anaconda, Python distribution comes everything need lesson. Detailed installation instructions various operating systems can found Carpentries template website workshops Anaconda documentation. Download python-novice-inflammation-data.zip python-novice-inflammation-code.zip. Create folder called swc-python Desktop. Move downloaded files swc-python. Unzip files. see two folders called data code swc-python directory Desktop. start working Python, need launch program interpret execute Python commands. list several options. don’t preference, proceed top option list available machine. Otherwise, may use interface like. Jupyter Notebook provides browser-based interface working Python. installed Anaconda, can launch notebook two ways: Launch Anaconda Navigator. might ask ’d like send anonymized usage information Anaconda developers:  Make choice click “Ok, don’t show ” button. Find “Notebook” tab click “Launch” button:  Anaconda open new browser window tab Notebook Dashboard showing contents Home (User) folder. Navigate data directory clicking directory names leading : Desktop, swc-python, data: Launch notebook clicking “New” button selecting “Python 3”: 1. Navigate data directory: ’re using Unix shell application, Terminal app macOS, Console Terminal Linux, Git Bash Windows, execute following command: Windows, can use native Command Prompt program. easiest way start pressing Windows Logo Key+R, entering cmd, hitting Return. Command Prompt, use following command navigate data folder: 2. Start Jupyter server 3. Launch notebook clicking “New” button right selecting “Python 3” drop-menu:   IPython alternative solution situated somewhere plain-vanilla Python interpreter Jupyter Notebook. provides interactive command-line based interpreter various convenience features commands. IPython system installed Anaconda. start using IPython, execute:   launch plain-vanilla Python interpreter, execute: using Git Bash Windows, call Python via winpty:","code":"cd ~/Desktop/swc-python/data cd /D %userprofile%\\Desktop\\swc-python\\data jupyter notebook python -m notebook ipython python winpty python"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"lesson designed run personal computer. software data used lesson freely available online, instructions obtain provided .","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"lesson, using Python 3 popular scientific libraries. Although one can install plain-vanilla Python required libraries hand, recommend installing Anaconda, Python distribution comes everything need lesson. Detailed installation instructions various operating systems can found Carpentries template website workshops Anaconda documentation.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Download python-novice-inflammation-data.zip python-novice-inflammation-code.zip. Create folder called swc-python Desktop. Move downloaded files swc-python. Unzip files. see two folders called data code swc-python directory Desktop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"start working Python, need launch program interpret execute Python commands. list several options. don’t preference, proceed top option list available machine. Otherwise, may use interface like.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":"headingSpoiler1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Jupyter Notebook provides browser-based interface working Python. installed Anaconda, can launch notebook two ways: Launch Anaconda Navigator. might ask ’d like send anonymized usage information Anaconda developers:  Make choice click “Ok, don’t show ” button. Find “Notebook” tab click “Launch” button:  Anaconda open new browser window tab Notebook Dashboard showing contents Home (User) folder. Navigate data directory clicking directory names leading : Desktop, swc-python, data: Launch notebook clicking “New” button selecting “Python 3”: 1. Navigate data directory: ’re using Unix shell application, Terminal app macOS, Console Terminal Linux, Git Bash Windows, execute following command: Windows, can use native Command Prompt program. easiest way start pressing Windows Logo Key+R, entering cmd, hitting Return. Command Prompt, use following command navigate data folder: 2. Start Jupyter server 3. Launch notebook clicking “New” button right selecting “Python 3” drop-menu:  ","code":"cd ~/Desktop/swc-python/data cd /D %userprofile%\\Desktop\\swc-python\\data jupyter notebook python -m notebook"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"IPython alternative solution situated somewhere plain-vanilla Python interpreter Jupyter Notebook. provides interactive command-line based interpreter various convenience features commands. IPython system installed Anaconda. start using IPython, execute:  ","code":"ipython"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"launch plain-vanilla Python interpreter, execute: using Git Bash Windows, call Python via winpty:","code":"python winpty python"},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"real goal isn’t teach workshop attendees Python programming language, teach basic concepts programming depends . use Python lessons : free open-source software. well-documented runs platforms. large constantly growing user-base includes scientists. easier novices pick languages.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"using dataset records inflammation patients following arthritis treatment. make reference lesson data suspicious synthetically generated Python imaginary “Dr. Maverick”! script used generate inflammation data included code/gen_inflammation.py.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"lesson written introduction Python, real purpose introduce single important idea programming: solve problems building functions, can fit programmer’s working memory. order teach , must teach people little mechanics manipulating data lists file /O functions can things actually care . teaching order tries show practical uses every idea soon introduced; instructors resist temptation explain “90%” language well. final example asks build command-line tool works Unix pipe--filter model. useful skill helps learners see software use isn’t magical. Tools like grep might sophisticated programs learners can write point careers, ’s crucial realize difference scale rather kind. Explain use Python : ’s free. lot scientific libraries, constantly added. large scientific user community. ’s easier novices learn mature alternatives. (Software Carpentry originally used Perl; switched, found cover much material two days Python ’d covered three days Perl, retention higher.) include instructions running Jupyter Notebook tutorial want focus language rather tools. Instructors , however, walk learners basic operations: Launch command line jupyter notebook. Create new notebook. Enter code data cell execute . Explain difference [#] [#]. Watching instructor grow programs step step helpful learners anything Python. Resist urge update single cell repeatedly (’d probably real life). Instead, clone previous cell write update new copy learners complete record program grew. ’ve done , can say, “Now don’t just break things small functions right start?” discussion command-line scripts assumes students understand standard /O building filters, covered lesson shell.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"import ... ... syntax. syntax commonly used scientific Python community; explicitly recommended documentation import numpy np import matplotlib.pyplot plt. Despite , decided introduce aliasing imports novice lesson due additional cognitive load puts students, despite typing saves. good summary arguments can found PR #61. individual instructor whether want introduce aliases teach lesson, encourage please read arguments thoroughly deciding one way . NumPy methods. used use NumPy array methods first NumPy topic. switched methods equivalent functions majority instructors supported change; see PR #244 detailed arguments change. Underscores vs. hyphens filenames used use hyphens filenames order signify Python files run scripts never imported. However, discussion, including informal Twitter poll, switched underscores many files start Python scripts end imported eventually. reason, also added __name__ == '__main__' guards around main() calls, real-world Python scripts ensure imports result side-effects. discussing challenges good time introduce b *= 2 syntax.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/instructor-notes.html","id":"07-cond-headingInstructor1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"following example lead syntax error Python prompt, seems expect exactly one top-level statement per invocation. Removing print('done') example fix problem. IPython executes example single prompt without throwing error.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/instructor-notes.html","id":"07-cond-headingInstructor1","dir":"Instructor","previous_headings":"","what":"Instructor Note","title":null,"text":"following example lead syntax error Python prompt, seems expect exactly one top-level statement per invocation. Removing print('done') example fix problem. IPython executes example single prompt without throwing error.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor/reference.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"{:auto_ids} additive color model : way represent colors sum contributions primary colors red, green, blue. argument value given function program runs. term often used interchangeably (inconsistently) parameter. assertion expression supposed true particular point program. Programmers typically put assertions code check errors; assertion fails (.e., expression evaluates false), program halts produces error message. See also: invariant, precondition, postcondition. assign give value name associating variable . body (function): statements executed function runs. call stack data structure inside running program keeps track active function calls. case-insensitive Treating text upper lower case characters letter . See also: case-sensitive. case-sensitive Treating text upper lower case characters letter different. See also: case-insensitive. comment remark program intended help human readers understand going , ignored computer. Comments Python, R, Unix shell start # character run end line; comments SQL start --, languages conventions. compose apply one function result another, f(g(x)). conditional statement statement program might might executed depending whether test true false. comma-separated values (CSV) common textual representation tables values row separated commas. default value value use parameter nothing specified explicitly. defensive programming practice writing programs check operation catch errors early possible. delimiter character characters used separate individual values, commas columns CSV file. docstring Short “documentation string”, refers textual documentation embedded Python programs. Unlike comments, docstrings preserved running program can examined interactive sessions. documentation Human-language text written explain software , works, use . dotted notation two-part notation used many programming languages thing.component refers component belonging thing. empty string character string containing characters, often thought “zero” text. encapsulation practice hiding something’s implementation details rest program can worry rather . floating-point number number containing fractional part exponent. See also: integer. loop loop executed value kind set, list, range. See also: loop. function named group instructions executed function’s name used code. Occurrence function name code function call. Functions may process input arguments return result back. Functions may also used logically grouping together pieces code. cases, don’t need return meaningful value can written without return statement completely. functions return special value None, way saying “nothing” Python. function call use function another piece software. global variable variable defined outside function. can used global statements, read inside functions. heat map graphical representation two-dimensional data colors, ranging scale hue intensity, represent data values. immutable Unchangeable. value immutable data altered created. See also: mutable. import load library program. -place operators operator += provides shorthand notation common case variable assigned also operand right hand side assignment. example, statement x += 3 means thing x = x + 3. index subscript specifies location single value collection, single pixel image. inner loop loop inside another loop. See also: outer loop. integer whole number, -12343. See also: floating-point number. invariant expression whose value doesn’t change execution program, typically used assertion. See also: precondition, postcondition. library family code units (functions, classes, variables) implement set related tasks. local variable variable defined inside function, exists scope function, meaning accessed code outside function. loop variable variable keeps track progress loop. member variable contained within object. method function tied particular object. object’s methods typically implements one things can , one questions can answer. mutable Changeable. value mutable data can altered created. See immutable.” notebook Interactive computational environment accessed via web browser, can write execute Python code combine explanatory text, mathematics visualizations. Examples IPython Jupyter notebooks. object collection conceptually related variables (members) functions using variables (methods). outer loop loop contains another loop. See also: inner loop. parameter variable named function’s declaration used hold value passed call. term often used interchangeably (inconsistently) argument. pipe connection output one program input another. two programs connected way, called “pipeline”. postcondition condition function (block code) guarantees true finished running. Postconditions often represented using assertions. precondition condition must true order function (block code) run correctly. regression re-introduce bug fixed. return statement statement causes function stop executing return value caller immediately. RGB additive model represents colors combinations red, green, blue. color’s value typically range 0..255 (.e., one-byte integer). sequence collection information presented specific order. example, Python, string sequence characters, list sequence variable. shape array’s dimensions, represented vector. example, 5×3 array’s shape (5,3). silent failure Failing without producing warning messages. Silent failures hard detect debug. slice regular subsequence larger sequence, first five elements every second element. stack frame data structure provides storage function’s local variables. time function called, new stack frame created put top call stack. function returns, stack frame discarded. standard input process’s default input stream. interactive command-line applications, typically connected keyboard; pipe, receives data standard output preceding process. standard output process’s default output stream. interactive command-line applications, data sent standard output displayed screen; pipe, passed standard input next process. string Short “character string”, sequence zero characters. syntax rules define code must written computer understand. syntax error programming error occurs statements order contain characters expected programming language. tab completion feature command-line interpreters, program automatically fills partially typed commands upon pressing Tab key. test oracle program, device, data set, human results test can compared. test-driven development practice writing unit tests writing code test. traceback sequence function calls led error. tuple immutable sequence values. type classification something program (example, contents variable) kind number (e.g. floating-point, integer), string, something else. type error Indicates nature error program. example, Python, IOError problems file input/output. See also: syntax error. variable value name associated . loop loop keeps executing long condition true. See also: loop.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"real goal isn’t teach workshop attendees Python programming language, teach basic concepts programming depends . use Python lessons : free open-source software. well-documented runs platforms. large constantly growing user-base includes scientists. easier novices pick languages.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"using dataset records inflammation patients following arthritis treatment. make reference lesson data suspicious synthetically generated Python imaginary “Dr. Maverick”! script used generate inflammation data included code/gen_inflammation.py.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"lesson written introduction Python, real purpose introduce single important idea programming: solve problems building functions, can fit programmer’s working memory. order teach , must teach people little mechanics manipulating data lists file /O functions can things actually care . teaching order tries show practical uses every idea soon introduced; instructors resist temptation explain “90%” language well. final example asks build command-line tool works Unix pipe--filter model. useful skill helps learners see software use isn’t magical. Tools like grep might sophisticated programs learners can write point careers, ’s crucial realize difference scale rather kind. Explain use Python : ’s free. lot scientific libraries, constantly added. large scientific user community. ’s easier novices learn mature alternatives. (Software Carpentry originally used Perl; switched, found cover much material two days Python ’d covered three days Perl, retention higher.) include instructions running Jupyter Notebook tutorial want focus language rather tools. Instructors , however, walk learners basic operations: Launch command line jupyter notebook. Create new notebook. Enter code data cell execute . Explain difference [#] [#]. Watching instructor grow programs step step helpful learners anything Python. Resist urge update single cell repeatedly (’d probably real life). Instead, clone previous cell write update new copy learners complete record program grew. ’ve done , can say, “Now don’t just break things small functions right start?” discussion command-line scripts assumes students understand standard /O building filters, covered lesson shell.","code":""},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"import ... ... syntax. syntax commonly used scientific Python community; explicitly recommended documentation import numpy np import matplotlib.pyplot plt. Despite , decided introduce aliasing imports novice lesson due additional cognitive load puts students, despite typing saves. good summary arguments can found PR #61. individual instructor whether want introduce aliases teach lesson, encourage please read arguments thoroughly deciding one way . NumPy methods. used use NumPy array methods first NumPy topic. switched methods equivalent functions majority instructors supported change; see PR #244 detailed arguments change. Underscores vs. hyphens filenames used use hyphens filenames order signify Python files run scripts never imported. However, discussion, including informal Twitter poll, switched underscores many files start Python scripts end imported eventually. reason, also added __name__ == '__main__' guards around main() calls, real-world Python scripts ensure imports result side-effects. discussing challenges good time introduce b *= 2 syntax.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"‘https://ErinBecker.github.io/python-novice-inflammation’/reference.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"{:auto_ids} additive color model : way represent colors sum contributions primary colors red, green, blue. argument value given function program runs. term often used interchangeably (inconsistently) parameter. assertion expression supposed true particular point program. Programmers typically put assertions code check errors; assertion fails (.e., expression evaluates false), program halts produces error message. See also: invariant, precondition, postcondition. assign give value name associating variable . body (function): statements executed function runs. call stack data structure inside running program keeps track active function calls. case-insensitive Treating text upper lower case characters letter . See also: case-sensitive. case-sensitive Treating text upper lower case characters letter different. See also: case-insensitive. comment remark program intended help human readers understand going , ignored computer. Comments Python, R, Unix shell start # character run end line; comments SQL start --, languages conventions. compose apply one function result another, f(g(x)). conditional statement statement program might might executed depending whether test true false. comma-separated values (CSV) common textual representation tables values row separated commas. default value value use parameter nothing specified explicitly. defensive programming practice writing programs check operation catch errors early possible. delimiter character characters used separate individual values, commas columns CSV file. docstring Short “documentation string”, refers textual documentation embedded Python programs. Unlike comments, docstrings preserved running program can examined interactive sessions. documentation Human-language text written explain software , works, use . dotted notation two-part notation used many programming languages thing.component refers component belonging thing. empty string character string containing characters, often thought “zero” text. encapsulation practice hiding something’s implementation details rest program can worry rather . floating-point number number containing fractional part exponent. See also: integer. loop loop executed value kind set, list, range. See also: loop. function named group instructions executed function’s name used code. Occurrence function name code function call. Functions may process input arguments return result back. Functions may also used logically grouping together pieces code. cases, don’t need return meaningful value can written without return statement completely. functions return special value None, way saying “nothing” Python. function call use function another piece software. global variable variable defined outside function. can used global statements, read inside functions. heat map graphical representation two-dimensional data colors, ranging scale hue intensity, represent data values. immutable Unchangeable. value immutable data altered created. See also: mutable. import load library program. -place operators operator += provides shorthand notation common case variable assigned also operand right hand side assignment. example, statement x += 3 means thing x = x + 3. index subscript specifies location single value collection, single pixel image. inner loop loop inside another loop. See also: outer loop. integer whole number, -12343. See also: floating-point number. invariant expression whose value doesn’t change execution program, typically used assertion. See also: precondition, postcondition. library family code units (functions, classes, variables) implement set related tasks. local variable variable defined inside function, exists scope function, meaning accessed code outside function. loop variable variable keeps track progress loop. member variable contained within object. method function tied particular object. object’s methods typically implements one things can , one questions can answer. mutable Changeable. value mutable data can altered created. See immutable.” notebook Interactive computational environment accessed via web browser, can write execute Python code combine explanatory text, mathematics visualizations. Examples IPython Jupyter notebooks. object collection conceptually related variables (members) functions using variables (methods). outer loop loop contains another loop. See also: inner loop. parameter variable named function’s declaration used hold value passed call. term often used interchangeably (inconsistently) argument. pipe connection output one program input another. two programs connected way, called “pipeline”. postcondition condition function (block code) guarantees true finished running. Postconditions often represented using assertions. precondition condition must true order function (block code) run correctly. regression re-introduce bug fixed. return statement statement causes function stop executing return value caller immediately. RGB additive model represents colors combinations red, green, blue. color’s value typically range 0..255 (.e., one-byte integer). sequence collection information presented specific order. example, Python, string sequence characters, list sequence variable. shape array’s dimensions, represented vector. example, 5×3 array’s shape (5,3). silent failure Failing without producing warning messages. Silent failures hard detect debug. slice regular subsequence larger sequence, first five elements every second element. stack frame data structure provides storage function’s local variables. time function called, new stack frame created put top call stack. function returns, stack frame discarded. standard input process’s default input stream. interactive command-line applications, typically connected keyboard; pipe, receives data standard output preceding process. standard output process’s default output stream. interactive command-line applications, data sent standard output displayed screen; pipe, passed standard input next process. string Short “character string”, sequence zero characters. syntax rules define code must written computer understand. syntax error programming error occurs statements order contain characters expected programming language. tab completion feature command-line interpreters, program automatically fills partially typed commands upon pressing Tab key. test oracle program, device, data set, human results test can compared. test-driven development practice writing unit tests writing code test. traceback sequence function calls led error. tuple immutable sequence values. type classification something program (example, contents variable) kind number (e.g. floating-point, integer), string, something else. type error Indicates nature error program. example, Python, IOError problems file input/output. See also: syntax error. variable value name associated . loop loop keeps executing long condition true. See also: loop.","code":""}]
